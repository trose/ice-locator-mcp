#!/usr/bin/env python3
"""
Script to generate a comprehensive list of Hispanic/Latino full names
by combining first names and surnames from our collected data.
"""

def read_names_from_file(filename):
    """Read names from a file, skipping comment lines."""
    names = []
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comment lines
                if line and not line.startswith('#'):
                    names.append(line)
    except FileNotFoundError:
        print(f"Warning: File {filename} not found.")
    return names

def generate_full_names(first_names, surnames, output_file, max_combinations=None):
    """
    Generate full names by combining first names with surnames.
    
    Args:
        first_names: List of first names
        surnames: List of surnames
        output_file: Output file path
        max_combinations: Maximum number of combinations to generate (None for all)
    """
    count = 0
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# Hispanic/Latino Full Names\n")
        f.write("# Generated by combining first names and surnames\n")
        f.write(f"# Source: {len(first_names)} first names Ã— {len(surnames)} surnames\n")
        f.write("# Format: FirstName LastName\n\n")
        
        for first_name in first_names:
            for surname in surnames:
                f.write(f"{first_name} {surname}\n")
                count += 1
                
                # If we have a limit and we've reached it, stop
                if max_combinations and count >= max_combinations:
                    print(f"Generated {count} full names (limit reached)")
                    return count
        
        print(f"Generated {count} full names")
        return count

def main():
    # Read the names from our organized files
    first_names = read_names_from_file('organized/hispanic_first_names.txt')
    surnames = read_names_from_file('organized/hispanic_surnames.txt')
    
    print(f"Found {len(first_names)} first names and {len(surnames)} surnames")
    
    # Generate a huge list - let's create a file with all combinations
    # This could be very large, so we'll also create a smaller sample
    if first_names and surnames:
        # Generate all combinations (this will be a huge file)
        total_count = generate_full_names(
            first_names, 
            surnames, 
            'organized/hispanic_full_names_huge.txt'
        )
        
        # Also generate a more manageable sample
        sample_count = generate_full_names(
            first_names[:100],  # First 100 first names
            surnames[:50],      # First 50 surnames
            'organized/hispanic_full_names_medium.txt',
            5000  # Limit to 5000 combinations
        )
        
        print(f"\nSummary:")
        print(f"- Huge list: {total_count} full names in hispanic_full_names_huge.txt")
        print(f"- Medium sample: {sample_count} full names in hispanic_full_names_medium.txt")
        print(f"- All files are in the hispanic_names_data/organized/ directory")
    else:
        print("Error: Could not find name data. Please check the input files.")

if __name__ == "__main__":
    main()