#!/usr/bin/env python3
"""
Script to generate an extended list of Hispanic/Latino full names
by combining our collected first names with both our surnames and census surnames.
"""

def read_names_from_file(filename):
    """Read names from a file, skipping comment lines."""
    names = []
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comment lines
                if line and not line.startswith('#'):
                    names.append(line)
    except FileNotFoundError:
        print(f"Warning: File {filename} not found.")
    return names

def read_surnames_from_census_file(filename):
    """Read surnames from the census file, extracting just the surname column."""
    surnames = []
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comment lines
                if line and not line.startswith('#'):
                    # Split by tab and take the surname (second column after rank)
                    parts = line.split('\t')
                    if len(parts) >= 2:
                        surname = parts[1].strip()
                        # Remove extra whitespace that might be in the surname field
                        surname = surname.split()[0] if surname else ""
                        if surname:
                            surnames.append(surname)
    except FileNotFoundError:
        print(f"Warning: File {filename} not found.")
    return surnames

def generate_full_names(first_names, surnames, output_file, max_combinations=None):
    """
    Generate full names by combining first names with surnames.
    
    Args:
        first_names: List of first names
        surnames: List of surnames
        output_file: Output file path
        max_combinations: Maximum number of combinations to generate (None for all)
    """
    count = 0
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# Hispanic/Latino Full Names (Extended)\n")
        f.write("# Generated by combining first names with surnames from multiple sources\n")
        f.write(f"# Source: {len(first_names)} first names Ã— {len(surnames)} surnames\n")
        f.write("# Format: FirstName LastName\n\n")
        
        for first_name in first_names:
            for surname in surnames:
                f.write(f"{first_name} {surname}\n")
                count += 1
                
                # If we have a limit and we've reached it, stop
                if max_combinations and count >= max_combinations:
                    print(f"Generated {count} full names (limit reached)")
                    return count
        
        print(f"Generated {count} full names")
        return count

def main():
    # Read the names from our organized files
    first_names = read_names_from_file('organized/hispanic_first_names.txt')
    our_surnames = read_names_from_file('organized/hispanic_surnames.txt')
    census_surnames = read_surnames_from_census_file('organized/census_hispanic_surnames.txt')
    
    # Combine all surnames
    all_surnames = list(set(our_surnames + census_surnames))  # Remove duplicates
    
    print(f"Found {len(first_names)} first names")
    print(f"Found {len(our_surnames)} surnames from our dataset")
    print(f"Found {len(census_surnames)} surnames from census data")
    print(f"Total unique surnames: {len(all_surnames)}")
    
    # Generate extended lists
    if first_names and all_surnames:
        # Generate a very large list
        huge_count = generate_full_names(
            first_names, 
            all_surnames, 
            'organized/hispanic_full_names_extended_huge.txt',
            100000  # Limit to 100,000 combinations
        )
        
        # Generate a medium list
        medium_count = generate_full_names(
            first_names[:150],  # First 150 first names
            all_surnames[:100], # First 100 surnames
            'organized/hispanic_full_names_extended_medium.txt',
            15000  # Limit to 15,000 combinations
        )
        
        print(f"\nSummary:")
        print(f"- Extended huge list: {huge_count} full names in hispanic_full_names_extended_huge.txt")
        print(f"- Extended medium sample: {medium_count} full names in hispanic_full_names_extended_medium.txt")
        print(f"- All files are in the hispanic_names_data/organized/ directory")
    else:
        print("Error: Could not find name data. Please check the input files.")

if __name__ == "__main__":
    main()