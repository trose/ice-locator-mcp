"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevicePostureIntegration = exports.DeviceManagedNetworks = exports.D1Database = exports.CustomSsl = exports.CustomPages = exports.CustomHostnameFallbackOrigin = exports.CustomHostname = exports.ContentScanningExpression = exports.CloudforceOneRequestPriority = exports.CloudforceOneRequestMessage = exports.CloudforceOneRequestAsset = exports.CloudforceOneRequest = exports.CloudConnectorRules = exports.CertificatePack = exports.CallsTurnApp = exports.CallsSfuApp = exports.ByoIpPrefix = exports.BotManagement = exports.AuthenticatedOriginPullsSettings = exports.AuthenticatedOriginPullsCertificate = exports.AuthenticatedOriginPulls = exports.ArgoTieredCaching = exports.ArgoSmartRouting = exports.ApiToken = exports.ApiShieldSchemaValidationSettings = exports.ApiShieldSchema = exports.ApiShieldOperationSchemaValidationSettings = exports.ApiShieldOperation = exports.ApiShieldDiscoveryOperation = exports.ApiShield = exports.AddressMap = exports.AccountToken = exports.AccountSubscription = exports.AccountMember = exports.AccountDnsSettingsInternalView = exports.AccountDnsSettings = exports.Account = exports.AccessTag = exports.AccessServiceToken = exports.AccessRule = exports.AccessPolicy = exports.AccessOrganization = exports.AccessMutualTlsHostnameSettings = exports.AccessMutualTlsCertificate = exports.AccessKeysConfiguration = exports.AccessIdentityProvider = exports.AccessGroup = exports.AccessCustomPage = exports.AccessCaCertificate = exports.AccessApplication = void 0;
exports.getAccountSubscriptionOutput = exports.getAccountSubscription = exports.getAccountRolesOutput = exports.getAccountRoles = exports.getAccountRoleOutput = exports.getAccountRole = exports.getAccountPermissionGroupsOutput = exports.getAccountPermissionGroups = exports.getAccountPermissionGroupOutput = exports.getAccountPermissionGroup = exports.getAccountMembersOutput = exports.getAccountMembers = exports.getAccountMemberOutput = exports.getAccountMember = exports.getAccountDnsSettingsInternalViewsOutput = exports.getAccountDnsSettingsInternalViews = exports.getAccountDnsSettingsInternalViewOutput = exports.getAccountDnsSettingsInternalView = exports.getAccountDnsSettingsOutput = exports.getAccountDnsSettings = exports.getAccountApiTokenPermissionGroupsListOutput = exports.getAccountApiTokenPermissionGroupsList = exports.getAccountApiTokenPermissionGroupsOutput = exports.getAccountApiTokenPermissionGroups = exports.getAccountOutput = exports.getAccount = exports.getAccessRulesOutput = exports.getAccessRules = exports.getAccessRuleOutput = exports.getAccessRule = exports.FirewallRule = exports.Filter = exports.EmailSecurityTrustedDomains = exports.EmailSecurityImpersonationRegistry = exports.EmailSecurityBlockSender = exports.EmailRoutingSettings = exports.EmailRoutingRule = exports.EmailRoutingDns = exports.EmailRoutingCatchAll = exports.EmailRoutingAddress = exports.DnsZoneTransfersTsig = exports.DnsZoneTransfersPeer = exports.DnsZoneTransfersOutgoing = exports.DnsZoneTransfersIncoming = exports.DnsZoneTransfersAcl = exports.DnsRecord = exports.DnsFirewall = exports.DlpPredefinedProfile = exports.DlpCustomProfile = exports.DevicePostureRule = void 0;
exports.getByoIpPrefixOutput = exports.getByoIpPrefix = exports.getBotnetFeedConfigAsnOutput = exports.getBotnetFeedConfigAsn = exports.getBotManagementOutput = exports.getBotManagement = exports.getAuthenticatedOriginPullsSettingsOutput = exports.getAuthenticatedOriginPullsSettings = exports.getAuthenticatedOriginPullsCertificatesOutput = exports.getAuthenticatedOriginPullsCertificates = exports.getAuthenticatedOriginPullsCertificateOutput = exports.getAuthenticatedOriginPullsCertificate = exports.getAuthenticatedOriginPullsOutput = exports.getAuthenticatedOriginPulls = exports.getArgoTieredCachingOutput = exports.getArgoTieredCaching = exports.getArgoSmartRoutingOutput = exports.getArgoSmartRouting = exports.getApiTokensOutput = exports.getApiTokens = exports.getApiTokenPermissionGroupsListOutput = exports.getApiTokenPermissionGroupsList = exports.getApiTokenOutput = exports.getApiToken = exports.getApiShieldSchemasOutput = exports.getApiShieldSchemas = exports.getApiShieldSchemaValidationSettingsOutput = exports.getApiShieldSchemaValidationSettings = exports.getApiShieldSchemaOutput = exports.getApiShieldSchema = exports.getApiShieldOperationsOutput = exports.getApiShieldOperations = exports.getApiShieldOperationSchemaValidationSettingsOutput = exports.getApiShieldOperationSchemaValidationSettings = exports.getApiShieldOperationOutput = exports.getApiShieldOperation = exports.getApiShieldDiscoveryOperationsOutput = exports.getApiShieldDiscoveryOperations = exports.getApiShieldOutput = exports.getApiShield = exports.getAddressMapsOutput = exports.getAddressMaps = exports.getAddressMapOutput = exports.getAddressMap = exports.getAccountsOutput = exports.getAccounts = exports.getAccountTokensOutput = exports.getAccountTokens = exports.getAccountTokenOutput = exports.getAccountToken = void 0;
exports.getDnsFirewallOutput = exports.getDnsFirewall = exports.getDcvDelegationOutput = exports.getDcvDelegation = exports.getD1DatabasesOutput = exports.getD1Databases = exports.getD1DatabaseOutput = exports.getD1Database = exports.getCustomSslsOutput = exports.getCustomSsls = exports.getCustomSslOutput = exports.getCustomSsl = exports.getCustomPagesListOutput = exports.getCustomPagesList = exports.getCustomPagesOutput = exports.getCustomPages = exports.getCustomHostnamesOutput = exports.getCustomHostnames = exports.getCustomHostnameFallbackOriginOutput = exports.getCustomHostnameFallbackOrigin = exports.getCustomHostnameOutput = exports.getCustomHostname = exports.getContentScanningExpressionsOutput = exports.getContentScanningExpressions = exports.getCloudforceOneRequestsOutput = exports.getCloudforceOneRequests = exports.getCloudforceOneRequestPriorityOutput = exports.getCloudforceOneRequestPriority = exports.getCloudforceOneRequestMessageOutput = exports.getCloudforceOneRequestMessage = exports.getCloudforceOneRequestAssetOutput = exports.getCloudforceOneRequestAsset = exports.getCloudforceOneRequestOutput = exports.getCloudforceOneRequest = exports.getCloudConnectorRulesOutput = exports.getCloudConnectorRules = exports.getCertificatePacksOutput = exports.getCertificatePacks = exports.getCertificatePackOutput = exports.getCertificatePack = exports.getCallsTurnAppsOutput = exports.getCallsTurnApps = exports.getCallsTurnAppOutput = exports.getCallsTurnApp = exports.getCallsSfuAppsOutput = exports.getCallsSfuApps = exports.getCallsSfuAppOutput = exports.getCallsSfuApp = exports.getByoIpPrefixesOutput = exports.getByoIpPrefixes = void 0;
exports.getFilterOutput = exports.getFilter = exports.getEmailSecurityTrustedDomainsListOutput = exports.getEmailSecurityTrustedDomainsList = exports.getEmailSecurityTrustedDomainsOutput = exports.getEmailSecurityTrustedDomains = exports.getEmailSecurityImpersonationRegistryOutput = exports.getEmailSecurityImpersonationRegistry = exports.getEmailSecurityImpersonationRegistriesOutput = exports.getEmailSecurityImpersonationRegistries = exports.getEmailSecurityBlockSendersOutput = exports.getEmailSecurityBlockSenders = exports.getEmailSecurityBlockSenderOutput = exports.getEmailSecurityBlockSender = exports.getEmailRoutingSettingsOutput = exports.getEmailRoutingSettings = exports.getEmailRoutingRulesOutput = exports.getEmailRoutingRules = exports.getEmailRoutingRuleOutput = exports.getEmailRoutingRule = exports.getEmailRoutingDnsOutput = exports.getEmailRoutingDns = exports.getEmailRoutingCatchAllOutput = exports.getEmailRoutingCatchAll = exports.getEmailRoutingAddressesOutput = exports.getEmailRoutingAddresses = exports.getEmailRoutingAddressOutput = exports.getEmailRoutingAddress = exports.getDnsZoneTransfersTsigsOutput = exports.getDnsZoneTransfersTsigs = exports.getDnsZoneTransfersTsigOutput = exports.getDnsZoneTransfersTsig = exports.getDnsZoneTransfersPeersOutput = exports.getDnsZoneTransfersPeers = exports.getDnsZoneTransfersPeerOutput = exports.getDnsZoneTransfersPeer = exports.getDnsZoneTransfersOutgoingOutput = exports.getDnsZoneTransfersOutgoing = exports.getDnsZoneTransfersIncomingOutput = exports.getDnsZoneTransfersIncoming = exports.getDnsZoneTransfersAclsOutput = exports.getDnsZoneTransfersAcls = exports.getDnsZoneTransfersAclOutput = exports.getDnsZoneTransfersAcl = exports.getDnsRecordsOutput = exports.getDnsRecords = exports.getDnsRecordOutput = exports.getDnsRecord = exports.getDnsFirewallsOutput = exports.getDnsFirewalls = void 0;
exports.getLoadBalancerPoolsOutput = exports.getLoadBalancerPools = exports.getLoadBalancerPoolOutput = exports.getLoadBalancerPool = exports.getLoadBalancerMonitorsOutput = exports.getLoadBalancerMonitors = exports.getLoadBalancerMonitorOutput = exports.getLoadBalancerMonitor = exports.getLoadBalancerOutput = exports.getLoadBalancer = exports.getListsOutput = exports.getLists = exports.getListItemsOutput = exports.getListItems = exports.getListItemOutput = exports.getListItem = exports.getListOutput = exports.getList = exports.getLeakedCredentialCheckRulesOutput = exports.getLeakedCredentialCheckRules = exports.getLeakedCredentialCheckOutput = exports.getLeakedCredentialCheck = exports.getKeylessCertificatesOutput = exports.getKeylessCertificates = exports.getKeylessCertificateOutput = exports.getKeylessCertificate = exports.getIpRangesOutput = exports.getIpRanges = exports.getImagesOutput = exports.getImages = exports.getImageVariantOutput = exports.getImageVariant = exports.getImageOutput = exports.getImage = exports.getHyperdriveConfigsOutput = exports.getHyperdriveConfigs = exports.getHyperdriveConfigOutput = exports.getHyperdriveConfig = exports.getHostnameTlsSettingOutput = exports.getHostnameTlsSetting = exports.getHealthchecksOutput = exports.getHealthchecks = exports.getHealthcheckOutput = exports.getHealthcheck = exports.getFirewallRulesOutput = exports.getFirewallRules = exports.getFirewallRuleOutput = exports.getFirewallRule = exports.getFiltersOutput = exports.getFilters = void 0;
exports.getMtlsCertificatesOutput = exports.getMtlsCertificates = exports.getMtlsCertificateOutput = exports.getMtlsCertificate = exports.getManagedTransformsOutput = exports.getManagedTransforms = exports.getMagicWanStaticRouteOutput = exports.getMagicWanStaticRoute = exports.getMagicWanIpsecTunnelOutput = exports.getMagicWanIpsecTunnel = exports.getMagicWanGreTunnelOutput = exports.getMagicWanGreTunnel = exports.getMagicTransitSitesOutput = exports.getMagicTransitSites = exports.getMagicTransitSiteWansOutput = exports.getMagicTransitSiteWans = exports.getMagicTransitSiteWanOutput = exports.getMagicTransitSiteWan = exports.getMagicTransitSiteLansOutput = exports.getMagicTransitSiteLans = exports.getMagicTransitSiteLanOutput = exports.getMagicTransitSiteLan = exports.getMagicTransitSiteAclsOutput = exports.getMagicTransitSiteAcls = exports.getMagicTransitSiteAclOutput = exports.getMagicTransitSiteAcl = exports.getMagicTransitSiteOutput = exports.getMagicTransitSite = exports.getMagicTransitConnectorsOutput = exports.getMagicTransitConnectors = exports.getMagicTransitConnectorOutput = exports.getMagicTransitConnector = exports.getMagicNetworkMonitoringRulesOutput = exports.getMagicNetworkMonitoringRules = exports.getMagicNetworkMonitoringRuleOutput = exports.getMagicNetworkMonitoringRule = exports.getMagicNetworkMonitoringConfigurationOutput = exports.getMagicNetworkMonitoringConfiguration = exports.getLogpushJobsOutput = exports.getLogpushJobs = exports.getLogpushJobOutput = exports.getLogpushJob = exports.getLogpushDatasetJobOutput = exports.getLogpushDatasetJob = exports.getLogpushDatasetFieldOutput = exports.getLogpushDatasetField = exports.getLogpullRetentionOutput = exports.getLogpullRetention = exports.getLoadBalancersOutput = exports.getLoadBalancers = void 0;
exports.getR2BucketOutput = exports.getR2Bucket = exports.getQueuesOutput = exports.getQueues = exports.getQueueConsumersOutput = exports.getQueueConsumers = exports.getQueueConsumerOutput = exports.getQueueConsumer = exports.getQueueOutput = exports.getQueue = exports.getPagesProjectsOutput = exports.getPagesProjects = exports.getPagesProjectOutput = exports.getPagesProject = exports.getPagesDomainsOutput = exports.getPagesDomains = exports.getPagesDomainOutput = exports.getPagesDomain = exports.getPageShieldScriptsListOutput = exports.getPageShieldScriptsList = exports.getPageShieldScriptsOutput = exports.getPageShieldScripts = exports.getPageShieldPolicyOutput = exports.getPageShieldPolicy = exports.getPageShieldPoliciesOutput = exports.getPageShieldPolicies = exports.getPageShieldCookiesListOutput = exports.getPageShieldCookiesList = exports.getPageShieldCookiesOutput = exports.getPageShieldCookies = exports.getPageShieldConnectionsListOutput = exports.getPageShieldConnectionsList = exports.getPageShieldConnectionsOutput = exports.getPageShieldConnections = exports.getPageRuleOutput = exports.getPageRule = exports.getOriginCaCertificatesOutput = exports.getOriginCaCertificates = exports.getOriginCaCertificateOutput = exports.getOriginCaCertificate = exports.getObservatoryScheduledTestOutput = exports.getObservatoryScheduledTest = exports.getNotificationPolicyWebhooksListOutput = exports.getNotificationPolicyWebhooksList = exports.getNotificationPolicyWebhooksOutput = exports.getNotificationPolicyWebhooks = exports.getNotificationPolicyOutput = exports.getNotificationPolicy = exports.getNotificationPoliciesOutput = exports.getNotificationPolicies = void 0;
exports.getSnippetsListOutput = exports.getSnippetsList = exports.getSnippetsOutput = exports.getSnippets = exports.getSnippetRulesListOutput = exports.getSnippetRulesList = exports.getSchemaValidationSettingsOutput = exports.getSchemaValidationSettings = exports.getSchemaValidationSchemasListOutput = exports.getSchemaValidationSchemasList = exports.getSchemaValidationSchemasOutput = exports.getSchemaValidationSchemas = exports.getSchemaValidationOperationSettingsListOutput = exports.getSchemaValidationOperationSettingsList = exports.getSchemaValidationOperationSettingsOutput = exports.getSchemaValidationOperationSettings = exports.getRulesetsOutput = exports.getRulesets = exports.getRulesetOutput = exports.getRuleset = exports.getResourceGroupsOutput = exports.getResourceGroups = exports.getResourceGroupOutput = exports.getResourceGroup = exports.getRegistrarDomainsOutput = exports.getRegistrarDomains = exports.getRegistrarDomainOutput = exports.getRegistrarDomain = exports.getRegionalTieredCacheOutput = exports.getRegionalTieredCache = exports.getRegionalHostnamesOutput = exports.getRegionalHostnames = exports.getRegionalHostnameOutput = exports.getRegionalHostname = exports.getRateLimitsOutput = exports.getRateLimits = exports.getRateLimitOutput = exports.getRateLimit = exports.getR2CustomDomainOutput = exports.getR2CustomDomain = exports.getR2BucketSippyOutput = exports.getR2BucketSippy = exports.getR2BucketLockOutput = exports.getR2BucketLock = exports.getR2BucketLifecycleOutput = exports.getR2BucketLifecycle = exports.getR2BucketEventNotificationOutput = exports.getR2BucketEventNotification = exports.getR2BucketCorsOutput = exports.getR2BucketCors = void 0;
exports.getWaitingRoomSettingsOutput = exports.getWaitingRoomSettings = exports.getWaitingRoomRulesOutput = exports.getWaitingRoomRules = exports.getWaitingRoomEventsOutput = exports.getWaitingRoomEvents = exports.getWaitingRoomEventOutput = exports.getWaitingRoomEvent = exports.getWaitingRoomOutput = exports.getWaitingRoom = exports.getUserAgentBlockingRulesOutput = exports.getUserAgentBlockingRules = exports.getUserAgentBlockingRuleOutput = exports.getUserAgentBlockingRule = exports.getUserOutput = exports.getUser = exports.getUrlNormalizationSettingsOutput = exports.getUrlNormalizationSettings = exports.getTurnstileWidgetsOutput = exports.getTurnstileWidgets = exports.getTurnstileWidgetOutput = exports.getTurnstileWidget = exports.getTotalTlsOutput = exports.getTotalTls = exports.getTieredCacheOutput = exports.getTieredCache = exports.getStreamsOutput = exports.getStreams = exports.getStreamWebhookOutput = exports.getStreamWebhook = exports.getStreamWatermarksOutput = exports.getStreamWatermarks = exports.getStreamWatermarkOutput = exports.getStreamWatermark = exports.getStreamLiveInputOutput = exports.getStreamLiveInput = exports.getStreamKeyOutput = exports.getStreamKey = exports.getStreamDownloadOutput = exports.getStreamDownload = exports.getStreamCaptionLanguageOutput = exports.getStreamCaptionLanguage = exports.getStreamAudioTrackOutput = exports.getStreamAudioTrack = exports.getStreamOutput = exports.getStream = exports.getSpectrumApplicationsOutput = exports.getSpectrumApplications = exports.getSpectrumApplicationOutput = exports.getSpectrumApplication = void 0;
exports.getZeroTrustAccessGroupsOutput = exports.getZeroTrustAccessGroups = exports.getZeroTrustAccessGroupOutput = exports.getZeroTrustAccessGroup = exports.getZeroTrustAccessCustomPagesOutput = exports.getZeroTrustAccessCustomPages = exports.getZeroTrustAccessCustomPageOutput = exports.getZeroTrustAccessCustomPage = exports.getZeroTrustAccessApplicationsOutput = exports.getZeroTrustAccessApplications = exports.getZeroTrustAccessApplicationOutput = exports.getZeroTrustAccessApplication = exports.getWorkersScriptsOutput = exports.getWorkersScripts = exports.getWorkersScriptSubdomainOutput = exports.getWorkersScriptSubdomain = exports.getWorkersScriptOutput = exports.getWorkersScript = exports.getWorkersRoutesOutput = exports.getWorkersRoutes = exports.getWorkersRouteOutput = exports.getWorkersRoute = exports.getWorkersKvNamespacesOutput = exports.getWorkersKvNamespaces = exports.getWorkersKvNamespaceOutput = exports.getWorkersKvNamespace = exports.getWorkersKvOutput = exports.getWorkersKv = exports.getWorkersForPlatformsDispatchNamespacesOutput = exports.getWorkersForPlatformsDispatchNamespaces = exports.getWorkersForPlatformsDispatchNamespaceOutput = exports.getWorkersForPlatformsDispatchNamespace = exports.getWorkersDeploymentOutput = exports.getWorkersDeployment = exports.getWorkersCustomDomainsOutput = exports.getWorkersCustomDomains = exports.getWorkersCustomDomainOutput = exports.getWorkersCustomDomain = exports.getWorkersCronTriggerOutput = exports.getWorkersCronTrigger = exports.getWebAnalyticsSitesOutput = exports.getWebAnalyticsSites = exports.getWebAnalyticsSiteOutput = exports.getWebAnalyticsSite = exports.getWeb3HostnamesOutput = exports.getWeb3Hostnames = exports.getWeb3HostnameOutput = exports.getWeb3Hostname = exports.getWaitingRoomsOutput = exports.getWaitingRooms = void 0;
exports.getZeroTrustDevicePostureIntegrationOutput = exports.getZeroTrustDevicePostureIntegration = exports.getZeroTrustDeviceManagedNetworksListOutput = exports.getZeroTrustDeviceManagedNetworksList = exports.getZeroTrustDeviceManagedNetworksOutput = exports.getZeroTrustDeviceManagedNetworks = exports.getZeroTrustDeviceDefaultProfileLocalDomainFallbackOutput = exports.getZeroTrustDeviceDefaultProfileLocalDomainFallback = exports.getZeroTrustDeviceDefaultProfileCertificatesOutput = exports.getZeroTrustDeviceDefaultProfileCertificates = exports.getZeroTrustDeviceDefaultProfileOutput = exports.getZeroTrustDeviceDefaultProfile = exports.getZeroTrustDeviceCustomProfilesOutput = exports.getZeroTrustDeviceCustomProfiles = exports.getZeroTrustDeviceCustomProfileLocalDomainFallbackOutput = exports.getZeroTrustDeviceCustomProfileLocalDomainFallback = exports.getZeroTrustDeviceCustomProfileOutput = exports.getZeroTrustDeviceCustomProfile = exports.getZeroTrustAccessTagsOutput = exports.getZeroTrustAccessTags = exports.getZeroTrustAccessTagOutput = exports.getZeroTrustAccessTag = exports.getZeroTrustAccessShortLivedCertificatesOutput = exports.getZeroTrustAccessShortLivedCertificates = exports.getZeroTrustAccessShortLivedCertificateOutput = exports.getZeroTrustAccessShortLivedCertificate = exports.getZeroTrustAccessServiceTokensOutput = exports.getZeroTrustAccessServiceTokens = exports.getZeroTrustAccessServiceTokenOutput = exports.getZeroTrustAccessServiceToken = exports.getZeroTrustAccessPolicyOutput = exports.getZeroTrustAccessPolicy = exports.getZeroTrustAccessPoliciesOutput = exports.getZeroTrustAccessPolicies = exports.getZeroTrustAccessMtlsHostnameSettingsOutput = exports.getZeroTrustAccessMtlsHostnameSettings = exports.getZeroTrustAccessMtlsCertificatesOutput = exports.getZeroTrustAccessMtlsCertificates = exports.getZeroTrustAccessMtlsCertificateOutput = exports.getZeroTrustAccessMtlsCertificate = exports.getZeroTrustAccessKeyConfigurationOutput = exports.getZeroTrustAccessKeyConfiguration = exports.getZeroTrustAccessInfrastructureTargetsOutput = exports.getZeroTrustAccessInfrastructureTargets = exports.getZeroTrustAccessInfrastructureTargetOutput = exports.getZeroTrustAccessInfrastructureTarget = exports.getZeroTrustAccessIdentityProvidersOutput = exports.getZeroTrustAccessIdentityProviders = exports.getZeroTrustAccessIdentityProviderOutput = exports.getZeroTrustAccessIdentityProvider = void 0;
exports.getZeroTrustListsOutput = exports.getZeroTrustLists = exports.getZeroTrustListOutput = exports.getZeroTrustList = exports.getZeroTrustGatewaySettingsOutput = exports.getZeroTrustGatewaySettings = exports.getZeroTrustGatewayProxyEndpointOutput = exports.getZeroTrustGatewayProxyEndpoint = exports.getZeroTrustGatewayPolicyOutput = exports.getZeroTrustGatewayPolicy = exports.getZeroTrustGatewayPoliciesOutput = exports.getZeroTrustGatewayPolicies = exports.getZeroTrustGatewayLoggingOutput = exports.getZeroTrustGatewayLogging = exports.getZeroTrustGatewayCertificatesOutput = exports.getZeroTrustGatewayCertificates = exports.getZeroTrustGatewayCertificateOutput = exports.getZeroTrustGatewayCertificate = exports.getZeroTrustGatewayCategoriesListOutput = exports.getZeroTrustGatewayCategoriesList = exports.getZeroTrustGatewayAppTypesListOutput = exports.getZeroTrustGatewayAppTypesList = exports.getZeroTrustDnsLocationsOutput = exports.getZeroTrustDnsLocations = exports.getZeroTrustDnsLocationOutput = exports.getZeroTrustDnsLocation = exports.getZeroTrustDlpPredefinedProfileOutput = exports.getZeroTrustDlpPredefinedProfile = exports.getZeroTrustDlpEntryOutput = exports.getZeroTrustDlpEntry = exports.getZeroTrustDlpEntriesOutput = exports.getZeroTrustDlpEntries = exports.getZeroTrustDlpDatasetsOutput = exports.getZeroTrustDlpDatasets = exports.getZeroTrustDlpDatasetOutput = exports.getZeroTrustDlpDataset = exports.getZeroTrustDlpCustomProfileOutput = exports.getZeroTrustDlpCustomProfile = exports.getZeroTrustDexTestsOutput = exports.getZeroTrustDexTests = exports.getZeroTrustDexTestOutput = exports.getZeroTrustDexTest = exports.getZeroTrustDeviceSettingsOutput = exports.getZeroTrustDeviceSettings = exports.getZeroTrustDevicePostureRulesOutput = exports.getZeroTrustDevicePostureRules = exports.getZeroTrustDevicePostureRuleOutput = exports.getZeroTrustDevicePostureRule = exports.getZeroTrustDevicePostureIntegrationsOutput = exports.getZeroTrustDevicePostureIntegrations = void 0;
exports.getZoneSubscriptionOutput = exports.getZoneSubscription = exports.getZoneSettingOutput = exports.getZoneSetting = exports.getZoneLockdownsOutput = exports.getZoneLockdowns = exports.getZoneLockdownOutput = exports.getZoneLockdown = exports.getZoneHoldOutput = exports.getZoneHold = exports.getZoneDnssecOutput = exports.getZoneDnssec = exports.getZoneDnsSettingsOutput = exports.getZoneDnsSettings = exports.getZoneCacheVariantsOutput = exports.getZoneCacheVariants = exports.getZoneCacheReserveOutput = exports.getZoneCacheReserve = exports.getZoneOutput = exports.getZone = exports.getZeroTrustTunnelWarpConnectorsOutput = exports.getZeroTrustTunnelWarpConnectors = exports.getZeroTrustTunnelWarpConnectorTokenOutput = exports.getZeroTrustTunnelWarpConnectorToken = exports.getZeroTrustTunnelWarpConnectorOutput = exports.getZeroTrustTunnelWarpConnector = exports.getZeroTrustTunnelCloudflaredsOutput = exports.getZeroTrustTunnelCloudflareds = exports.getZeroTrustTunnelCloudflaredVirtualNetworksOutput = exports.getZeroTrustTunnelCloudflaredVirtualNetworks = exports.getZeroTrustTunnelCloudflaredVirtualNetworkOutput = exports.getZeroTrustTunnelCloudflaredVirtualNetwork = exports.getZeroTrustTunnelCloudflaredTokenOutput = exports.getZeroTrustTunnelCloudflaredToken = exports.getZeroTrustTunnelCloudflaredRoutesOutput = exports.getZeroTrustTunnelCloudflaredRoutes = exports.getZeroTrustTunnelCloudflaredRouteOutput = exports.getZeroTrustTunnelCloudflaredRoute = exports.getZeroTrustTunnelCloudflaredConfigOutput = exports.getZeroTrustTunnelCloudflaredConfig = exports.getZeroTrustTunnelCloudflaredOutput = exports.getZeroTrustTunnelCloudflared = exports.getZeroTrustRiskScoringIntegrationsOutput = exports.getZeroTrustRiskScoringIntegrations = exports.getZeroTrustRiskScoringIntegrationOutput = exports.getZeroTrustRiskScoringIntegration = exports.getZeroTrustRiskBehaviorOutput = exports.getZeroTrustRiskBehavior = exports.getZeroTrustOrganizationOutput = exports.getZeroTrustOrganization = void 0;
exports.RateLimit = exports.R2ManagedDomain = exports.R2CustomDomain = exports.R2BucketSippy = exports.R2BucketLock = exports.R2BucketLifecycle = exports.R2BucketEventNotification = exports.R2BucketCors = exports.R2Bucket = exports.QueueConsumer = exports.Queue = exports.PagesProject = exports.PagesDomain = exports.PageShieldPolicy = exports.PageRule = exports.OriginCaCertificate = exports.ObservatoryScheduledTest = exports.NotificationPolicyWebhooks = exports.NotificationPolicy = exports.MtlsCertificate = exports.ManagedTransforms = exports.ManagedHeaders = exports.MagicWanStaticRoute = exports.MagicWanIpsecTunnel = exports.MagicWanGreTunnel = exports.MagicTransitSiteWan = exports.MagicTransitSiteLan = exports.MagicTransitSiteAcl = exports.MagicTransitSite = exports.MagicTransitConnector = exports.MagicNetworkMonitoringRule = exports.MagicNetworkMonitoringConfiguration = exports.LogpushOwnershipChallenge = exports.LogpushJob = exports.LogpullRetention = exports.LoadBalancerPool = exports.LoadBalancerMonitor = exports.LoadBalancer = exports.ListItem = exports.List = exports.LeakedCredentialCheckRule = exports.LeakedCredentialCheck = exports.KeylessCertificate = exports.ImageVariant = exports.Image = exports.HyperdriveConfig = exports.HostnameTlsSetting = exports.Healthcheck = exports.getZonesOutput = exports.getZones = void 0;
exports.WorkersForPlatformsDispatchNamespace = exports.WorkersDeployment = exports.WorkersCustomDomain = exports.WorkersCronTrigger = exports.WorkerScript = exports.WorkerDomain = exports.WorkerCronTrigger = exports.WebAnalyticsSite = exports.WebAnalyticsRule = exports.Web3Hostname = exports.WaitingRoomSettings = exports.WaitingRoomRules = exports.WaitingRoomEvent = exports.WaitingRoom = exports.UserAgentBlockingRule = exports.User = exports.UrlNormalizationSettings = exports.TurnstileWidget = exports.TunnelVirtualNetwork = exports.TunnelRoute = exports.TunnelConfig = exports.Tunnel = exports.TotalTls = exports.TieredCache = exports.TeamsRule = exports.TeamsProxyEndpoint = exports.TeamsLocation = exports.TeamsList = exports.TeamsAccount = exports.StreamWebhook = exports.StreamWatermark = exports.StreamLiveInput = exports.StreamKey = exports.StreamDownload = exports.StreamCaptionLanguage = exports.StreamAudioTrack = exports.Stream = exports.StaticRoute = exports.SpectrumApplication = exports.Snippets = exports.SnippetRules = exports.SchemaValidationSettings = exports.SchemaValidationSchemas = exports.SchemaValidationOperationSettings = exports.Ruleset = exports.RiskBehavior = exports.RegistrarDomain = exports.RegionalTieredCache = exports.RegionalHostname = exports.Record = void 0;
exports.ZeroTrustTunnelCloudflaredVirtualNetwork = exports.ZeroTrustTunnelCloudflaredRoute = exports.ZeroTrustTunnelCloudflaredConfig = exports.ZeroTrustTunnelCloudflared = exports.ZeroTrustRiskScoringIntegration = exports.ZeroTrustRiskBehavior = exports.ZeroTrustOrganization = exports.ZeroTrustLocalFallbackDomain = exports.ZeroTrustList = exports.ZeroTrustGatewaySettings = exports.ZeroTrustGatewayProxyEndpoint = exports.ZeroTrustGatewayPolicy = exports.ZeroTrustGatewayLogging = exports.ZeroTrustGatewayCertificate = exports.ZeroTrustDnsLocation = exports.ZeroTrustDlpPredefinedProfile = exports.ZeroTrustDlpPredefinedEntry = exports.ZeroTrustDlpIntegrationEntry = exports.ZeroTrustDlpEntry = exports.ZeroTrustDlpDataset = exports.ZeroTrustDlpCustomProfile = exports.ZeroTrustDlpCustomEntry = exports.ZeroTrustDexTest = exports.ZeroTrustDeviceSettings = exports.ZeroTrustDevicePostureRule = exports.ZeroTrustDevicePostureIntegration = exports.ZeroTrustDeviceManagedNetworks = exports.ZeroTrustDeviceDefaultProfileLocalDomainFallback = exports.ZeroTrustDeviceDefaultProfileCertificates = exports.ZeroTrustDeviceDefaultProfile = exports.ZeroTrustDeviceCustomProfileLocalDomainFallback = exports.ZeroTrustDeviceCustomProfile = exports.ZeroTrustAccessTag = exports.ZeroTrustAccessShortLivedCertificate = exports.ZeroTrustAccessServiceToken = exports.ZeroTrustAccessPolicy = exports.ZeroTrustAccessMtlsHostnameSettings = exports.ZeroTrustAccessMtlsCertificate = exports.ZeroTrustAccessKeyConfiguration = exports.ZeroTrustAccessInfrastructureTarget = exports.ZeroTrustAccessIdentityProvider = exports.ZeroTrustAccessGroup = exports.ZeroTrustAccessCustomPage = exports.ZeroTrustAccessApplication = exports.WorkersScriptSubdomain = exports.WorkersScript = exports.WorkersRoute = exports.WorkersKvNamespace = exports.WorkersKv = exports.WorkersForPlatformsNamespace = void 0;
exports.types = exports.config = exports.ZoneSubscription = exports.ZoneSetting = exports.ZoneLockdown = exports.ZoneHold = exports.ZoneDnssec = exports.ZoneDnsSettings = exports.ZoneCacheVariants = exports.ZoneCacheReserve = exports.Zone = exports.ZeroTrustTunnelWarpConnector = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AccessApplication = null;
utilities.lazyLoad(exports, ["AccessApplication"], () => require("./accessApplication"));
exports.AccessCaCertificate = null;
utilities.lazyLoad(exports, ["AccessCaCertificate"], () => require("./accessCaCertificate"));
exports.AccessCustomPage = null;
utilities.lazyLoad(exports, ["AccessCustomPage"], () => require("./accessCustomPage"));
exports.AccessGroup = null;
utilities.lazyLoad(exports, ["AccessGroup"], () => require("./accessGroup"));
exports.AccessIdentityProvider = null;
utilities.lazyLoad(exports, ["AccessIdentityProvider"], () => require("./accessIdentityProvider"));
exports.AccessKeysConfiguration = null;
utilities.lazyLoad(exports, ["AccessKeysConfiguration"], () => require("./accessKeysConfiguration"));
exports.AccessMutualTlsCertificate = null;
utilities.lazyLoad(exports, ["AccessMutualTlsCertificate"], () => require("./accessMutualTlsCertificate"));
exports.AccessMutualTlsHostnameSettings = null;
utilities.lazyLoad(exports, ["AccessMutualTlsHostnameSettings"], () => require("./accessMutualTlsHostnameSettings"));
exports.AccessOrganization = null;
utilities.lazyLoad(exports, ["AccessOrganization"], () => require("./accessOrganization"));
exports.AccessPolicy = null;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));
exports.AccessRule = null;
utilities.lazyLoad(exports, ["AccessRule"], () => require("./accessRule"));
exports.AccessServiceToken = null;
utilities.lazyLoad(exports, ["AccessServiceToken"], () => require("./accessServiceToken"));
exports.AccessTag = null;
utilities.lazyLoad(exports, ["AccessTag"], () => require("./accessTag"));
exports.Account = null;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));
exports.AccountDnsSettings = null;
utilities.lazyLoad(exports, ["AccountDnsSettings"], () => require("./accountDnsSettings"));
exports.AccountDnsSettingsInternalView = null;
utilities.lazyLoad(exports, ["AccountDnsSettingsInternalView"], () => require("./accountDnsSettingsInternalView"));
exports.AccountMember = null;
utilities.lazyLoad(exports, ["AccountMember"], () => require("./accountMember"));
exports.AccountSubscription = null;
utilities.lazyLoad(exports, ["AccountSubscription"], () => require("./accountSubscription"));
exports.AccountToken = null;
utilities.lazyLoad(exports, ["AccountToken"], () => require("./accountToken"));
exports.AddressMap = null;
utilities.lazyLoad(exports, ["AddressMap"], () => require("./addressMap"));
exports.ApiShield = null;
utilities.lazyLoad(exports, ["ApiShield"], () => require("./apiShield"));
exports.ApiShieldDiscoveryOperation = null;
utilities.lazyLoad(exports, ["ApiShieldDiscoveryOperation"], () => require("./apiShieldDiscoveryOperation"));
exports.ApiShieldOperation = null;
utilities.lazyLoad(exports, ["ApiShieldOperation"], () => require("./apiShieldOperation"));
exports.ApiShieldOperationSchemaValidationSettings = null;
utilities.lazyLoad(exports, ["ApiShieldOperationSchemaValidationSettings"], () => require("./apiShieldOperationSchemaValidationSettings"));
exports.ApiShieldSchema = null;
utilities.lazyLoad(exports, ["ApiShieldSchema"], () => require("./apiShieldSchema"));
exports.ApiShieldSchemaValidationSettings = null;
utilities.lazyLoad(exports, ["ApiShieldSchemaValidationSettings"], () => require("./apiShieldSchemaValidationSettings"));
exports.ApiToken = null;
utilities.lazyLoad(exports, ["ApiToken"], () => require("./apiToken"));
exports.ArgoSmartRouting = null;
utilities.lazyLoad(exports, ["ArgoSmartRouting"], () => require("./argoSmartRouting"));
exports.ArgoTieredCaching = null;
utilities.lazyLoad(exports, ["ArgoTieredCaching"], () => require("./argoTieredCaching"));
exports.AuthenticatedOriginPulls = null;
utilities.lazyLoad(exports, ["AuthenticatedOriginPulls"], () => require("./authenticatedOriginPulls"));
exports.AuthenticatedOriginPullsCertificate = null;
utilities.lazyLoad(exports, ["AuthenticatedOriginPullsCertificate"], () => require("./authenticatedOriginPullsCertificate"));
exports.AuthenticatedOriginPullsSettings = null;
utilities.lazyLoad(exports, ["AuthenticatedOriginPullsSettings"], () => require("./authenticatedOriginPullsSettings"));
exports.BotManagement = null;
utilities.lazyLoad(exports, ["BotManagement"], () => require("./botManagement"));
exports.ByoIpPrefix = null;
utilities.lazyLoad(exports, ["ByoIpPrefix"], () => require("./byoIpPrefix"));
exports.CallsSfuApp = null;
utilities.lazyLoad(exports, ["CallsSfuApp"], () => require("./callsSfuApp"));
exports.CallsTurnApp = null;
utilities.lazyLoad(exports, ["CallsTurnApp"], () => require("./callsTurnApp"));
exports.CertificatePack = null;
utilities.lazyLoad(exports, ["CertificatePack"], () => require("./certificatePack"));
exports.CloudConnectorRules = null;
utilities.lazyLoad(exports, ["CloudConnectorRules"], () => require("./cloudConnectorRules"));
exports.CloudforceOneRequest = null;
utilities.lazyLoad(exports, ["CloudforceOneRequest"], () => require("./cloudforceOneRequest"));
exports.CloudforceOneRequestAsset = null;
utilities.lazyLoad(exports, ["CloudforceOneRequestAsset"], () => require("./cloudforceOneRequestAsset"));
exports.CloudforceOneRequestMessage = null;
utilities.lazyLoad(exports, ["CloudforceOneRequestMessage"], () => require("./cloudforceOneRequestMessage"));
exports.CloudforceOneRequestPriority = null;
utilities.lazyLoad(exports, ["CloudforceOneRequestPriority"], () => require("./cloudforceOneRequestPriority"));
exports.ContentScanningExpression = null;
utilities.lazyLoad(exports, ["ContentScanningExpression"], () => require("./contentScanningExpression"));
exports.CustomHostname = null;
utilities.lazyLoad(exports, ["CustomHostname"], () => require("./customHostname"));
exports.CustomHostnameFallbackOrigin = null;
utilities.lazyLoad(exports, ["CustomHostnameFallbackOrigin"], () => require("./customHostnameFallbackOrigin"));
exports.CustomPages = null;
utilities.lazyLoad(exports, ["CustomPages"], () => require("./customPages"));
exports.CustomSsl = null;
utilities.lazyLoad(exports, ["CustomSsl"], () => require("./customSsl"));
exports.D1Database = null;
utilities.lazyLoad(exports, ["D1Database"], () => require("./d1database"));
exports.DeviceManagedNetworks = null;
utilities.lazyLoad(exports, ["DeviceManagedNetworks"], () => require("./deviceManagedNetworks"));
exports.DevicePostureIntegration = null;
utilities.lazyLoad(exports, ["DevicePostureIntegration"], () => require("./devicePostureIntegration"));
exports.DevicePostureRule = null;
utilities.lazyLoad(exports, ["DevicePostureRule"], () => require("./devicePostureRule"));
exports.DlpCustomProfile = null;
utilities.lazyLoad(exports, ["DlpCustomProfile"], () => require("./dlpCustomProfile"));
exports.DlpPredefinedProfile = null;
utilities.lazyLoad(exports, ["DlpPredefinedProfile"], () => require("./dlpPredefinedProfile"));
exports.DnsFirewall = null;
utilities.lazyLoad(exports, ["DnsFirewall"], () => require("./dnsFirewall"));
exports.DnsRecord = null;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));
exports.DnsZoneTransfersAcl = null;
utilities.lazyLoad(exports, ["DnsZoneTransfersAcl"], () => require("./dnsZoneTransfersAcl"));
exports.DnsZoneTransfersIncoming = null;
utilities.lazyLoad(exports, ["DnsZoneTransfersIncoming"], () => require("./dnsZoneTransfersIncoming"));
exports.DnsZoneTransfersOutgoing = null;
utilities.lazyLoad(exports, ["DnsZoneTransfersOutgoing"], () => require("./dnsZoneTransfersOutgoing"));
exports.DnsZoneTransfersPeer = null;
utilities.lazyLoad(exports, ["DnsZoneTransfersPeer"], () => require("./dnsZoneTransfersPeer"));
exports.DnsZoneTransfersTsig = null;
utilities.lazyLoad(exports, ["DnsZoneTransfersTsig"], () => require("./dnsZoneTransfersTsig"));
exports.EmailRoutingAddress = null;
utilities.lazyLoad(exports, ["EmailRoutingAddress"], () => require("./emailRoutingAddress"));
exports.EmailRoutingCatchAll = null;
utilities.lazyLoad(exports, ["EmailRoutingCatchAll"], () => require("./emailRoutingCatchAll"));
exports.EmailRoutingDns = null;
utilities.lazyLoad(exports, ["EmailRoutingDns"], () => require("./emailRoutingDns"));
exports.EmailRoutingRule = null;
utilities.lazyLoad(exports, ["EmailRoutingRule"], () => require("./emailRoutingRule"));
exports.EmailRoutingSettings = null;
utilities.lazyLoad(exports, ["EmailRoutingSettings"], () => require("./emailRoutingSettings"));
exports.EmailSecurityBlockSender = null;
utilities.lazyLoad(exports, ["EmailSecurityBlockSender"], () => require("./emailSecurityBlockSender"));
exports.EmailSecurityImpersonationRegistry = null;
utilities.lazyLoad(exports, ["EmailSecurityImpersonationRegistry"], () => require("./emailSecurityImpersonationRegistry"));
exports.EmailSecurityTrustedDomains = null;
utilities.lazyLoad(exports, ["EmailSecurityTrustedDomains"], () => require("./emailSecurityTrustedDomains"));
exports.Filter = null;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));
exports.FirewallRule = null;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));
exports.getAccessRule = null;
exports.getAccessRuleOutput = null;
utilities.lazyLoad(exports, ["getAccessRule", "getAccessRuleOutput"], () => require("./getAccessRule"));
exports.getAccessRules = null;
exports.getAccessRulesOutput = null;
utilities.lazyLoad(exports, ["getAccessRules", "getAccessRulesOutput"], () => require("./getAccessRules"));
exports.getAccount = null;
exports.getAccountOutput = null;
utilities.lazyLoad(exports, ["getAccount", "getAccountOutput"], () => require("./getAccount"));
exports.getAccountApiTokenPermissionGroups = null;
exports.getAccountApiTokenPermissionGroupsOutput = null;
utilities.lazyLoad(exports, ["getAccountApiTokenPermissionGroups", "getAccountApiTokenPermissionGroupsOutput"], () => require("./getAccountApiTokenPermissionGroups"));
exports.getAccountApiTokenPermissionGroupsList = null;
exports.getAccountApiTokenPermissionGroupsListOutput = null;
utilities.lazyLoad(exports, ["getAccountApiTokenPermissionGroupsList", "getAccountApiTokenPermissionGroupsListOutput"], () => require("./getAccountApiTokenPermissionGroupsList"));
exports.getAccountDnsSettings = null;
exports.getAccountDnsSettingsOutput = null;
utilities.lazyLoad(exports, ["getAccountDnsSettings", "getAccountDnsSettingsOutput"], () => require("./getAccountDnsSettings"));
exports.getAccountDnsSettingsInternalView = null;
exports.getAccountDnsSettingsInternalViewOutput = null;
utilities.lazyLoad(exports, ["getAccountDnsSettingsInternalView", "getAccountDnsSettingsInternalViewOutput"], () => require("./getAccountDnsSettingsInternalView"));
exports.getAccountDnsSettingsInternalViews = null;
exports.getAccountDnsSettingsInternalViewsOutput = null;
utilities.lazyLoad(exports, ["getAccountDnsSettingsInternalViews", "getAccountDnsSettingsInternalViewsOutput"], () => require("./getAccountDnsSettingsInternalViews"));
exports.getAccountMember = null;
exports.getAccountMemberOutput = null;
utilities.lazyLoad(exports, ["getAccountMember", "getAccountMemberOutput"], () => require("./getAccountMember"));
exports.getAccountMembers = null;
exports.getAccountMembersOutput = null;
utilities.lazyLoad(exports, ["getAccountMembers", "getAccountMembersOutput"], () => require("./getAccountMembers"));
exports.getAccountPermissionGroup = null;
exports.getAccountPermissionGroupOutput = null;
utilities.lazyLoad(exports, ["getAccountPermissionGroup", "getAccountPermissionGroupOutput"], () => require("./getAccountPermissionGroup"));
exports.getAccountPermissionGroups = null;
exports.getAccountPermissionGroupsOutput = null;
utilities.lazyLoad(exports, ["getAccountPermissionGroups", "getAccountPermissionGroupsOutput"], () => require("./getAccountPermissionGroups"));
exports.getAccountRole = null;
exports.getAccountRoleOutput = null;
utilities.lazyLoad(exports, ["getAccountRole", "getAccountRoleOutput"], () => require("./getAccountRole"));
exports.getAccountRoles = null;
exports.getAccountRolesOutput = null;
utilities.lazyLoad(exports, ["getAccountRoles", "getAccountRolesOutput"], () => require("./getAccountRoles"));
exports.getAccountSubscription = null;
exports.getAccountSubscriptionOutput = null;
utilities.lazyLoad(exports, ["getAccountSubscription", "getAccountSubscriptionOutput"], () => require("./getAccountSubscription"));
exports.getAccountToken = null;
exports.getAccountTokenOutput = null;
utilities.lazyLoad(exports, ["getAccountToken", "getAccountTokenOutput"], () => require("./getAccountToken"));
exports.getAccountTokens = null;
exports.getAccountTokensOutput = null;
utilities.lazyLoad(exports, ["getAccountTokens", "getAccountTokensOutput"], () => require("./getAccountTokens"));
exports.getAccounts = null;
exports.getAccountsOutput = null;
utilities.lazyLoad(exports, ["getAccounts", "getAccountsOutput"], () => require("./getAccounts"));
exports.getAddressMap = null;
exports.getAddressMapOutput = null;
utilities.lazyLoad(exports, ["getAddressMap", "getAddressMapOutput"], () => require("./getAddressMap"));
exports.getAddressMaps = null;
exports.getAddressMapsOutput = null;
utilities.lazyLoad(exports, ["getAddressMaps", "getAddressMapsOutput"], () => require("./getAddressMaps"));
exports.getApiShield = null;
exports.getApiShieldOutput = null;
utilities.lazyLoad(exports, ["getApiShield", "getApiShieldOutput"], () => require("./getApiShield"));
exports.getApiShieldDiscoveryOperations = null;
exports.getApiShieldDiscoveryOperationsOutput = null;
utilities.lazyLoad(exports, ["getApiShieldDiscoveryOperations", "getApiShieldDiscoveryOperationsOutput"], () => require("./getApiShieldDiscoveryOperations"));
exports.getApiShieldOperation = null;
exports.getApiShieldOperationOutput = null;
utilities.lazyLoad(exports, ["getApiShieldOperation", "getApiShieldOperationOutput"], () => require("./getApiShieldOperation"));
exports.getApiShieldOperationSchemaValidationSettings = null;
exports.getApiShieldOperationSchemaValidationSettingsOutput = null;
utilities.lazyLoad(exports, ["getApiShieldOperationSchemaValidationSettings", "getApiShieldOperationSchemaValidationSettingsOutput"], () => require("./getApiShieldOperationSchemaValidationSettings"));
exports.getApiShieldOperations = null;
exports.getApiShieldOperationsOutput = null;
utilities.lazyLoad(exports, ["getApiShieldOperations", "getApiShieldOperationsOutput"], () => require("./getApiShieldOperations"));
exports.getApiShieldSchema = null;
exports.getApiShieldSchemaOutput = null;
utilities.lazyLoad(exports, ["getApiShieldSchema", "getApiShieldSchemaOutput"], () => require("./getApiShieldSchema"));
exports.getApiShieldSchemaValidationSettings = null;
exports.getApiShieldSchemaValidationSettingsOutput = null;
utilities.lazyLoad(exports, ["getApiShieldSchemaValidationSettings", "getApiShieldSchemaValidationSettingsOutput"], () => require("./getApiShieldSchemaValidationSettings"));
exports.getApiShieldSchemas = null;
exports.getApiShieldSchemasOutput = null;
utilities.lazyLoad(exports, ["getApiShieldSchemas", "getApiShieldSchemasOutput"], () => require("./getApiShieldSchemas"));
exports.getApiToken = null;
exports.getApiTokenOutput = null;
utilities.lazyLoad(exports, ["getApiToken", "getApiTokenOutput"], () => require("./getApiToken"));
exports.getApiTokenPermissionGroupsList = null;
exports.getApiTokenPermissionGroupsListOutput = null;
utilities.lazyLoad(exports, ["getApiTokenPermissionGroupsList", "getApiTokenPermissionGroupsListOutput"], () => require("./getApiTokenPermissionGroupsList"));
exports.getApiTokens = null;
exports.getApiTokensOutput = null;
utilities.lazyLoad(exports, ["getApiTokens", "getApiTokensOutput"], () => require("./getApiTokens"));
exports.getArgoSmartRouting = null;
exports.getArgoSmartRoutingOutput = null;
utilities.lazyLoad(exports, ["getArgoSmartRouting", "getArgoSmartRoutingOutput"], () => require("./getArgoSmartRouting"));
exports.getArgoTieredCaching = null;
exports.getArgoTieredCachingOutput = null;
utilities.lazyLoad(exports, ["getArgoTieredCaching", "getArgoTieredCachingOutput"], () => require("./getArgoTieredCaching"));
exports.getAuthenticatedOriginPulls = null;
exports.getAuthenticatedOriginPullsOutput = null;
utilities.lazyLoad(exports, ["getAuthenticatedOriginPulls", "getAuthenticatedOriginPullsOutput"], () => require("./getAuthenticatedOriginPulls"));
exports.getAuthenticatedOriginPullsCertificate = null;
exports.getAuthenticatedOriginPullsCertificateOutput = null;
utilities.lazyLoad(exports, ["getAuthenticatedOriginPullsCertificate", "getAuthenticatedOriginPullsCertificateOutput"], () => require("./getAuthenticatedOriginPullsCertificate"));
exports.getAuthenticatedOriginPullsCertificates = null;
exports.getAuthenticatedOriginPullsCertificatesOutput = null;
utilities.lazyLoad(exports, ["getAuthenticatedOriginPullsCertificates", "getAuthenticatedOriginPullsCertificatesOutput"], () => require("./getAuthenticatedOriginPullsCertificates"));
exports.getAuthenticatedOriginPullsSettings = null;
exports.getAuthenticatedOriginPullsSettingsOutput = null;
utilities.lazyLoad(exports, ["getAuthenticatedOriginPullsSettings", "getAuthenticatedOriginPullsSettingsOutput"], () => require("./getAuthenticatedOriginPullsSettings"));
exports.getBotManagement = null;
exports.getBotManagementOutput = null;
utilities.lazyLoad(exports, ["getBotManagement", "getBotManagementOutput"], () => require("./getBotManagement"));
exports.getBotnetFeedConfigAsn = null;
exports.getBotnetFeedConfigAsnOutput = null;
utilities.lazyLoad(exports, ["getBotnetFeedConfigAsn", "getBotnetFeedConfigAsnOutput"], () => require("./getBotnetFeedConfigAsn"));
exports.getByoIpPrefix = null;
exports.getByoIpPrefixOutput = null;
utilities.lazyLoad(exports, ["getByoIpPrefix", "getByoIpPrefixOutput"], () => require("./getByoIpPrefix"));
exports.getByoIpPrefixes = null;
exports.getByoIpPrefixesOutput = null;
utilities.lazyLoad(exports, ["getByoIpPrefixes", "getByoIpPrefixesOutput"], () => require("./getByoIpPrefixes"));
exports.getCallsSfuApp = null;
exports.getCallsSfuAppOutput = null;
utilities.lazyLoad(exports, ["getCallsSfuApp", "getCallsSfuAppOutput"], () => require("./getCallsSfuApp"));
exports.getCallsSfuApps = null;
exports.getCallsSfuAppsOutput = null;
utilities.lazyLoad(exports, ["getCallsSfuApps", "getCallsSfuAppsOutput"], () => require("./getCallsSfuApps"));
exports.getCallsTurnApp = null;
exports.getCallsTurnAppOutput = null;
utilities.lazyLoad(exports, ["getCallsTurnApp", "getCallsTurnAppOutput"], () => require("./getCallsTurnApp"));
exports.getCallsTurnApps = null;
exports.getCallsTurnAppsOutput = null;
utilities.lazyLoad(exports, ["getCallsTurnApps", "getCallsTurnAppsOutput"], () => require("./getCallsTurnApps"));
exports.getCertificatePack = null;
exports.getCertificatePackOutput = null;
utilities.lazyLoad(exports, ["getCertificatePack", "getCertificatePackOutput"], () => require("./getCertificatePack"));
exports.getCertificatePacks = null;
exports.getCertificatePacksOutput = null;
utilities.lazyLoad(exports, ["getCertificatePacks", "getCertificatePacksOutput"], () => require("./getCertificatePacks"));
exports.getCloudConnectorRules = null;
exports.getCloudConnectorRulesOutput = null;
utilities.lazyLoad(exports, ["getCloudConnectorRules", "getCloudConnectorRulesOutput"], () => require("./getCloudConnectorRules"));
exports.getCloudforceOneRequest = null;
exports.getCloudforceOneRequestOutput = null;
utilities.lazyLoad(exports, ["getCloudforceOneRequest", "getCloudforceOneRequestOutput"], () => require("./getCloudforceOneRequest"));
exports.getCloudforceOneRequestAsset = null;
exports.getCloudforceOneRequestAssetOutput = null;
utilities.lazyLoad(exports, ["getCloudforceOneRequestAsset", "getCloudforceOneRequestAssetOutput"], () => require("./getCloudforceOneRequestAsset"));
exports.getCloudforceOneRequestMessage = null;
exports.getCloudforceOneRequestMessageOutput = null;
utilities.lazyLoad(exports, ["getCloudforceOneRequestMessage", "getCloudforceOneRequestMessageOutput"], () => require("./getCloudforceOneRequestMessage"));
exports.getCloudforceOneRequestPriority = null;
exports.getCloudforceOneRequestPriorityOutput = null;
utilities.lazyLoad(exports, ["getCloudforceOneRequestPriority", "getCloudforceOneRequestPriorityOutput"], () => require("./getCloudforceOneRequestPriority"));
exports.getCloudforceOneRequests = null;
exports.getCloudforceOneRequestsOutput = null;
utilities.lazyLoad(exports, ["getCloudforceOneRequests", "getCloudforceOneRequestsOutput"], () => require("./getCloudforceOneRequests"));
exports.getContentScanningExpressions = null;
exports.getContentScanningExpressionsOutput = null;
utilities.lazyLoad(exports, ["getContentScanningExpressions", "getContentScanningExpressionsOutput"], () => require("./getContentScanningExpressions"));
exports.getCustomHostname = null;
exports.getCustomHostnameOutput = null;
utilities.lazyLoad(exports, ["getCustomHostname", "getCustomHostnameOutput"], () => require("./getCustomHostname"));
exports.getCustomHostnameFallbackOrigin = null;
exports.getCustomHostnameFallbackOriginOutput = null;
utilities.lazyLoad(exports, ["getCustomHostnameFallbackOrigin", "getCustomHostnameFallbackOriginOutput"], () => require("./getCustomHostnameFallbackOrigin"));
exports.getCustomHostnames = null;
exports.getCustomHostnamesOutput = null;
utilities.lazyLoad(exports, ["getCustomHostnames", "getCustomHostnamesOutput"], () => require("./getCustomHostnames"));
exports.getCustomPages = null;
exports.getCustomPagesOutput = null;
utilities.lazyLoad(exports, ["getCustomPages", "getCustomPagesOutput"], () => require("./getCustomPages"));
exports.getCustomPagesList = null;
exports.getCustomPagesListOutput = null;
utilities.lazyLoad(exports, ["getCustomPagesList", "getCustomPagesListOutput"], () => require("./getCustomPagesList"));
exports.getCustomSsl = null;
exports.getCustomSslOutput = null;
utilities.lazyLoad(exports, ["getCustomSsl", "getCustomSslOutput"], () => require("./getCustomSsl"));
exports.getCustomSsls = null;
exports.getCustomSslsOutput = null;
utilities.lazyLoad(exports, ["getCustomSsls", "getCustomSslsOutput"], () => require("./getCustomSsls"));
exports.getD1Database = null;
exports.getD1DatabaseOutput = null;
utilities.lazyLoad(exports, ["getD1Database", "getD1DatabaseOutput"], () => require("./getD1Database"));
exports.getD1Databases = null;
exports.getD1DatabasesOutput = null;
utilities.lazyLoad(exports, ["getD1Databases", "getD1DatabasesOutput"], () => require("./getD1Databases"));
exports.getDcvDelegation = null;
exports.getDcvDelegationOutput = null;
utilities.lazyLoad(exports, ["getDcvDelegation", "getDcvDelegationOutput"], () => require("./getDcvDelegation"));
exports.getDnsFirewall = null;
exports.getDnsFirewallOutput = null;
utilities.lazyLoad(exports, ["getDnsFirewall", "getDnsFirewallOutput"], () => require("./getDnsFirewall"));
exports.getDnsFirewalls = null;
exports.getDnsFirewallsOutput = null;
utilities.lazyLoad(exports, ["getDnsFirewalls", "getDnsFirewallsOutput"], () => require("./getDnsFirewalls"));
exports.getDnsRecord = null;
exports.getDnsRecordOutput = null;
utilities.lazyLoad(exports, ["getDnsRecord", "getDnsRecordOutput"], () => require("./getDnsRecord"));
exports.getDnsRecords = null;
exports.getDnsRecordsOutput = null;
utilities.lazyLoad(exports, ["getDnsRecords", "getDnsRecordsOutput"], () => require("./getDnsRecords"));
exports.getDnsZoneTransfersAcl = null;
exports.getDnsZoneTransfersAclOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersAcl", "getDnsZoneTransfersAclOutput"], () => require("./getDnsZoneTransfersAcl"));
exports.getDnsZoneTransfersAcls = null;
exports.getDnsZoneTransfersAclsOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersAcls", "getDnsZoneTransfersAclsOutput"], () => require("./getDnsZoneTransfersAcls"));
exports.getDnsZoneTransfersIncoming = null;
exports.getDnsZoneTransfersIncomingOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersIncoming", "getDnsZoneTransfersIncomingOutput"], () => require("./getDnsZoneTransfersIncoming"));
exports.getDnsZoneTransfersOutgoing = null;
exports.getDnsZoneTransfersOutgoingOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersOutgoing", "getDnsZoneTransfersOutgoingOutput"], () => require("./getDnsZoneTransfersOutgoing"));
exports.getDnsZoneTransfersPeer = null;
exports.getDnsZoneTransfersPeerOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersPeer", "getDnsZoneTransfersPeerOutput"], () => require("./getDnsZoneTransfersPeer"));
exports.getDnsZoneTransfersPeers = null;
exports.getDnsZoneTransfersPeersOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersPeers", "getDnsZoneTransfersPeersOutput"], () => require("./getDnsZoneTransfersPeers"));
exports.getDnsZoneTransfersTsig = null;
exports.getDnsZoneTransfersTsigOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersTsig", "getDnsZoneTransfersTsigOutput"], () => require("./getDnsZoneTransfersTsig"));
exports.getDnsZoneTransfersTsigs = null;
exports.getDnsZoneTransfersTsigsOutput = null;
utilities.lazyLoad(exports, ["getDnsZoneTransfersTsigs", "getDnsZoneTransfersTsigsOutput"], () => require("./getDnsZoneTransfersTsigs"));
exports.getEmailRoutingAddress = null;
exports.getEmailRoutingAddressOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingAddress", "getEmailRoutingAddressOutput"], () => require("./getEmailRoutingAddress"));
exports.getEmailRoutingAddresses = null;
exports.getEmailRoutingAddressesOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingAddresses", "getEmailRoutingAddressesOutput"], () => require("./getEmailRoutingAddresses"));
exports.getEmailRoutingCatchAll = null;
exports.getEmailRoutingCatchAllOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingCatchAll", "getEmailRoutingCatchAllOutput"], () => require("./getEmailRoutingCatchAll"));
exports.getEmailRoutingDns = null;
exports.getEmailRoutingDnsOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingDns", "getEmailRoutingDnsOutput"], () => require("./getEmailRoutingDns"));
exports.getEmailRoutingRule = null;
exports.getEmailRoutingRuleOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingRule", "getEmailRoutingRuleOutput"], () => require("./getEmailRoutingRule"));
exports.getEmailRoutingRules = null;
exports.getEmailRoutingRulesOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingRules", "getEmailRoutingRulesOutput"], () => require("./getEmailRoutingRules"));
exports.getEmailRoutingSettings = null;
exports.getEmailRoutingSettingsOutput = null;
utilities.lazyLoad(exports, ["getEmailRoutingSettings", "getEmailRoutingSettingsOutput"], () => require("./getEmailRoutingSettings"));
exports.getEmailSecurityBlockSender = null;
exports.getEmailSecurityBlockSenderOutput = null;
utilities.lazyLoad(exports, ["getEmailSecurityBlockSender", "getEmailSecurityBlockSenderOutput"], () => require("./getEmailSecurityBlockSender"));
exports.getEmailSecurityBlockSenders = null;
exports.getEmailSecurityBlockSendersOutput = null;
utilities.lazyLoad(exports, ["getEmailSecurityBlockSenders", "getEmailSecurityBlockSendersOutput"], () => require("./getEmailSecurityBlockSenders"));
exports.getEmailSecurityImpersonationRegistries = null;
exports.getEmailSecurityImpersonationRegistriesOutput = null;
utilities.lazyLoad(exports, ["getEmailSecurityImpersonationRegistries", "getEmailSecurityImpersonationRegistriesOutput"], () => require("./getEmailSecurityImpersonationRegistries"));
exports.getEmailSecurityImpersonationRegistry = null;
exports.getEmailSecurityImpersonationRegistryOutput = null;
utilities.lazyLoad(exports, ["getEmailSecurityImpersonationRegistry", "getEmailSecurityImpersonationRegistryOutput"], () => require("./getEmailSecurityImpersonationRegistry"));
exports.getEmailSecurityTrustedDomains = null;
exports.getEmailSecurityTrustedDomainsOutput = null;
utilities.lazyLoad(exports, ["getEmailSecurityTrustedDomains", "getEmailSecurityTrustedDomainsOutput"], () => require("./getEmailSecurityTrustedDomains"));
exports.getEmailSecurityTrustedDomainsList = null;
exports.getEmailSecurityTrustedDomainsListOutput = null;
utilities.lazyLoad(exports, ["getEmailSecurityTrustedDomainsList", "getEmailSecurityTrustedDomainsListOutput"], () => require("./getEmailSecurityTrustedDomainsList"));
exports.getFilter = null;
exports.getFilterOutput = null;
utilities.lazyLoad(exports, ["getFilter", "getFilterOutput"], () => require("./getFilter"));
exports.getFilters = null;
exports.getFiltersOutput = null;
utilities.lazyLoad(exports, ["getFilters", "getFiltersOutput"], () => require("./getFilters"));
exports.getFirewallRule = null;
exports.getFirewallRuleOutput = null;
utilities.lazyLoad(exports, ["getFirewallRule", "getFirewallRuleOutput"], () => require("./getFirewallRule"));
exports.getFirewallRules = null;
exports.getFirewallRulesOutput = null;
utilities.lazyLoad(exports, ["getFirewallRules", "getFirewallRulesOutput"], () => require("./getFirewallRules"));
exports.getHealthcheck = null;
exports.getHealthcheckOutput = null;
utilities.lazyLoad(exports, ["getHealthcheck", "getHealthcheckOutput"], () => require("./getHealthcheck"));
exports.getHealthchecks = null;
exports.getHealthchecksOutput = null;
utilities.lazyLoad(exports, ["getHealthchecks", "getHealthchecksOutput"], () => require("./getHealthchecks"));
exports.getHostnameTlsSetting = null;
exports.getHostnameTlsSettingOutput = null;
utilities.lazyLoad(exports, ["getHostnameTlsSetting", "getHostnameTlsSettingOutput"], () => require("./getHostnameTlsSetting"));
exports.getHyperdriveConfig = null;
exports.getHyperdriveConfigOutput = null;
utilities.lazyLoad(exports, ["getHyperdriveConfig", "getHyperdriveConfigOutput"], () => require("./getHyperdriveConfig"));
exports.getHyperdriveConfigs = null;
exports.getHyperdriveConfigsOutput = null;
utilities.lazyLoad(exports, ["getHyperdriveConfigs", "getHyperdriveConfigsOutput"], () => require("./getHyperdriveConfigs"));
exports.getImage = null;
exports.getImageOutput = null;
utilities.lazyLoad(exports, ["getImage", "getImageOutput"], () => require("./getImage"));
exports.getImageVariant = null;
exports.getImageVariantOutput = null;
utilities.lazyLoad(exports, ["getImageVariant", "getImageVariantOutput"], () => require("./getImageVariant"));
exports.getImages = null;
exports.getImagesOutput = null;
utilities.lazyLoad(exports, ["getImages", "getImagesOutput"], () => require("./getImages"));
exports.getIpRanges = null;
exports.getIpRangesOutput = null;
utilities.lazyLoad(exports, ["getIpRanges", "getIpRangesOutput"], () => require("./getIpRanges"));
exports.getKeylessCertificate = null;
exports.getKeylessCertificateOutput = null;
utilities.lazyLoad(exports, ["getKeylessCertificate", "getKeylessCertificateOutput"], () => require("./getKeylessCertificate"));
exports.getKeylessCertificates = null;
exports.getKeylessCertificatesOutput = null;
utilities.lazyLoad(exports, ["getKeylessCertificates", "getKeylessCertificatesOutput"], () => require("./getKeylessCertificates"));
exports.getLeakedCredentialCheck = null;
exports.getLeakedCredentialCheckOutput = null;
utilities.lazyLoad(exports, ["getLeakedCredentialCheck", "getLeakedCredentialCheckOutput"], () => require("./getLeakedCredentialCheck"));
exports.getLeakedCredentialCheckRules = null;
exports.getLeakedCredentialCheckRulesOutput = null;
utilities.lazyLoad(exports, ["getLeakedCredentialCheckRules", "getLeakedCredentialCheckRulesOutput"], () => require("./getLeakedCredentialCheckRules"));
exports.getList = null;
exports.getListOutput = null;
utilities.lazyLoad(exports, ["getList", "getListOutput"], () => require("./getList"));
exports.getListItem = null;
exports.getListItemOutput = null;
utilities.lazyLoad(exports, ["getListItem", "getListItemOutput"], () => require("./getListItem"));
exports.getListItems = null;
exports.getListItemsOutput = null;
utilities.lazyLoad(exports, ["getListItems", "getListItemsOutput"], () => require("./getListItems"));
exports.getLists = null;
exports.getListsOutput = null;
utilities.lazyLoad(exports, ["getLists", "getListsOutput"], () => require("./getLists"));
exports.getLoadBalancer = null;
exports.getLoadBalancerOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancer", "getLoadBalancerOutput"], () => require("./getLoadBalancer"));
exports.getLoadBalancerMonitor = null;
exports.getLoadBalancerMonitorOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancerMonitor", "getLoadBalancerMonitorOutput"], () => require("./getLoadBalancerMonitor"));
exports.getLoadBalancerMonitors = null;
exports.getLoadBalancerMonitorsOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancerMonitors", "getLoadBalancerMonitorsOutput"], () => require("./getLoadBalancerMonitors"));
exports.getLoadBalancerPool = null;
exports.getLoadBalancerPoolOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancerPool", "getLoadBalancerPoolOutput"], () => require("./getLoadBalancerPool"));
exports.getLoadBalancerPools = null;
exports.getLoadBalancerPoolsOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancerPools", "getLoadBalancerPoolsOutput"], () => require("./getLoadBalancerPools"));
exports.getLoadBalancers = null;
exports.getLoadBalancersOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancers", "getLoadBalancersOutput"], () => require("./getLoadBalancers"));
exports.getLogpullRetention = null;
exports.getLogpullRetentionOutput = null;
utilities.lazyLoad(exports, ["getLogpullRetention", "getLogpullRetentionOutput"], () => require("./getLogpullRetention"));
exports.getLogpushDatasetField = null;
exports.getLogpushDatasetFieldOutput = null;
utilities.lazyLoad(exports, ["getLogpushDatasetField", "getLogpushDatasetFieldOutput"], () => require("./getLogpushDatasetField"));
exports.getLogpushDatasetJob = null;
exports.getLogpushDatasetJobOutput = null;
utilities.lazyLoad(exports, ["getLogpushDatasetJob", "getLogpushDatasetJobOutput"], () => require("./getLogpushDatasetJob"));
exports.getLogpushJob = null;
exports.getLogpushJobOutput = null;
utilities.lazyLoad(exports, ["getLogpushJob", "getLogpushJobOutput"], () => require("./getLogpushJob"));
exports.getLogpushJobs = null;
exports.getLogpushJobsOutput = null;
utilities.lazyLoad(exports, ["getLogpushJobs", "getLogpushJobsOutput"], () => require("./getLogpushJobs"));
exports.getMagicNetworkMonitoringConfiguration = null;
exports.getMagicNetworkMonitoringConfigurationOutput = null;
utilities.lazyLoad(exports, ["getMagicNetworkMonitoringConfiguration", "getMagicNetworkMonitoringConfigurationOutput"], () => require("./getMagicNetworkMonitoringConfiguration"));
exports.getMagicNetworkMonitoringRule = null;
exports.getMagicNetworkMonitoringRuleOutput = null;
utilities.lazyLoad(exports, ["getMagicNetworkMonitoringRule", "getMagicNetworkMonitoringRuleOutput"], () => require("./getMagicNetworkMonitoringRule"));
exports.getMagicNetworkMonitoringRules = null;
exports.getMagicNetworkMonitoringRulesOutput = null;
utilities.lazyLoad(exports, ["getMagicNetworkMonitoringRules", "getMagicNetworkMonitoringRulesOutput"], () => require("./getMagicNetworkMonitoringRules"));
exports.getMagicTransitConnector = null;
exports.getMagicTransitConnectorOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitConnector", "getMagicTransitConnectorOutput"], () => require("./getMagicTransitConnector"));
exports.getMagicTransitConnectors = null;
exports.getMagicTransitConnectorsOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitConnectors", "getMagicTransitConnectorsOutput"], () => require("./getMagicTransitConnectors"));
exports.getMagicTransitSite = null;
exports.getMagicTransitSiteOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSite", "getMagicTransitSiteOutput"], () => require("./getMagicTransitSite"));
exports.getMagicTransitSiteAcl = null;
exports.getMagicTransitSiteAclOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSiteAcl", "getMagicTransitSiteAclOutput"], () => require("./getMagicTransitSiteAcl"));
exports.getMagicTransitSiteAcls = null;
exports.getMagicTransitSiteAclsOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSiteAcls", "getMagicTransitSiteAclsOutput"], () => require("./getMagicTransitSiteAcls"));
exports.getMagicTransitSiteLan = null;
exports.getMagicTransitSiteLanOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSiteLan", "getMagicTransitSiteLanOutput"], () => require("./getMagicTransitSiteLan"));
exports.getMagicTransitSiteLans = null;
exports.getMagicTransitSiteLansOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSiteLans", "getMagicTransitSiteLansOutput"], () => require("./getMagicTransitSiteLans"));
exports.getMagicTransitSiteWan = null;
exports.getMagicTransitSiteWanOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSiteWan", "getMagicTransitSiteWanOutput"], () => require("./getMagicTransitSiteWan"));
exports.getMagicTransitSiteWans = null;
exports.getMagicTransitSiteWansOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSiteWans", "getMagicTransitSiteWansOutput"], () => require("./getMagicTransitSiteWans"));
exports.getMagicTransitSites = null;
exports.getMagicTransitSitesOutput = null;
utilities.lazyLoad(exports, ["getMagicTransitSites", "getMagicTransitSitesOutput"], () => require("./getMagicTransitSites"));
exports.getMagicWanGreTunnel = null;
exports.getMagicWanGreTunnelOutput = null;
utilities.lazyLoad(exports, ["getMagicWanGreTunnel", "getMagicWanGreTunnelOutput"], () => require("./getMagicWanGreTunnel"));
exports.getMagicWanIpsecTunnel = null;
exports.getMagicWanIpsecTunnelOutput = null;
utilities.lazyLoad(exports, ["getMagicWanIpsecTunnel", "getMagicWanIpsecTunnelOutput"], () => require("./getMagicWanIpsecTunnel"));
exports.getMagicWanStaticRoute = null;
exports.getMagicWanStaticRouteOutput = null;
utilities.lazyLoad(exports, ["getMagicWanStaticRoute", "getMagicWanStaticRouteOutput"], () => require("./getMagicWanStaticRoute"));
exports.getManagedTransforms = null;
exports.getManagedTransformsOutput = null;
utilities.lazyLoad(exports, ["getManagedTransforms", "getManagedTransformsOutput"], () => require("./getManagedTransforms"));
exports.getMtlsCertificate = null;
exports.getMtlsCertificateOutput = null;
utilities.lazyLoad(exports, ["getMtlsCertificate", "getMtlsCertificateOutput"], () => require("./getMtlsCertificate"));
exports.getMtlsCertificates = null;
exports.getMtlsCertificatesOutput = null;
utilities.lazyLoad(exports, ["getMtlsCertificates", "getMtlsCertificatesOutput"], () => require("./getMtlsCertificates"));
exports.getNotificationPolicies = null;
exports.getNotificationPoliciesOutput = null;
utilities.lazyLoad(exports, ["getNotificationPolicies", "getNotificationPoliciesOutput"], () => require("./getNotificationPolicies"));
exports.getNotificationPolicy = null;
exports.getNotificationPolicyOutput = null;
utilities.lazyLoad(exports, ["getNotificationPolicy", "getNotificationPolicyOutput"], () => require("./getNotificationPolicy"));
exports.getNotificationPolicyWebhooks = null;
exports.getNotificationPolicyWebhooksOutput = null;
utilities.lazyLoad(exports, ["getNotificationPolicyWebhooks", "getNotificationPolicyWebhooksOutput"], () => require("./getNotificationPolicyWebhooks"));
exports.getNotificationPolicyWebhooksList = null;
exports.getNotificationPolicyWebhooksListOutput = null;
utilities.lazyLoad(exports, ["getNotificationPolicyWebhooksList", "getNotificationPolicyWebhooksListOutput"], () => require("./getNotificationPolicyWebhooksList"));
exports.getObservatoryScheduledTest = null;
exports.getObservatoryScheduledTestOutput = null;
utilities.lazyLoad(exports, ["getObservatoryScheduledTest", "getObservatoryScheduledTestOutput"], () => require("./getObservatoryScheduledTest"));
exports.getOriginCaCertificate = null;
exports.getOriginCaCertificateOutput = null;
utilities.lazyLoad(exports, ["getOriginCaCertificate", "getOriginCaCertificateOutput"], () => require("./getOriginCaCertificate"));
exports.getOriginCaCertificates = null;
exports.getOriginCaCertificatesOutput = null;
utilities.lazyLoad(exports, ["getOriginCaCertificates", "getOriginCaCertificatesOutput"], () => require("./getOriginCaCertificates"));
exports.getPageRule = null;
exports.getPageRuleOutput = null;
utilities.lazyLoad(exports, ["getPageRule", "getPageRuleOutput"], () => require("./getPageRule"));
exports.getPageShieldConnections = null;
exports.getPageShieldConnectionsOutput = null;
utilities.lazyLoad(exports, ["getPageShieldConnections", "getPageShieldConnectionsOutput"], () => require("./getPageShieldConnections"));
exports.getPageShieldConnectionsList = null;
exports.getPageShieldConnectionsListOutput = null;
utilities.lazyLoad(exports, ["getPageShieldConnectionsList", "getPageShieldConnectionsListOutput"], () => require("./getPageShieldConnectionsList"));
exports.getPageShieldCookies = null;
exports.getPageShieldCookiesOutput = null;
utilities.lazyLoad(exports, ["getPageShieldCookies", "getPageShieldCookiesOutput"], () => require("./getPageShieldCookies"));
exports.getPageShieldCookiesList = null;
exports.getPageShieldCookiesListOutput = null;
utilities.lazyLoad(exports, ["getPageShieldCookiesList", "getPageShieldCookiesListOutput"], () => require("./getPageShieldCookiesList"));
exports.getPageShieldPolicies = null;
exports.getPageShieldPoliciesOutput = null;
utilities.lazyLoad(exports, ["getPageShieldPolicies", "getPageShieldPoliciesOutput"], () => require("./getPageShieldPolicies"));
exports.getPageShieldPolicy = null;
exports.getPageShieldPolicyOutput = null;
utilities.lazyLoad(exports, ["getPageShieldPolicy", "getPageShieldPolicyOutput"], () => require("./getPageShieldPolicy"));
exports.getPageShieldScripts = null;
exports.getPageShieldScriptsOutput = null;
utilities.lazyLoad(exports, ["getPageShieldScripts", "getPageShieldScriptsOutput"], () => require("./getPageShieldScripts"));
exports.getPageShieldScriptsList = null;
exports.getPageShieldScriptsListOutput = null;
utilities.lazyLoad(exports, ["getPageShieldScriptsList", "getPageShieldScriptsListOutput"], () => require("./getPageShieldScriptsList"));
exports.getPagesDomain = null;
exports.getPagesDomainOutput = null;
utilities.lazyLoad(exports, ["getPagesDomain", "getPagesDomainOutput"], () => require("./getPagesDomain"));
exports.getPagesDomains = null;
exports.getPagesDomainsOutput = null;
utilities.lazyLoad(exports, ["getPagesDomains", "getPagesDomainsOutput"], () => require("./getPagesDomains"));
exports.getPagesProject = null;
exports.getPagesProjectOutput = null;
utilities.lazyLoad(exports, ["getPagesProject", "getPagesProjectOutput"], () => require("./getPagesProject"));
exports.getPagesProjects = null;
exports.getPagesProjectsOutput = null;
utilities.lazyLoad(exports, ["getPagesProjects", "getPagesProjectsOutput"], () => require("./getPagesProjects"));
exports.getQueue = null;
exports.getQueueOutput = null;
utilities.lazyLoad(exports, ["getQueue", "getQueueOutput"], () => require("./getQueue"));
exports.getQueueConsumer = null;
exports.getQueueConsumerOutput = null;
utilities.lazyLoad(exports, ["getQueueConsumer", "getQueueConsumerOutput"], () => require("./getQueueConsumer"));
exports.getQueueConsumers = null;
exports.getQueueConsumersOutput = null;
utilities.lazyLoad(exports, ["getQueueConsumers", "getQueueConsumersOutput"], () => require("./getQueueConsumers"));
exports.getQueues = null;
exports.getQueuesOutput = null;
utilities.lazyLoad(exports, ["getQueues", "getQueuesOutput"], () => require("./getQueues"));
exports.getR2Bucket = null;
exports.getR2BucketOutput = null;
utilities.lazyLoad(exports, ["getR2Bucket", "getR2BucketOutput"], () => require("./getR2Bucket"));
exports.getR2BucketCors = null;
exports.getR2BucketCorsOutput = null;
utilities.lazyLoad(exports, ["getR2BucketCors", "getR2BucketCorsOutput"], () => require("./getR2BucketCors"));
exports.getR2BucketEventNotification = null;
exports.getR2BucketEventNotificationOutput = null;
utilities.lazyLoad(exports, ["getR2BucketEventNotification", "getR2BucketEventNotificationOutput"], () => require("./getR2BucketEventNotification"));
exports.getR2BucketLifecycle = null;
exports.getR2BucketLifecycleOutput = null;
utilities.lazyLoad(exports, ["getR2BucketLifecycle", "getR2BucketLifecycleOutput"], () => require("./getR2BucketLifecycle"));
exports.getR2BucketLock = null;
exports.getR2BucketLockOutput = null;
utilities.lazyLoad(exports, ["getR2BucketLock", "getR2BucketLockOutput"], () => require("./getR2BucketLock"));
exports.getR2BucketSippy = null;
exports.getR2BucketSippyOutput = null;
utilities.lazyLoad(exports, ["getR2BucketSippy", "getR2BucketSippyOutput"], () => require("./getR2BucketSippy"));
exports.getR2CustomDomain = null;
exports.getR2CustomDomainOutput = null;
utilities.lazyLoad(exports, ["getR2CustomDomain", "getR2CustomDomainOutput"], () => require("./getR2CustomDomain"));
exports.getRateLimit = null;
exports.getRateLimitOutput = null;
utilities.lazyLoad(exports, ["getRateLimit", "getRateLimitOutput"], () => require("./getRateLimit"));
exports.getRateLimits = null;
exports.getRateLimitsOutput = null;
utilities.lazyLoad(exports, ["getRateLimits", "getRateLimitsOutput"], () => require("./getRateLimits"));
exports.getRegionalHostname = null;
exports.getRegionalHostnameOutput = null;
utilities.lazyLoad(exports, ["getRegionalHostname", "getRegionalHostnameOutput"], () => require("./getRegionalHostname"));
exports.getRegionalHostnames = null;
exports.getRegionalHostnamesOutput = null;
utilities.lazyLoad(exports, ["getRegionalHostnames", "getRegionalHostnamesOutput"], () => require("./getRegionalHostnames"));
exports.getRegionalTieredCache = null;
exports.getRegionalTieredCacheOutput = null;
utilities.lazyLoad(exports, ["getRegionalTieredCache", "getRegionalTieredCacheOutput"], () => require("./getRegionalTieredCache"));
exports.getRegistrarDomain = null;
exports.getRegistrarDomainOutput = null;
utilities.lazyLoad(exports, ["getRegistrarDomain", "getRegistrarDomainOutput"], () => require("./getRegistrarDomain"));
exports.getRegistrarDomains = null;
exports.getRegistrarDomainsOutput = null;
utilities.lazyLoad(exports, ["getRegistrarDomains", "getRegistrarDomainsOutput"], () => require("./getRegistrarDomains"));
exports.getResourceGroup = null;
exports.getResourceGroupOutput = null;
utilities.lazyLoad(exports, ["getResourceGroup", "getResourceGroupOutput"], () => require("./getResourceGroup"));
exports.getResourceGroups = null;
exports.getResourceGroupsOutput = null;
utilities.lazyLoad(exports, ["getResourceGroups", "getResourceGroupsOutput"], () => require("./getResourceGroups"));
exports.getRuleset = null;
exports.getRulesetOutput = null;
utilities.lazyLoad(exports, ["getRuleset", "getRulesetOutput"], () => require("./getRuleset"));
exports.getRulesets = null;
exports.getRulesetsOutput = null;
utilities.lazyLoad(exports, ["getRulesets", "getRulesetsOutput"], () => require("./getRulesets"));
exports.getSchemaValidationOperationSettings = null;
exports.getSchemaValidationOperationSettingsOutput = null;
utilities.lazyLoad(exports, ["getSchemaValidationOperationSettings", "getSchemaValidationOperationSettingsOutput"], () => require("./getSchemaValidationOperationSettings"));
exports.getSchemaValidationOperationSettingsList = null;
exports.getSchemaValidationOperationSettingsListOutput = null;
utilities.lazyLoad(exports, ["getSchemaValidationOperationSettingsList", "getSchemaValidationOperationSettingsListOutput"], () => require("./getSchemaValidationOperationSettingsList"));
exports.getSchemaValidationSchemas = null;
exports.getSchemaValidationSchemasOutput = null;
utilities.lazyLoad(exports, ["getSchemaValidationSchemas", "getSchemaValidationSchemasOutput"], () => require("./getSchemaValidationSchemas"));
exports.getSchemaValidationSchemasList = null;
exports.getSchemaValidationSchemasListOutput = null;
utilities.lazyLoad(exports, ["getSchemaValidationSchemasList", "getSchemaValidationSchemasListOutput"], () => require("./getSchemaValidationSchemasList"));
exports.getSchemaValidationSettings = null;
exports.getSchemaValidationSettingsOutput = null;
utilities.lazyLoad(exports, ["getSchemaValidationSettings", "getSchemaValidationSettingsOutput"], () => require("./getSchemaValidationSettings"));
exports.getSnippetRulesList = null;
exports.getSnippetRulesListOutput = null;
utilities.lazyLoad(exports, ["getSnippetRulesList", "getSnippetRulesListOutput"], () => require("./getSnippetRulesList"));
exports.getSnippets = null;
exports.getSnippetsOutput = null;
utilities.lazyLoad(exports, ["getSnippets", "getSnippetsOutput"], () => require("./getSnippets"));
exports.getSnippetsList = null;
exports.getSnippetsListOutput = null;
utilities.lazyLoad(exports, ["getSnippetsList", "getSnippetsListOutput"], () => require("./getSnippetsList"));
exports.getSpectrumApplication = null;
exports.getSpectrumApplicationOutput = null;
utilities.lazyLoad(exports, ["getSpectrumApplication", "getSpectrumApplicationOutput"], () => require("./getSpectrumApplication"));
exports.getSpectrumApplications = null;
exports.getSpectrumApplicationsOutput = null;
utilities.lazyLoad(exports, ["getSpectrumApplications", "getSpectrumApplicationsOutput"], () => require("./getSpectrumApplications"));
exports.getStream = null;
exports.getStreamOutput = null;
utilities.lazyLoad(exports, ["getStream", "getStreamOutput"], () => require("./getStream"));
exports.getStreamAudioTrack = null;
exports.getStreamAudioTrackOutput = null;
utilities.lazyLoad(exports, ["getStreamAudioTrack", "getStreamAudioTrackOutput"], () => require("./getStreamAudioTrack"));
exports.getStreamCaptionLanguage = null;
exports.getStreamCaptionLanguageOutput = null;
utilities.lazyLoad(exports, ["getStreamCaptionLanguage", "getStreamCaptionLanguageOutput"], () => require("./getStreamCaptionLanguage"));
exports.getStreamDownload = null;
exports.getStreamDownloadOutput = null;
utilities.lazyLoad(exports, ["getStreamDownload", "getStreamDownloadOutput"], () => require("./getStreamDownload"));
exports.getStreamKey = null;
exports.getStreamKeyOutput = null;
utilities.lazyLoad(exports, ["getStreamKey", "getStreamKeyOutput"], () => require("./getStreamKey"));
exports.getStreamLiveInput = null;
exports.getStreamLiveInputOutput = null;
utilities.lazyLoad(exports, ["getStreamLiveInput", "getStreamLiveInputOutput"], () => require("./getStreamLiveInput"));
exports.getStreamWatermark = null;
exports.getStreamWatermarkOutput = null;
utilities.lazyLoad(exports, ["getStreamWatermark", "getStreamWatermarkOutput"], () => require("./getStreamWatermark"));
exports.getStreamWatermarks = null;
exports.getStreamWatermarksOutput = null;
utilities.lazyLoad(exports, ["getStreamWatermarks", "getStreamWatermarksOutput"], () => require("./getStreamWatermarks"));
exports.getStreamWebhook = null;
exports.getStreamWebhookOutput = null;
utilities.lazyLoad(exports, ["getStreamWebhook", "getStreamWebhookOutput"], () => require("./getStreamWebhook"));
exports.getStreams = null;
exports.getStreamsOutput = null;
utilities.lazyLoad(exports, ["getStreams", "getStreamsOutput"], () => require("./getStreams"));
exports.getTieredCache = null;
exports.getTieredCacheOutput = null;
utilities.lazyLoad(exports, ["getTieredCache", "getTieredCacheOutput"], () => require("./getTieredCache"));
exports.getTotalTls = null;
exports.getTotalTlsOutput = null;
utilities.lazyLoad(exports, ["getTotalTls", "getTotalTlsOutput"], () => require("./getTotalTls"));
exports.getTurnstileWidget = null;
exports.getTurnstileWidgetOutput = null;
utilities.lazyLoad(exports, ["getTurnstileWidget", "getTurnstileWidgetOutput"], () => require("./getTurnstileWidget"));
exports.getTurnstileWidgets = null;
exports.getTurnstileWidgetsOutput = null;
utilities.lazyLoad(exports, ["getTurnstileWidgets", "getTurnstileWidgetsOutput"], () => require("./getTurnstileWidgets"));
exports.getUrlNormalizationSettings = null;
exports.getUrlNormalizationSettingsOutput = null;
utilities.lazyLoad(exports, ["getUrlNormalizationSettings", "getUrlNormalizationSettingsOutput"], () => require("./getUrlNormalizationSettings"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getUserAgentBlockingRule = null;
exports.getUserAgentBlockingRuleOutput = null;
utilities.lazyLoad(exports, ["getUserAgentBlockingRule", "getUserAgentBlockingRuleOutput"], () => require("./getUserAgentBlockingRule"));
exports.getUserAgentBlockingRules = null;
exports.getUserAgentBlockingRulesOutput = null;
utilities.lazyLoad(exports, ["getUserAgentBlockingRules", "getUserAgentBlockingRulesOutput"], () => require("./getUserAgentBlockingRules"));
exports.getWaitingRoom = null;
exports.getWaitingRoomOutput = null;
utilities.lazyLoad(exports, ["getWaitingRoom", "getWaitingRoomOutput"], () => require("./getWaitingRoom"));
exports.getWaitingRoomEvent = null;
exports.getWaitingRoomEventOutput = null;
utilities.lazyLoad(exports, ["getWaitingRoomEvent", "getWaitingRoomEventOutput"], () => require("./getWaitingRoomEvent"));
exports.getWaitingRoomEvents = null;
exports.getWaitingRoomEventsOutput = null;
utilities.lazyLoad(exports, ["getWaitingRoomEvents", "getWaitingRoomEventsOutput"], () => require("./getWaitingRoomEvents"));
exports.getWaitingRoomRules = null;
exports.getWaitingRoomRulesOutput = null;
utilities.lazyLoad(exports, ["getWaitingRoomRules", "getWaitingRoomRulesOutput"], () => require("./getWaitingRoomRules"));
exports.getWaitingRoomSettings = null;
exports.getWaitingRoomSettingsOutput = null;
utilities.lazyLoad(exports, ["getWaitingRoomSettings", "getWaitingRoomSettingsOutput"], () => require("./getWaitingRoomSettings"));
exports.getWaitingRooms = null;
exports.getWaitingRoomsOutput = null;
utilities.lazyLoad(exports, ["getWaitingRooms", "getWaitingRoomsOutput"], () => require("./getWaitingRooms"));
exports.getWeb3Hostname = null;
exports.getWeb3HostnameOutput = null;
utilities.lazyLoad(exports, ["getWeb3Hostname", "getWeb3HostnameOutput"], () => require("./getWeb3Hostname"));
exports.getWeb3Hostnames = null;
exports.getWeb3HostnamesOutput = null;
utilities.lazyLoad(exports, ["getWeb3Hostnames", "getWeb3HostnamesOutput"], () => require("./getWeb3Hostnames"));
exports.getWebAnalyticsSite = null;
exports.getWebAnalyticsSiteOutput = null;
utilities.lazyLoad(exports, ["getWebAnalyticsSite", "getWebAnalyticsSiteOutput"], () => require("./getWebAnalyticsSite"));
exports.getWebAnalyticsSites = null;
exports.getWebAnalyticsSitesOutput = null;
utilities.lazyLoad(exports, ["getWebAnalyticsSites", "getWebAnalyticsSitesOutput"], () => require("./getWebAnalyticsSites"));
exports.getWorkersCronTrigger = null;
exports.getWorkersCronTriggerOutput = null;
utilities.lazyLoad(exports, ["getWorkersCronTrigger", "getWorkersCronTriggerOutput"], () => require("./getWorkersCronTrigger"));
exports.getWorkersCustomDomain = null;
exports.getWorkersCustomDomainOutput = null;
utilities.lazyLoad(exports, ["getWorkersCustomDomain", "getWorkersCustomDomainOutput"], () => require("./getWorkersCustomDomain"));
exports.getWorkersCustomDomains = null;
exports.getWorkersCustomDomainsOutput = null;
utilities.lazyLoad(exports, ["getWorkersCustomDomains", "getWorkersCustomDomainsOutput"], () => require("./getWorkersCustomDomains"));
exports.getWorkersDeployment = null;
exports.getWorkersDeploymentOutput = null;
utilities.lazyLoad(exports, ["getWorkersDeployment", "getWorkersDeploymentOutput"], () => require("./getWorkersDeployment"));
exports.getWorkersForPlatformsDispatchNamespace = null;
exports.getWorkersForPlatformsDispatchNamespaceOutput = null;
utilities.lazyLoad(exports, ["getWorkersForPlatformsDispatchNamespace", "getWorkersForPlatformsDispatchNamespaceOutput"], () => require("./getWorkersForPlatformsDispatchNamespace"));
exports.getWorkersForPlatformsDispatchNamespaces = null;
exports.getWorkersForPlatformsDispatchNamespacesOutput = null;
utilities.lazyLoad(exports, ["getWorkersForPlatformsDispatchNamespaces", "getWorkersForPlatformsDispatchNamespacesOutput"], () => require("./getWorkersForPlatformsDispatchNamespaces"));
exports.getWorkersKv = null;
exports.getWorkersKvOutput = null;
utilities.lazyLoad(exports, ["getWorkersKv", "getWorkersKvOutput"], () => require("./getWorkersKv"));
exports.getWorkersKvNamespace = null;
exports.getWorkersKvNamespaceOutput = null;
utilities.lazyLoad(exports, ["getWorkersKvNamespace", "getWorkersKvNamespaceOutput"], () => require("./getWorkersKvNamespace"));
exports.getWorkersKvNamespaces = null;
exports.getWorkersKvNamespacesOutput = null;
utilities.lazyLoad(exports, ["getWorkersKvNamespaces", "getWorkersKvNamespacesOutput"], () => require("./getWorkersKvNamespaces"));
exports.getWorkersRoute = null;
exports.getWorkersRouteOutput = null;
utilities.lazyLoad(exports, ["getWorkersRoute", "getWorkersRouteOutput"], () => require("./getWorkersRoute"));
exports.getWorkersRoutes = null;
exports.getWorkersRoutesOutput = null;
utilities.lazyLoad(exports, ["getWorkersRoutes", "getWorkersRoutesOutput"], () => require("./getWorkersRoutes"));
exports.getWorkersScript = null;
exports.getWorkersScriptOutput = null;
utilities.lazyLoad(exports, ["getWorkersScript", "getWorkersScriptOutput"], () => require("./getWorkersScript"));
exports.getWorkersScriptSubdomain = null;
exports.getWorkersScriptSubdomainOutput = null;
utilities.lazyLoad(exports, ["getWorkersScriptSubdomain", "getWorkersScriptSubdomainOutput"], () => require("./getWorkersScriptSubdomain"));
exports.getWorkersScripts = null;
exports.getWorkersScriptsOutput = null;
utilities.lazyLoad(exports, ["getWorkersScripts", "getWorkersScriptsOutput"], () => require("./getWorkersScripts"));
exports.getZeroTrustAccessApplication = null;
exports.getZeroTrustAccessApplicationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessApplication", "getZeroTrustAccessApplicationOutput"], () => require("./getZeroTrustAccessApplication"));
exports.getZeroTrustAccessApplications = null;
exports.getZeroTrustAccessApplicationsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessApplications", "getZeroTrustAccessApplicationsOutput"], () => require("./getZeroTrustAccessApplications"));
exports.getZeroTrustAccessCustomPage = null;
exports.getZeroTrustAccessCustomPageOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessCustomPage", "getZeroTrustAccessCustomPageOutput"], () => require("./getZeroTrustAccessCustomPage"));
exports.getZeroTrustAccessCustomPages = null;
exports.getZeroTrustAccessCustomPagesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessCustomPages", "getZeroTrustAccessCustomPagesOutput"], () => require("./getZeroTrustAccessCustomPages"));
exports.getZeroTrustAccessGroup = null;
exports.getZeroTrustAccessGroupOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessGroup", "getZeroTrustAccessGroupOutput"], () => require("./getZeroTrustAccessGroup"));
exports.getZeroTrustAccessGroups = null;
exports.getZeroTrustAccessGroupsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessGroups", "getZeroTrustAccessGroupsOutput"], () => require("./getZeroTrustAccessGroups"));
exports.getZeroTrustAccessIdentityProvider = null;
exports.getZeroTrustAccessIdentityProviderOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessIdentityProvider", "getZeroTrustAccessIdentityProviderOutput"], () => require("./getZeroTrustAccessIdentityProvider"));
exports.getZeroTrustAccessIdentityProviders = null;
exports.getZeroTrustAccessIdentityProvidersOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessIdentityProviders", "getZeroTrustAccessIdentityProvidersOutput"], () => require("./getZeroTrustAccessIdentityProviders"));
exports.getZeroTrustAccessInfrastructureTarget = null;
exports.getZeroTrustAccessInfrastructureTargetOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessInfrastructureTarget", "getZeroTrustAccessInfrastructureTargetOutput"], () => require("./getZeroTrustAccessInfrastructureTarget"));
exports.getZeroTrustAccessInfrastructureTargets = null;
exports.getZeroTrustAccessInfrastructureTargetsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessInfrastructureTargets", "getZeroTrustAccessInfrastructureTargetsOutput"], () => require("./getZeroTrustAccessInfrastructureTargets"));
exports.getZeroTrustAccessKeyConfiguration = null;
exports.getZeroTrustAccessKeyConfigurationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessKeyConfiguration", "getZeroTrustAccessKeyConfigurationOutput"], () => require("./getZeroTrustAccessKeyConfiguration"));
exports.getZeroTrustAccessMtlsCertificate = null;
exports.getZeroTrustAccessMtlsCertificateOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessMtlsCertificate", "getZeroTrustAccessMtlsCertificateOutput"], () => require("./getZeroTrustAccessMtlsCertificate"));
exports.getZeroTrustAccessMtlsCertificates = null;
exports.getZeroTrustAccessMtlsCertificatesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessMtlsCertificates", "getZeroTrustAccessMtlsCertificatesOutput"], () => require("./getZeroTrustAccessMtlsCertificates"));
exports.getZeroTrustAccessMtlsHostnameSettings = null;
exports.getZeroTrustAccessMtlsHostnameSettingsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessMtlsHostnameSettings", "getZeroTrustAccessMtlsHostnameSettingsOutput"], () => require("./getZeroTrustAccessMtlsHostnameSettings"));
exports.getZeroTrustAccessPolicies = null;
exports.getZeroTrustAccessPoliciesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessPolicies", "getZeroTrustAccessPoliciesOutput"], () => require("./getZeroTrustAccessPolicies"));
exports.getZeroTrustAccessPolicy = null;
exports.getZeroTrustAccessPolicyOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessPolicy", "getZeroTrustAccessPolicyOutput"], () => require("./getZeroTrustAccessPolicy"));
exports.getZeroTrustAccessServiceToken = null;
exports.getZeroTrustAccessServiceTokenOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessServiceToken", "getZeroTrustAccessServiceTokenOutput"], () => require("./getZeroTrustAccessServiceToken"));
exports.getZeroTrustAccessServiceTokens = null;
exports.getZeroTrustAccessServiceTokensOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessServiceTokens", "getZeroTrustAccessServiceTokensOutput"], () => require("./getZeroTrustAccessServiceTokens"));
exports.getZeroTrustAccessShortLivedCertificate = null;
exports.getZeroTrustAccessShortLivedCertificateOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessShortLivedCertificate", "getZeroTrustAccessShortLivedCertificateOutput"], () => require("./getZeroTrustAccessShortLivedCertificate"));
exports.getZeroTrustAccessShortLivedCertificates = null;
exports.getZeroTrustAccessShortLivedCertificatesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessShortLivedCertificates", "getZeroTrustAccessShortLivedCertificatesOutput"], () => require("./getZeroTrustAccessShortLivedCertificates"));
exports.getZeroTrustAccessTag = null;
exports.getZeroTrustAccessTagOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessTag", "getZeroTrustAccessTagOutput"], () => require("./getZeroTrustAccessTag"));
exports.getZeroTrustAccessTags = null;
exports.getZeroTrustAccessTagsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessTags", "getZeroTrustAccessTagsOutput"], () => require("./getZeroTrustAccessTags"));
exports.getZeroTrustDeviceCustomProfile = null;
exports.getZeroTrustDeviceCustomProfileOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceCustomProfile", "getZeroTrustDeviceCustomProfileOutput"], () => require("./getZeroTrustDeviceCustomProfile"));
exports.getZeroTrustDeviceCustomProfileLocalDomainFallback = null;
exports.getZeroTrustDeviceCustomProfileLocalDomainFallbackOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceCustomProfileLocalDomainFallback", "getZeroTrustDeviceCustomProfileLocalDomainFallbackOutput"], () => require("./getZeroTrustDeviceCustomProfileLocalDomainFallback"));
exports.getZeroTrustDeviceCustomProfiles = null;
exports.getZeroTrustDeviceCustomProfilesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceCustomProfiles", "getZeroTrustDeviceCustomProfilesOutput"], () => require("./getZeroTrustDeviceCustomProfiles"));
exports.getZeroTrustDeviceDefaultProfile = null;
exports.getZeroTrustDeviceDefaultProfileOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceDefaultProfile", "getZeroTrustDeviceDefaultProfileOutput"], () => require("./getZeroTrustDeviceDefaultProfile"));
exports.getZeroTrustDeviceDefaultProfileCertificates = null;
exports.getZeroTrustDeviceDefaultProfileCertificatesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceDefaultProfileCertificates", "getZeroTrustDeviceDefaultProfileCertificatesOutput"], () => require("./getZeroTrustDeviceDefaultProfileCertificates"));
exports.getZeroTrustDeviceDefaultProfileLocalDomainFallback = null;
exports.getZeroTrustDeviceDefaultProfileLocalDomainFallbackOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceDefaultProfileLocalDomainFallback", "getZeroTrustDeviceDefaultProfileLocalDomainFallbackOutput"], () => require("./getZeroTrustDeviceDefaultProfileLocalDomainFallback"));
exports.getZeroTrustDeviceManagedNetworks = null;
exports.getZeroTrustDeviceManagedNetworksOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceManagedNetworks", "getZeroTrustDeviceManagedNetworksOutput"], () => require("./getZeroTrustDeviceManagedNetworks"));
exports.getZeroTrustDeviceManagedNetworksList = null;
exports.getZeroTrustDeviceManagedNetworksListOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceManagedNetworksList", "getZeroTrustDeviceManagedNetworksListOutput"], () => require("./getZeroTrustDeviceManagedNetworksList"));
exports.getZeroTrustDevicePostureIntegration = null;
exports.getZeroTrustDevicePostureIntegrationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDevicePostureIntegration", "getZeroTrustDevicePostureIntegrationOutput"], () => require("./getZeroTrustDevicePostureIntegration"));
exports.getZeroTrustDevicePostureIntegrations = null;
exports.getZeroTrustDevicePostureIntegrationsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDevicePostureIntegrations", "getZeroTrustDevicePostureIntegrationsOutput"], () => require("./getZeroTrustDevicePostureIntegrations"));
exports.getZeroTrustDevicePostureRule = null;
exports.getZeroTrustDevicePostureRuleOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDevicePostureRule", "getZeroTrustDevicePostureRuleOutput"], () => require("./getZeroTrustDevicePostureRule"));
exports.getZeroTrustDevicePostureRules = null;
exports.getZeroTrustDevicePostureRulesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDevicePostureRules", "getZeroTrustDevicePostureRulesOutput"], () => require("./getZeroTrustDevicePostureRules"));
exports.getZeroTrustDeviceSettings = null;
exports.getZeroTrustDeviceSettingsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDeviceSettings", "getZeroTrustDeviceSettingsOutput"], () => require("./getZeroTrustDeviceSettings"));
exports.getZeroTrustDexTest = null;
exports.getZeroTrustDexTestOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDexTest", "getZeroTrustDexTestOutput"], () => require("./getZeroTrustDexTest"));
exports.getZeroTrustDexTests = null;
exports.getZeroTrustDexTestsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDexTests", "getZeroTrustDexTestsOutput"], () => require("./getZeroTrustDexTests"));
exports.getZeroTrustDlpCustomProfile = null;
exports.getZeroTrustDlpCustomProfileOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDlpCustomProfile", "getZeroTrustDlpCustomProfileOutput"], () => require("./getZeroTrustDlpCustomProfile"));
exports.getZeroTrustDlpDataset = null;
exports.getZeroTrustDlpDatasetOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDlpDataset", "getZeroTrustDlpDatasetOutput"], () => require("./getZeroTrustDlpDataset"));
exports.getZeroTrustDlpDatasets = null;
exports.getZeroTrustDlpDatasetsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDlpDatasets", "getZeroTrustDlpDatasetsOutput"], () => require("./getZeroTrustDlpDatasets"));
exports.getZeroTrustDlpEntries = null;
exports.getZeroTrustDlpEntriesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDlpEntries", "getZeroTrustDlpEntriesOutput"], () => require("./getZeroTrustDlpEntries"));
exports.getZeroTrustDlpEntry = null;
exports.getZeroTrustDlpEntryOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDlpEntry", "getZeroTrustDlpEntryOutput"], () => require("./getZeroTrustDlpEntry"));
exports.getZeroTrustDlpPredefinedProfile = null;
exports.getZeroTrustDlpPredefinedProfileOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDlpPredefinedProfile", "getZeroTrustDlpPredefinedProfileOutput"], () => require("./getZeroTrustDlpPredefinedProfile"));
exports.getZeroTrustDnsLocation = null;
exports.getZeroTrustDnsLocationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDnsLocation", "getZeroTrustDnsLocationOutput"], () => require("./getZeroTrustDnsLocation"));
exports.getZeroTrustDnsLocations = null;
exports.getZeroTrustDnsLocationsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustDnsLocations", "getZeroTrustDnsLocationsOutput"], () => require("./getZeroTrustDnsLocations"));
exports.getZeroTrustGatewayAppTypesList = null;
exports.getZeroTrustGatewayAppTypesListOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayAppTypesList", "getZeroTrustGatewayAppTypesListOutput"], () => require("./getZeroTrustGatewayAppTypesList"));
exports.getZeroTrustGatewayCategoriesList = null;
exports.getZeroTrustGatewayCategoriesListOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayCategoriesList", "getZeroTrustGatewayCategoriesListOutput"], () => require("./getZeroTrustGatewayCategoriesList"));
exports.getZeroTrustGatewayCertificate = null;
exports.getZeroTrustGatewayCertificateOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayCertificate", "getZeroTrustGatewayCertificateOutput"], () => require("./getZeroTrustGatewayCertificate"));
exports.getZeroTrustGatewayCertificates = null;
exports.getZeroTrustGatewayCertificatesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayCertificates", "getZeroTrustGatewayCertificatesOutput"], () => require("./getZeroTrustGatewayCertificates"));
exports.getZeroTrustGatewayLogging = null;
exports.getZeroTrustGatewayLoggingOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayLogging", "getZeroTrustGatewayLoggingOutput"], () => require("./getZeroTrustGatewayLogging"));
exports.getZeroTrustGatewayPolicies = null;
exports.getZeroTrustGatewayPoliciesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayPolicies", "getZeroTrustGatewayPoliciesOutput"], () => require("./getZeroTrustGatewayPolicies"));
exports.getZeroTrustGatewayPolicy = null;
exports.getZeroTrustGatewayPolicyOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayPolicy", "getZeroTrustGatewayPolicyOutput"], () => require("./getZeroTrustGatewayPolicy"));
exports.getZeroTrustGatewayProxyEndpoint = null;
exports.getZeroTrustGatewayProxyEndpointOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewayProxyEndpoint", "getZeroTrustGatewayProxyEndpointOutput"], () => require("./getZeroTrustGatewayProxyEndpoint"));
exports.getZeroTrustGatewaySettings = null;
exports.getZeroTrustGatewaySettingsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustGatewaySettings", "getZeroTrustGatewaySettingsOutput"], () => require("./getZeroTrustGatewaySettings"));
exports.getZeroTrustList = null;
exports.getZeroTrustListOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustList", "getZeroTrustListOutput"], () => require("./getZeroTrustList"));
exports.getZeroTrustLists = null;
exports.getZeroTrustListsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustLists", "getZeroTrustListsOutput"], () => require("./getZeroTrustLists"));
exports.getZeroTrustOrganization = null;
exports.getZeroTrustOrganizationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustOrganization", "getZeroTrustOrganizationOutput"], () => require("./getZeroTrustOrganization"));
exports.getZeroTrustRiskBehavior = null;
exports.getZeroTrustRiskBehaviorOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustRiskBehavior", "getZeroTrustRiskBehaviorOutput"], () => require("./getZeroTrustRiskBehavior"));
exports.getZeroTrustRiskScoringIntegration = null;
exports.getZeroTrustRiskScoringIntegrationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustRiskScoringIntegration", "getZeroTrustRiskScoringIntegrationOutput"], () => require("./getZeroTrustRiskScoringIntegration"));
exports.getZeroTrustRiskScoringIntegrations = null;
exports.getZeroTrustRiskScoringIntegrationsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustRiskScoringIntegrations", "getZeroTrustRiskScoringIntegrationsOutput"], () => require("./getZeroTrustRiskScoringIntegrations"));
exports.getZeroTrustTunnelCloudflared = null;
exports.getZeroTrustTunnelCloudflaredOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflared", "getZeroTrustTunnelCloudflaredOutput"], () => require("./getZeroTrustTunnelCloudflared"));
exports.getZeroTrustTunnelCloudflaredConfig = null;
exports.getZeroTrustTunnelCloudflaredConfigOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflaredConfig", "getZeroTrustTunnelCloudflaredConfigOutput"], () => require("./getZeroTrustTunnelCloudflaredConfig"));
exports.getZeroTrustTunnelCloudflaredRoute = null;
exports.getZeroTrustTunnelCloudflaredRouteOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflaredRoute", "getZeroTrustTunnelCloudflaredRouteOutput"], () => require("./getZeroTrustTunnelCloudflaredRoute"));
exports.getZeroTrustTunnelCloudflaredRoutes = null;
exports.getZeroTrustTunnelCloudflaredRoutesOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflaredRoutes", "getZeroTrustTunnelCloudflaredRoutesOutput"], () => require("./getZeroTrustTunnelCloudflaredRoutes"));
exports.getZeroTrustTunnelCloudflaredToken = null;
exports.getZeroTrustTunnelCloudflaredTokenOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflaredToken", "getZeroTrustTunnelCloudflaredTokenOutput"], () => require("./getZeroTrustTunnelCloudflaredToken"));
exports.getZeroTrustTunnelCloudflaredVirtualNetwork = null;
exports.getZeroTrustTunnelCloudflaredVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflaredVirtualNetwork", "getZeroTrustTunnelCloudflaredVirtualNetworkOutput"], () => require("./getZeroTrustTunnelCloudflaredVirtualNetwork"));
exports.getZeroTrustTunnelCloudflaredVirtualNetworks = null;
exports.getZeroTrustTunnelCloudflaredVirtualNetworksOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflaredVirtualNetworks", "getZeroTrustTunnelCloudflaredVirtualNetworksOutput"], () => require("./getZeroTrustTunnelCloudflaredVirtualNetworks"));
exports.getZeroTrustTunnelCloudflareds = null;
exports.getZeroTrustTunnelCloudflaredsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflareds", "getZeroTrustTunnelCloudflaredsOutput"], () => require("./getZeroTrustTunnelCloudflareds"));
exports.getZeroTrustTunnelWarpConnector = null;
exports.getZeroTrustTunnelWarpConnectorOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelWarpConnector", "getZeroTrustTunnelWarpConnectorOutput"], () => require("./getZeroTrustTunnelWarpConnector"));
exports.getZeroTrustTunnelWarpConnectorToken = null;
exports.getZeroTrustTunnelWarpConnectorTokenOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelWarpConnectorToken", "getZeroTrustTunnelWarpConnectorTokenOutput"], () => require("./getZeroTrustTunnelWarpConnectorToken"));
exports.getZeroTrustTunnelWarpConnectors = null;
exports.getZeroTrustTunnelWarpConnectorsOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelWarpConnectors", "getZeroTrustTunnelWarpConnectorsOutput"], () => require("./getZeroTrustTunnelWarpConnectors"));
exports.getZone = null;
exports.getZoneOutput = null;
utilities.lazyLoad(exports, ["getZone", "getZoneOutput"], () => require("./getZone"));
exports.getZoneCacheReserve = null;
exports.getZoneCacheReserveOutput = null;
utilities.lazyLoad(exports, ["getZoneCacheReserve", "getZoneCacheReserveOutput"], () => require("./getZoneCacheReserve"));
exports.getZoneCacheVariants = null;
exports.getZoneCacheVariantsOutput = null;
utilities.lazyLoad(exports, ["getZoneCacheVariants", "getZoneCacheVariantsOutput"], () => require("./getZoneCacheVariants"));
exports.getZoneDnsSettings = null;
exports.getZoneDnsSettingsOutput = null;
utilities.lazyLoad(exports, ["getZoneDnsSettings", "getZoneDnsSettingsOutput"], () => require("./getZoneDnsSettings"));
exports.getZoneDnssec = null;
exports.getZoneDnssecOutput = null;
utilities.lazyLoad(exports, ["getZoneDnssec", "getZoneDnssecOutput"], () => require("./getZoneDnssec"));
exports.getZoneHold = null;
exports.getZoneHoldOutput = null;
utilities.lazyLoad(exports, ["getZoneHold", "getZoneHoldOutput"], () => require("./getZoneHold"));
exports.getZoneLockdown = null;
exports.getZoneLockdownOutput = null;
utilities.lazyLoad(exports, ["getZoneLockdown", "getZoneLockdownOutput"], () => require("./getZoneLockdown"));
exports.getZoneLockdowns = null;
exports.getZoneLockdownsOutput = null;
utilities.lazyLoad(exports, ["getZoneLockdowns", "getZoneLockdownsOutput"], () => require("./getZoneLockdowns"));
exports.getZoneSetting = null;
exports.getZoneSettingOutput = null;
utilities.lazyLoad(exports, ["getZoneSetting", "getZoneSettingOutput"], () => require("./getZoneSetting"));
exports.getZoneSubscription = null;
exports.getZoneSubscriptionOutput = null;
utilities.lazyLoad(exports, ["getZoneSubscription", "getZoneSubscriptionOutput"], () => require("./getZoneSubscription"));
exports.getZones = null;
exports.getZonesOutput = null;
utilities.lazyLoad(exports, ["getZones", "getZonesOutput"], () => require("./getZones"));
exports.Healthcheck = null;
utilities.lazyLoad(exports, ["Healthcheck"], () => require("./healthcheck"));
exports.HostnameTlsSetting = null;
utilities.lazyLoad(exports, ["HostnameTlsSetting"], () => require("./hostnameTlsSetting"));
exports.HyperdriveConfig = null;
utilities.lazyLoad(exports, ["HyperdriveConfig"], () => require("./hyperdriveConfig"));
exports.Image = null;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));
exports.ImageVariant = null;
utilities.lazyLoad(exports, ["ImageVariant"], () => require("./imageVariant"));
exports.KeylessCertificate = null;
utilities.lazyLoad(exports, ["KeylessCertificate"], () => require("./keylessCertificate"));
exports.LeakedCredentialCheck = null;
utilities.lazyLoad(exports, ["LeakedCredentialCheck"], () => require("./leakedCredentialCheck"));
exports.LeakedCredentialCheckRule = null;
utilities.lazyLoad(exports, ["LeakedCredentialCheckRule"], () => require("./leakedCredentialCheckRule"));
exports.List = null;
utilities.lazyLoad(exports, ["List"], () => require("./list"));
exports.ListItem = null;
utilities.lazyLoad(exports, ["ListItem"], () => require("./listItem"));
exports.LoadBalancer = null;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
exports.LoadBalancerMonitor = null;
utilities.lazyLoad(exports, ["LoadBalancerMonitor"], () => require("./loadBalancerMonitor"));
exports.LoadBalancerPool = null;
utilities.lazyLoad(exports, ["LoadBalancerPool"], () => require("./loadBalancerPool"));
exports.LogpullRetention = null;
utilities.lazyLoad(exports, ["LogpullRetention"], () => require("./logpullRetention"));
exports.LogpushJob = null;
utilities.lazyLoad(exports, ["LogpushJob"], () => require("./logpushJob"));
exports.LogpushOwnershipChallenge = null;
utilities.lazyLoad(exports, ["LogpushOwnershipChallenge"], () => require("./logpushOwnershipChallenge"));
exports.MagicNetworkMonitoringConfiguration = null;
utilities.lazyLoad(exports, ["MagicNetworkMonitoringConfiguration"], () => require("./magicNetworkMonitoringConfiguration"));
exports.MagicNetworkMonitoringRule = null;
utilities.lazyLoad(exports, ["MagicNetworkMonitoringRule"], () => require("./magicNetworkMonitoringRule"));
exports.MagicTransitConnector = null;
utilities.lazyLoad(exports, ["MagicTransitConnector"], () => require("./magicTransitConnector"));
exports.MagicTransitSite = null;
utilities.lazyLoad(exports, ["MagicTransitSite"], () => require("./magicTransitSite"));
exports.MagicTransitSiteAcl = null;
utilities.lazyLoad(exports, ["MagicTransitSiteAcl"], () => require("./magicTransitSiteAcl"));
exports.MagicTransitSiteLan = null;
utilities.lazyLoad(exports, ["MagicTransitSiteLan"], () => require("./magicTransitSiteLan"));
exports.MagicTransitSiteWan = null;
utilities.lazyLoad(exports, ["MagicTransitSiteWan"], () => require("./magicTransitSiteWan"));
exports.MagicWanGreTunnel = null;
utilities.lazyLoad(exports, ["MagicWanGreTunnel"], () => require("./magicWanGreTunnel"));
exports.MagicWanIpsecTunnel = null;
utilities.lazyLoad(exports, ["MagicWanIpsecTunnel"], () => require("./magicWanIpsecTunnel"));
exports.MagicWanStaticRoute = null;
utilities.lazyLoad(exports, ["MagicWanStaticRoute"], () => require("./magicWanStaticRoute"));
exports.ManagedHeaders = null;
utilities.lazyLoad(exports, ["ManagedHeaders"], () => require("./managedHeaders"));
exports.ManagedTransforms = null;
utilities.lazyLoad(exports, ["ManagedTransforms"], () => require("./managedTransforms"));
exports.MtlsCertificate = null;
utilities.lazyLoad(exports, ["MtlsCertificate"], () => require("./mtlsCertificate"));
exports.NotificationPolicy = null;
utilities.lazyLoad(exports, ["NotificationPolicy"], () => require("./notificationPolicy"));
exports.NotificationPolicyWebhooks = null;
utilities.lazyLoad(exports, ["NotificationPolicyWebhooks"], () => require("./notificationPolicyWebhooks"));
exports.ObservatoryScheduledTest = null;
utilities.lazyLoad(exports, ["ObservatoryScheduledTest"], () => require("./observatoryScheduledTest"));
exports.OriginCaCertificate = null;
utilities.lazyLoad(exports, ["OriginCaCertificate"], () => require("./originCaCertificate"));
exports.PageRule = null;
utilities.lazyLoad(exports, ["PageRule"], () => require("./pageRule"));
exports.PageShieldPolicy = null;
utilities.lazyLoad(exports, ["PageShieldPolicy"], () => require("./pageShieldPolicy"));
exports.PagesDomain = null;
utilities.lazyLoad(exports, ["PagesDomain"], () => require("./pagesDomain"));
exports.PagesProject = null;
utilities.lazyLoad(exports, ["PagesProject"], () => require("./pagesProject"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.Queue = null;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));
exports.QueueConsumer = null;
utilities.lazyLoad(exports, ["QueueConsumer"], () => require("./queueConsumer"));
exports.R2Bucket = null;
utilities.lazyLoad(exports, ["R2Bucket"], () => require("./r2bucket"));
exports.R2BucketCors = null;
utilities.lazyLoad(exports, ["R2BucketCors"], () => require("./r2bucketCors"));
exports.R2BucketEventNotification = null;
utilities.lazyLoad(exports, ["R2BucketEventNotification"], () => require("./r2bucketEventNotification"));
exports.R2BucketLifecycle = null;
utilities.lazyLoad(exports, ["R2BucketLifecycle"], () => require("./r2bucketLifecycle"));
exports.R2BucketLock = null;
utilities.lazyLoad(exports, ["R2BucketLock"], () => require("./r2bucketLock"));
exports.R2BucketSippy = null;
utilities.lazyLoad(exports, ["R2BucketSippy"], () => require("./r2bucketSippy"));
exports.R2CustomDomain = null;
utilities.lazyLoad(exports, ["R2CustomDomain"], () => require("./r2customDomain"));
exports.R2ManagedDomain = null;
utilities.lazyLoad(exports, ["R2ManagedDomain"], () => require("./r2managedDomain"));
exports.RateLimit = null;
utilities.lazyLoad(exports, ["RateLimit"], () => require("./rateLimit"));
exports.Record = null;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));
exports.RegionalHostname = null;
utilities.lazyLoad(exports, ["RegionalHostname"], () => require("./regionalHostname"));
exports.RegionalTieredCache = null;
utilities.lazyLoad(exports, ["RegionalTieredCache"], () => require("./regionalTieredCache"));
exports.RegistrarDomain = null;
utilities.lazyLoad(exports, ["RegistrarDomain"], () => require("./registrarDomain"));
exports.RiskBehavior = null;
utilities.lazyLoad(exports, ["RiskBehavior"], () => require("./riskBehavior"));
exports.Ruleset = null;
utilities.lazyLoad(exports, ["Ruleset"], () => require("./ruleset"));
exports.SchemaValidationOperationSettings = null;
utilities.lazyLoad(exports, ["SchemaValidationOperationSettings"], () => require("./schemaValidationOperationSettings"));
exports.SchemaValidationSchemas = null;
utilities.lazyLoad(exports, ["SchemaValidationSchemas"], () => require("./schemaValidationSchemas"));
exports.SchemaValidationSettings = null;
utilities.lazyLoad(exports, ["SchemaValidationSettings"], () => require("./schemaValidationSettings"));
exports.SnippetRules = null;
utilities.lazyLoad(exports, ["SnippetRules"], () => require("./snippetRules"));
exports.Snippets = null;
utilities.lazyLoad(exports, ["Snippets"], () => require("./snippets"));
exports.SpectrumApplication = null;
utilities.lazyLoad(exports, ["SpectrumApplication"], () => require("./spectrumApplication"));
exports.StaticRoute = null;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));
exports.Stream = null;
utilities.lazyLoad(exports, ["Stream"], () => require("./stream"));
exports.StreamAudioTrack = null;
utilities.lazyLoad(exports, ["StreamAudioTrack"], () => require("./streamAudioTrack"));
exports.StreamCaptionLanguage = null;
utilities.lazyLoad(exports, ["StreamCaptionLanguage"], () => require("./streamCaptionLanguage"));
exports.StreamDownload = null;
utilities.lazyLoad(exports, ["StreamDownload"], () => require("./streamDownload"));
exports.StreamKey = null;
utilities.lazyLoad(exports, ["StreamKey"], () => require("./streamKey"));
exports.StreamLiveInput = null;
utilities.lazyLoad(exports, ["StreamLiveInput"], () => require("./streamLiveInput"));
exports.StreamWatermark = null;
utilities.lazyLoad(exports, ["StreamWatermark"], () => require("./streamWatermark"));
exports.StreamWebhook = null;
utilities.lazyLoad(exports, ["StreamWebhook"], () => require("./streamWebhook"));
exports.TeamsAccount = null;
utilities.lazyLoad(exports, ["TeamsAccount"], () => require("./teamsAccount"));
exports.TeamsList = null;
utilities.lazyLoad(exports, ["TeamsList"], () => require("./teamsList"));
exports.TeamsLocation = null;
utilities.lazyLoad(exports, ["TeamsLocation"], () => require("./teamsLocation"));
exports.TeamsProxyEndpoint = null;
utilities.lazyLoad(exports, ["TeamsProxyEndpoint"], () => require("./teamsProxyEndpoint"));
exports.TeamsRule = null;
utilities.lazyLoad(exports, ["TeamsRule"], () => require("./teamsRule"));
exports.TieredCache = null;
utilities.lazyLoad(exports, ["TieredCache"], () => require("./tieredCache"));
exports.TotalTls = null;
utilities.lazyLoad(exports, ["TotalTls"], () => require("./totalTls"));
exports.Tunnel = null;
utilities.lazyLoad(exports, ["Tunnel"], () => require("./tunnel"));
exports.TunnelConfig = null;
utilities.lazyLoad(exports, ["TunnelConfig"], () => require("./tunnelConfig"));
exports.TunnelRoute = null;
utilities.lazyLoad(exports, ["TunnelRoute"], () => require("./tunnelRoute"));
exports.TunnelVirtualNetwork = null;
utilities.lazyLoad(exports, ["TunnelVirtualNetwork"], () => require("./tunnelVirtualNetwork"));
exports.TurnstileWidget = null;
utilities.lazyLoad(exports, ["TurnstileWidget"], () => require("./turnstileWidget"));
exports.UrlNormalizationSettings = null;
utilities.lazyLoad(exports, ["UrlNormalizationSettings"], () => require("./urlNormalizationSettings"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.UserAgentBlockingRule = null;
utilities.lazyLoad(exports, ["UserAgentBlockingRule"], () => require("./userAgentBlockingRule"));
exports.WaitingRoom = null;
utilities.lazyLoad(exports, ["WaitingRoom"], () => require("./waitingRoom"));
exports.WaitingRoomEvent = null;
utilities.lazyLoad(exports, ["WaitingRoomEvent"], () => require("./waitingRoomEvent"));
exports.WaitingRoomRules = null;
utilities.lazyLoad(exports, ["WaitingRoomRules"], () => require("./waitingRoomRules"));
exports.WaitingRoomSettings = null;
utilities.lazyLoad(exports, ["WaitingRoomSettings"], () => require("./waitingRoomSettings"));
exports.Web3Hostname = null;
utilities.lazyLoad(exports, ["Web3Hostname"], () => require("./web3Hostname"));
exports.WebAnalyticsRule = null;
utilities.lazyLoad(exports, ["WebAnalyticsRule"], () => require("./webAnalyticsRule"));
exports.WebAnalyticsSite = null;
utilities.lazyLoad(exports, ["WebAnalyticsSite"], () => require("./webAnalyticsSite"));
exports.WorkerCronTrigger = null;
utilities.lazyLoad(exports, ["WorkerCronTrigger"], () => require("./workerCronTrigger"));
exports.WorkerDomain = null;
utilities.lazyLoad(exports, ["WorkerDomain"], () => require("./workerDomain"));
exports.WorkerScript = null;
utilities.lazyLoad(exports, ["WorkerScript"], () => require("./workerScript"));
exports.WorkersCronTrigger = null;
utilities.lazyLoad(exports, ["WorkersCronTrigger"], () => require("./workersCronTrigger"));
exports.WorkersCustomDomain = null;
utilities.lazyLoad(exports, ["WorkersCustomDomain"], () => require("./workersCustomDomain"));
exports.WorkersDeployment = null;
utilities.lazyLoad(exports, ["WorkersDeployment"], () => require("./workersDeployment"));
exports.WorkersForPlatformsDispatchNamespace = null;
utilities.lazyLoad(exports, ["WorkersForPlatformsDispatchNamespace"], () => require("./workersForPlatformsDispatchNamespace"));
exports.WorkersForPlatformsNamespace = null;
utilities.lazyLoad(exports, ["WorkersForPlatformsNamespace"], () => require("./workersForPlatformsNamespace"));
exports.WorkersKv = null;
utilities.lazyLoad(exports, ["WorkersKv"], () => require("./workersKv"));
exports.WorkersKvNamespace = null;
utilities.lazyLoad(exports, ["WorkersKvNamespace"], () => require("./workersKvNamespace"));
exports.WorkersRoute = null;
utilities.lazyLoad(exports, ["WorkersRoute"], () => require("./workersRoute"));
exports.WorkersScript = null;
utilities.lazyLoad(exports, ["WorkersScript"], () => require("./workersScript"));
exports.WorkersScriptSubdomain = null;
utilities.lazyLoad(exports, ["WorkersScriptSubdomain"], () => require("./workersScriptSubdomain"));
exports.ZeroTrustAccessApplication = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessApplication"], () => require("./zeroTrustAccessApplication"));
exports.ZeroTrustAccessCustomPage = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessCustomPage"], () => require("./zeroTrustAccessCustomPage"));
exports.ZeroTrustAccessGroup = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessGroup"], () => require("./zeroTrustAccessGroup"));
exports.ZeroTrustAccessIdentityProvider = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessIdentityProvider"], () => require("./zeroTrustAccessIdentityProvider"));
exports.ZeroTrustAccessInfrastructureTarget = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessInfrastructureTarget"], () => require("./zeroTrustAccessInfrastructureTarget"));
exports.ZeroTrustAccessKeyConfiguration = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessKeyConfiguration"], () => require("./zeroTrustAccessKeyConfiguration"));
exports.ZeroTrustAccessMtlsCertificate = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessMtlsCertificate"], () => require("./zeroTrustAccessMtlsCertificate"));
exports.ZeroTrustAccessMtlsHostnameSettings = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessMtlsHostnameSettings"], () => require("./zeroTrustAccessMtlsHostnameSettings"));
exports.ZeroTrustAccessPolicy = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessPolicy"], () => require("./zeroTrustAccessPolicy"));
exports.ZeroTrustAccessServiceToken = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessServiceToken"], () => require("./zeroTrustAccessServiceToken"));
exports.ZeroTrustAccessShortLivedCertificate = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessShortLivedCertificate"], () => require("./zeroTrustAccessShortLivedCertificate"));
exports.ZeroTrustAccessTag = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessTag"], () => require("./zeroTrustAccessTag"));
exports.ZeroTrustDeviceCustomProfile = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceCustomProfile"], () => require("./zeroTrustDeviceCustomProfile"));
exports.ZeroTrustDeviceCustomProfileLocalDomainFallback = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceCustomProfileLocalDomainFallback"], () => require("./zeroTrustDeviceCustomProfileLocalDomainFallback"));
exports.ZeroTrustDeviceDefaultProfile = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceDefaultProfile"], () => require("./zeroTrustDeviceDefaultProfile"));
exports.ZeroTrustDeviceDefaultProfileCertificates = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceDefaultProfileCertificates"], () => require("./zeroTrustDeviceDefaultProfileCertificates"));
exports.ZeroTrustDeviceDefaultProfileLocalDomainFallback = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceDefaultProfileLocalDomainFallback"], () => require("./zeroTrustDeviceDefaultProfileLocalDomainFallback"));
exports.ZeroTrustDeviceManagedNetworks = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceManagedNetworks"], () => require("./zeroTrustDeviceManagedNetworks"));
exports.ZeroTrustDevicePostureIntegration = null;
utilities.lazyLoad(exports, ["ZeroTrustDevicePostureIntegration"], () => require("./zeroTrustDevicePostureIntegration"));
exports.ZeroTrustDevicePostureRule = null;
utilities.lazyLoad(exports, ["ZeroTrustDevicePostureRule"], () => require("./zeroTrustDevicePostureRule"));
exports.ZeroTrustDeviceSettings = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceSettings"], () => require("./zeroTrustDeviceSettings"));
exports.ZeroTrustDexTest = null;
utilities.lazyLoad(exports, ["ZeroTrustDexTest"], () => require("./zeroTrustDexTest"));
exports.ZeroTrustDlpCustomEntry = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpCustomEntry"], () => require("./zeroTrustDlpCustomEntry"));
exports.ZeroTrustDlpCustomProfile = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpCustomProfile"], () => require("./zeroTrustDlpCustomProfile"));
exports.ZeroTrustDlpDataset = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpDataset"], () => require("./zeroTrustDlpDataset"));
exports.ZeroTrustDlpEntry = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpEntry"], () => require("./zeroTrustDlpEntry"));
exports.ZeroTrustDlpIntegrationEntry = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpIntegrationEntry"], () => require("./zeroTrustDlpIntegrationEntry"));
exports.ZeroTrustDlpPredefinedEntry = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpPredefinedEntry"], () => require("./zeroTrustDlpPredefinedEntry"));
exports.ZeroTrustDlpPredefinedProfile = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpPredefinedProfile"], () => require("./zeroTrustDlpPredefinedProfile"));
exports.ZeroTrustDnsLocation = null;
utilities.lazyLoad(exports, ["ZeroTrustDnsLocation"], () => require("./zeroTrustDnsLocation"));
exports.ZeroTrustGatewayCertificate = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewayCertificate"], () => require("./zeroTrustGatewayCertificate"));
exports.ZeroTrustGatewayLogging = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewayLogging"], () => require("./zeroTrustGatewayLogging"));
exports.ZeroTrustGatewayPolicy = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewayPolicy"], () => require("./zeroTrustGatewayPolicy"));
exports.ZeroTrustGatewayProxyEndpoint = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewayProxyEndpoint"], () => require("./zeroTrustGatewayProxyEndpoint"));
exports.ZeroTrustGatewaySettings = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewaySettings"], () => require("./zeroTrustGatewaySettings"));
exports.ZeroTrustList = null;
utilities.lazyLoad(exports, ["ZeroTrustList"], () => require("./zeroTrustList"));
exports.ZeroTrustLocalFallbackDomain = null;
utilities.lazyLoad(exports, ["ZeroTrustLocalFallbackDomain"], () => require("./zeroTrustLocalFallbackDomain"));
exports.ZeroTrustOrganization = null;
utilities.lazyLoad(exports, ["ZeroTrustOrganization"], () => require("./zeroTrustOrganization"));
exports.ZeroTrustRiskBehavior = null;
utilities.lazyLoad(exports, ["ZeroTrustRiskBehavior"], () => require("./zeroTrustRiskBehavior"));
exports.ZeroTrustRiskScoringIntegration = null;
utilities.lazyLoad(exports, ["ZeroTrustRiskScoringIntegration"], () => require("./zeroTrustRiskScoringIntegration"));
exports.ZeroTrustTunnelCloudflared = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelCloudflared"], () => require("./zeroTrustTunnelCloudflared"));
exports.ZeroTrustTunnelCloudflaredConfig = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelCloudflaredConfig"], () => require("./zeroTrustTunnelCloudflaredConfig"));
exports.ZeroTrustTunnelCloudflaredRoute = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelCloudflaredRoute"], () => require("./zeroTrustTunnelCloudflaredRoute"));
exports.ZeroTrustTunnelCloudflaredVirtualNetwork = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelCloudflaredVirtualNetwork"], () => require("./zeroTrustTunnelCloudflaredVirtualNetwork"));
exports.ZeroTrustTunnelWarpConnector = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelWarpConnector"], () => require("./zeroTrustTunnelWarpConnector"));
exports.Zone = null;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
exports.ZoneCacheReserve = null;
utilities.lazyLoad(exports, ["ZoneCacheReserve"], () => require("./zoneCacheReserve"));
exports.ZoneCacheVariants = null;
utilities.lazyLoad(exports, ["ZoneCacheVariants"], () => require("./zoneCacheVariants"));
exports.ZoneDnsSettings = null;
utilities.lazyLoad(exports, ["ZoneDnsSettings"], () => require("./zoneDnsSettings"));
exports.ZoneDnssec = null;
utilities.lazyLoad(exports, ["ZoneDnssec"], () => require("./zoneDnssec"));
exports.ZoneHold = null;
utilities.lazyLoad(exports, ["ZoneHold"], () => require("./zoneHold"));
exports.ZoneLockdown = null;
utilities.lazyLoad(exports, ["ZoneLockdown"], () => require("./zoneLockdown"));
exports.ZoneSetting = null;
utilities.lazyLoad(exports, ["ZoneSetting"], () => require("./zoneSetting"));
exports.ZoneSubscription = null;
utilities.lazyLoad(exports, ["ZoneSubscription"], () => require("./zoneSubscription"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "cloudflare:index/accessApplication:AccessApplication":
                return new exports.AccessApplication(name, undefined, { urn });
            case "cloudflare:index/accessCaCertificate:AccessCaCertificate":
                return new exports.AccessCaCertificate(name, undefined, { urn });
            case "cloudflare:index/accessCustomPage:AccessCustomPage":
                return new exports.AccessCustomPage(name, undefined, { urn });
            case "cloudflare:index/accessGroup:AccessGroup":
                return new exports.AccessGroup(name, undefined, { urn });
            case "cloudflare:index/accessIdentityProvider:AccessIdentityProvider":
                return new exports.AccessIdentityProvider(name, undefined, { urn });
            case "cloudflare:index/accessKeysConfiguration:AccessKeysConfiguration":
                return new exports.AccessKeysConfiguration(name, undefined, { urn });
            case "cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate":
                return new exports.AccessMutualTlsCertificate(name, undefined, { urn });
            case "cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings":
                return new exports.AccessMutualTlsHostnameSettings(name, undefined, { urn });
            case "cloudflare:index/accessOrganization:AccessOrganization":
                return new exports.AccessOrganization(name, undefined, { urn });
            case "cloudflare:index/accessPolicy:AccessPolicy":
                return new exports.AccessPolicy(name, undefined, { urn });
            case "cloudflare:index/accessRule:AccessRule":
                return new exports.AccessRule(name, undefined, { urn });
            case "cloudflare:index/accessServiceToken:AccessServiceToken":
                return new exports.AccessServiceToken(name, undefined, { urn });
            case "cloudflare:index/accessTag:AccessTag":
                return new exports.AccessTag(name, undefined, { urn });
            case "cloudflare:index/account:Account":
                return new exports.Account(name, undefined, { urn });
            case "cloudflare:index/accountDnsSettings:AccountDnsSettings":
                return new exports.AccountDnsSettings(name, undefined, { urn });
            case "cloudflare:index/accountDnsSettingsInternalView:AccountDnsSettingsInternalView":
                return new exports.AccountDnsSettingsInternalView(name, undefined, { urn });
            case "cloudflare:index/accountMember:AccountMember":
                return new exports.AccountMember(name, undefined, { urn });
            case "cloudflare:index/accountSubscription:AccountSubscription":
                return new exports.AccountSubscription(name, undefined, { urn });
            case "cloudflare:index/accountToken:AccountToken":
                return new exports.AccountToken(name, undefined, { urn });
            case "cloudflare:index/addressMap:AddressMap":
                return new exports.AddressMap(name, undefined, { urn });
            case "cloudflare:index/apiShield:ApiShield":
                return new exports.ApiShield(name, undefined, { urn });
            case "cloudflare:index/apiShieldDiscoveryOperation:ApiShieldDiscoveryOperation":
                return new exports.ApiShieldDiscoveryOperation(name, undefined, { urn });
            case "cloudflare:index/apiShieldOperation:ApiShieldOperation":
                return new exports.ApiShieldOperation(name, undefined, { urn });
            case "cloudflare:index/apiShieldOperationSchemaValidationSettings:ApiShieldOperationSchemaValidationSettings":
                return new exports.ApiShieldOperationSchemaValidationSettings(name, undefined, { urn });
            case "cloudflare:index/apiShieldSchema:ApiShieldSchema":
                return new exports.ApiShieldSchema(name, undefined, { urn });
            case "cloudflare:index/apiShieldSchemaValidationSettings:ApiShieldSchemaValidationSettings":
                return new exports.ApiShieldSchemaValidationSettings(name, undefined, { urn });
            case "cloudflare:index/apiToken:ApiToken":
                return new exports.ApiToken(name, undefined, { urn });
            case "cloudflare:index/argoSmartRouting:ArgoSmartRouting":
                return new exports.ArgoSmartRouting(name, undefined, { urn });
            case "cloudflare:index/argoTieredCaching:ArgoTieredCaching":
                return new exports.ArgoTieredCaching(name, undefined, { urn });
            case "cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls":
                return new exports.AuthenticatedOriginPulls(name, undefined, { urn });
            case "cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate":
                return new exports.AuthenticatedOriginPullsCertificate(name, undefined, { urn });
            case "cloudflare:index/authenticatedOriginPullsSettings:AuthenticatedOriginPullsSettings":
                return new exports.AuthenticatedOriginPullsSettings(name, undefined, { urn });
            case "cloudflare:index/botManagement:BotManagement":
                return new exports.BotManagement(name, undefined, { urn });
            case "cloudflare:index/byoIpPrefix:ByoIpPrefix":
                return new exports.ByoIpPrefix(name, undefined, { urn });
            case "cloudflare:index/callsSfuApp:CallsSfuApp":
                return new exports.CallsSfuApp(name, undefined, { urn });
            case "cloudflare:index/callsTurnApp:CallsTurnApp":
                return new exports.CallsTurnApp(name, undefined, { urn });
            case "cloudflare:index/certificatePack:CertificatePack":
                return new exports.CertificatePack(name, undefined, { urn });
            case "cloudflare:index/cloudConnectorRules:CloudConnectorRules":
                return new exports.CloudConnectorRules(name, undefined, { urn });
            case "cloudflare:index/cloudforceOneRequest:CloudforceOneRequest":
                return new exports.CloudforceOneRequest(name, undefined, { urn });
            case "cloudflare:index/cloudforceOneRequestAsset:CloudforceOneRequestAsset":
                return new exports.CloudforceOneRequestAsset(name, undefined, { urn });
            case "cloudflare:index/cloudforceOneRequestMessage:CloudforceOneRequestMessage":
                return new exports.CloudforceOneRequestMessage(name, undefined, { urn });
            case "cloudflare:index/cloudforceOneRequestPriority:CloudforceOneRequestPriority":
                return new exports.CloudforceOneRequestPriority(name, undefined, { urn });
            case "cloudflare:index/contentScanningExpression:ContentScanningExpression":
                return new exports.ContentScanningExpression(name, undefined, { urn });
            case "cloudflare:index/customHostname:CustomHostname":
                return new exports.CustomHostname(name, undefined, { urn });
            case "cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin":
                return new exports.CustomHostnameFallbackOrigin(name, undefined, { urn });
            case "cloudflare:index/customPages:CustomPages":
                return new exports.CustomPages(name, undefined, { urn });
            case "cloudflare:index/customSsl:CustomSsl":
                return new exports.CustomSsl(name, undefined, { urn });
            case "cloudflare:index/d1Database:D1Database":
                return new exports.D1Database(name, undefined, { urn });
            case "cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks":
                return new exports.DeviceManagedNetworks(name, undefined, { urn });
            case "cloudflare:index/devicePostureIntegration:DevicePostureIntegration":
                return new exports.DevicePostureIntegration(name, undefined, { urn });
            case "cloudflare:index/devicePostureRule:DevicePostureRule":
                return new exports.DevicePostureRule(name, undefined, { urn });
            case "cloudflare:index/dlpCustomProfile:DlpCustomProfile":
                return new exports.DlpCustomProfile(name, undefined, { urn });
            case "cloudflare:index/dlpPredefinedProfile:DlpPredefinedProfile":
                return new exports.DlpPredefinedProfile(name, undefined, { urn });
            case "cloudflare:index/dnsFirewall:DnsFirewall":
                return new exports.DnsFirewall(name, undefined, { urn });
            case "cloudflare:index/dnsRecord:DnsRecord":
                return new exports.DnsRecord(name, undefined, { urn });
            case "cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl":
                return new exports.DnsZoneTransfersAcl(name, undefined, { urn });
            case "cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming":
                return new exports.DnsZoneTransfersIncoming(name, undefined, { urn });
            case "cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing":
                return new exports.DnsZoneTransfersOutgoing(name, undefined, { urn });
            case "cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer":
                return new exports.DnsZoneTransfersPeer(name, undefined, { urn });
            case "cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig":
                return new exports.DnsZoneTransfersTsig(name, undefined, { urn });
            case "cloudflare:index/emailRoutingAddress:EmailRoutingAddress":
                return new exports.EmailRoutingAddress(name, undefined, { urn });
            case "cloudflare:index/emailRoutingCatchAll:EmailRoutingCatchAll":
                return new exports.EmailRoutingCatchAll(name, undefined, { urn });
            case "cloudflare:index/emailRoutingDns:EmailRoutingDns":
                return new exports.EmailRoutingDns(name, undefined, { urn });
            case "cloudflare:index/emailRoutingRule:EmailRoutingRule":
                return new exports.EmailRoutingRule(name, undefined, { urn });
            case "cloudflare:index/emailRoutingSettings:EmailRoutingSettings":
                return new exports.EmailRoutingSettings(name, undefined, { urn });
            case "cloudflare:index/emailSecurityBlockSender:EmailSecurityBlockSender":
                return new exports.EmailSecurityBlockSender(name, undefined, { urn });
            case "cloudflare:index/emailSecurityImpersonationRegistry:EmailSecurityImpersonationRegistry":
                return new exports.EmailSecurityImpersonationRegistry(name, undefined, { urn });
            case "cloudflare:index/emailSecurityTrustedDomains:EmailSecurityTrustedDomains":
                return new exports.EmailSecurityTrustedDomains(name, undefined, { urn });
            case "cloudflare:index/filter:Filter":
                return new exports.Filter(name, undefined, { urn });
            case "cloudflare:index/firewallRule:FirewallRule":
                return new exports.FirewallRule(name, undefined, { urn });
            case "cloudflare:index/healthcheck:Healthcheck":
                return new exports.Healthcheck(name, undefined, { urn });
            case "cloudflare:index/hostnameTlsSetting:HostnameTlsSetting":
                return new exports.HostnameTlsSetting(name, undefined, { urn });
            case "cloudflare:index/hyperdriveConfig:HyperdriveConfig":
                return new exports.HyperdriveConfig(name, undefined, { urn });
            case "cloudflare:index/image:Image":
                return new exports.Image(name, undefined, { urn });
            case "cloudflare:index/imageVariant:ImageVariant":
                return new exports.ImageVariant(name, undefined, { urn });
            case "cloudflare:index/keylessCertificate:KeylessCertificate":
                return new exports.KeylessCertificate(name, undefined, { urn });
            case "cloudflare:index/leakedCredentialCheck:LeakedCredentialCheck":
                return new exports.LeakedCredentialCheck(name, undefined, { urn });
            case "cloudflare:index/leakedCredentialCheckRule:LeakedCredentialCheckRule":
                return new exports.LeakedCredentialCheckRule(name, undefined, { urn });
            case "cloudflare:index/list:List":
                return new exports.List(name, undefined, { urn });
            case "cloudflare:index/listItem:ListItem":
                return new exports.ListItem(name, undefined, { urn });
            case "cloudflare:index/loadBalancer:LoadBalancer":
                return new exports.LoadBalancer(name, undefined, { urn });
            case "cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor":
                return new exports.LoadBalancerMonitor(name, undefined, { urn });
            case "cloudflare:index/loadBalancerPool:LoadBalancerPool":
                return new exports.LoadBalancerPool(name, undefined, { urn });
            case "cloudflare:index/logpullRetention:LogpullRetention":
                return new exports.LogpullRetention(name, undefined, { urn });
            case "cloudflare:index/logpushJob:LogpushJob":
                return new exports.LogpushJob(name, undefined, { urn });
            case "cloudflare:index/logpushOwnershipChallenge:LogpushOwnershipChallenge":
                return new exports.LogpushOwnershipChallenge(name, undefined, { urn });
            case "cloudflare:index/magicNetworkMonitoringConfiguration:MagicNetworkMonitoringConfiguration":
                return new exports.MagicNetworkMonitoringConfiguration(name, undefined, { urn });
            case "cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule":
                return new exports.MagicNetworkMonitoringRule(name, undefined, { urn });
            case "cloudflare:index/magicTransitConnector:MagicTransitConnector":
                return new exports.MagicTransitConnector(name, undefined, { urn });
            case "cloudflare:index/magicTransitSite:MagicTransitSite":
                return new exports.MagicTransitSite(name, undefined, { urn });
            case "cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl":
                return new exports.MagicTransitSiteAcl(name, undefined, { urn });
            case "cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan":
                return new exports.MagicTransitSiteLan(name, undefined, { urn });
            case "cloudflare:index/magicTransitSiteWan:MagicTransitSiteWan":
                return new exports.MagicTransitSiteWan(name, undefined, { urn });
            case "cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel":
                return new exports.MagicWanGreTunnel(name, undefined, { urn });
            case "cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel":
                return new exports.MagicWanIpsecTunnel(name, undefined, { urn });
            case "cloudflare:index/magicWanStaticRoute:MagicWanStaticRoute":
                return new exports.MagicWanStaticRoute(name, undefined, { urn });
            case "cloudflare:index/managedHeaders:ManagedHeaders":
                return new exports.ManagedHeaders(name, undefined, { urn });
            case "cloudflare:index/managedTransforms:ManagedTransforms":
                return new exports.ManagedTransforms(name, undefined, { urn });
            case "cloudflare:index/mtlsCertificate:MtlsCertificate":
                return new exports.MtlsCertificate(name, undefined, { urn });
            case "cloudflare:index/notificationPolicy:NotificationPolicy":
                return new exports.NotificationPolicy(name, undefined, { urn });
            case "cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks":
                return new exports.NotificationPolicyWebhooks(name, undefined, { urn });
            case "cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest":
                return new exports.ObservatoryScheduledTest(name, undefined, { urn });
            case "cloudflare:index/originCaCertificate:OriginCaCertificate":
                return new exports.OriginCaCertificate(name, undefined, { urn });
            case "cloudflare:index/pageRule:PageRule":
                return new exports.PageRule(name, undefined, { urn });
            case "cloudflare:index/pageShieldPolicy:PageShieldPolicy":
                return new exports.PageShieldPolicy(name, undefined, { urn });
            case "cloudflare:index/pagesDomain:PagesDomain":
                return new exports.PagesDomain(name, undefined, { urn });
            case "cloudflare:index/pagesProject:PagesProject":
                return new exports.PagesProject(name, undefined, { urn });
            case "cloudflare:index/queue:Queue":
                return new exports.Queue(name, undefined, { urn });
            case "cloudflare:index/queueConsumer:QueueConsumer":
                return new exports.QueueConsumer(name, undefined, { urn });
            case "cloudflare:index/r2Bucket:R2Bucket":
                return new exports.R2Bucket(name, undefined, { urn });
            case "cloudflare:index/r2BucketCors:R2BucketCors":
                return new exports.R2BucketCors(name, undefined, { urn });
            case "cloudflare:index/r2BucketEventNotification:R2BucketEventNotification":
                return new exports.R2BucketEventNotification(name, undefined, { urn });
            case "cloudflare:index/r2BucketLifecycle:R2BucketLifecycle":
                return new exports.R2BucketLifecycle(name, undefined, { urn });
            case "cloudflare:index/r2BucketLock:R2BucketLock":
                return new exports.R2BucketLock(name, undefined, { urn });
            case "cloudflare:index/r2BucketSippy:R2BucketSippy":
                return new exports.R2BucketSippy(name, undefined, { urn });
            case "cloudflare:index/r2CustomDomain:R2CustomDomain":
                return new exports.R2CustomDomain(name, undefined, { urn });
            case "cloudflare:index/r2ManagedDomain:R2ManagedDomain":
                return new exports.R2ManagedDomain(name, undefined, { urn });
            case "cloudflare:index/rateLimit:RateLimit":
                return new exports.RateLimit(name, undefined, { urn });
            case "cloudflare:index/record:Record":
                return new exports.Record(name, undefined, { urn });
            case "cloudflare:index/regionalHostname:RegionalHostname":
                return new exports.RegionalHostname(name, undefined, { urn });
            case "cloudflare:index/regionalTieredCache:RegionalTieredCache":
                return new exports.RegionalTieredCache(name, undefined, { urn });
            case "cloudflare:index/registrarDomain:RegistrarDomain":
                return new exports.RegistrarDomain(name, undefined, { urn });
            case "cloudflare:index/riskBehavior:RiskBehavior":
                return new exports.RiskBehavior(name, undefined, { urn });
            case "cloudflare:index/ruleset:Ruleset":
                return new exports.Ruleset(name, undefined, { urn });
            case "cloudflare:index/schemaValidationOperationSettings:SchemaValidationOperationSettings":
                return new exports.SchemaValidationOperationSettings(name, undefined, { urn });
            case "cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas":
                return new exports.SchemaValidationSchemas(name, undefined, { urn });
            case "cloudflare:index/schemaValidationSettings:SchemaValidationSettings":
                return new exports.SchemaValidationSettings(name, undefined, { urn });
            case "cloudflare:index/snippetRules:SnippetRules":
                return new exports.SnippetRules(name, undefined, { urn });
            case "cloudflare:index/snippets:Snippets":
                return new exports.Snippets(name, undefined, { urn });
            case "cloudflare:index/spectrumApplication:SpectrumApplication":
                return new exports.SpectrumApplication(name, undefined, { urn });
            case "cloudflare:index/staticRoute:StaticRoute":
                return new exports.StaticRoute(name, undefined, { urn });
            case "cloudflare:index/stream:Stream":
                return new exports.Stream(name, undefined, { urn });
            case "cloudflare:index/streamAudioTrack:StreamAudioTrack":
                return new exports.StreamAudioTrack(name, undefined, { urn });
            case "cloudflare:index/streamCaptionLanguage:StreamCaptionLanguage":
                return new exports.StreamCaptionLanguage(name, undefined, { urn });
            case "cloudflare:index/streamDownload:StreamDownload":
                return new exports.StreamDownload(name, undefined, { urn });
            case "cloudflare:index/streamKey:StreamKey":
                return new exports.StreamKey(name, undefined, { urn });
            case "cloudflare:index/streamLiveInput:StreamLiveInput":
                return new exports.StreamLiveInput(name, undefined, { urn });
            case "cloudflare:index/streamWatermark:StreamWatermark":
                return new exports.StreamWatermark(name, undefined, { urn });
            case "cloudflare:index/streamWebhook:StreamWebhook":
                return new exports.StreamWebhook(name, undefined, { urn });
            case "cloudflare:index/teamsAccount:TeamsAccount":
                return new exports.TeamsAccount(name, undefined, { urn });
            case "cloudflare:index/teamsList:TeamsList":
                return new exports.TeamsList(name, undefined, { urn });
            case "cloudflare:index/teamsLocation:TeamsLocation":
                return new exports.TeamsLocation(name, undefined, { urn });
            case "cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint":
                return new exports.TeamsProxyEndpoint(name, undefined, { urn });
            case "cloudflare:index/teamsRule:TeamsRule":
                return new exports.TeamsRule(name, undefined, { urn });
            case "cloudflare:index/tieredCache:TieredCache":
                return new exports.TieredCache(name, undefined, { urn });
            case "cloudflare:index/totalTls:TotalTls":
                return new exports.TotalTls(name, undefined, { urn });
            case "cloudflare:index/tunnel:Tunnel":
                return new exports.Tunnel(name, undefined, { urn });
            case "cloudflare:index/tunnelConfig:TunnelConfig":
                return new exports.TunnelConfig(name, undefined, { urn });
            case "cloudflare:index/tunnelRoute:TunnelRoute":
                return new exports.TunnelRoute(name, undefined, { urn });
            case "cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork":
                return new exports.TunnelVirtualNetwork(name, undefined, { urn });
            case "cloudflare:index/turnstileWidget:TurnstileWidget":
                return new exports.TurnstileWidget(name, undefined, { urn });
            case "cloudflare:index/urlNormalizationSettings:UrlNormalizationSettings":
                return new exports.UrlNormalizationSettings(name, undefined, { urn });
            case "cloudflare:index/user:User":
                return new exports.User(name, undefined, { urn });
            case "cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule":
                return new exports.UserAgentBlockingRule(name, undefined, { urn });
            case "cloudflare:index/waitingRoom:WaitingRoom":
                return new exports.WaitingRoom(name, undefined, { urn });
            case "cloudflare:index/waitingRoomEvent:WaitingRoomEvent":
                return new exports.WaitingRoomEvent(name, undefined, { urn });
            case "cloudflare:index/waitingRoomRules:WaitingRoomRules":
                return new exports.WaitingRoomRules(name, undefined, { urn });
            case "cloudflare:index/waitingRoomSettings:WaitingRoomSettings":
                return new exports.WaitingRoomSettings(name, undefined, { urn });
            case "cloudflare:index/web3Hostname:Web3Hostname":
                return new exports.Web3Hostname(name, undefined, { urn });
            case "cloudflare:index/webAnalyticsRule:WebAnalyticsRule":
                return new exports.WebAnalyticsRule(name, undefined, { urn });
            case "cloudflare:index/webAnalyticsSite:WebAnalyticsSite":
                return new exports.WebAnalyticsSite(name, undefined, { urn });
            case "cloudflare:index/workerCronTrigger:WorkerCronTrigger":
                return new exports.WorkerCronTrigger(name, undefined, { urn });
            case "cloudflare:index/workerDomain:WorkerDomain":
                return new exports.WorkerDomain(name, undefined, { urn });
            case "cloudflare:index/workerScript:WorkerScript":
                return new exports.WorkerScript(name, undefined, { urn });
            case "cloudflare:index/workersCronTrigger:WorkersCronTrigger":
                return new exports.WorkersCronTrigger(name, undefined, { urn });
            case "cloudflare:index/workersCustomDomain:WorkersCustomDomain":
                return new exports.WorkersCustomDomain(name, undefined, { urn });
            case "cloudflare:index/workersDeployment:WorkersDeployment":
                return new exports.WorkersDeployment(name, undefined, { urn });
            case "cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace":
                return new exports.WorkersForPlatformsDispatchNamespace(name, undefined, { urn });
            case "cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace":
                return new exports.WorkersForPlatformsNamespace(name, undefined, { urn });
            case "cloudflare:index/workersKv:WorkersKv":
                return new exports.WorkersKv(name, undefined, { urn });
            case "cloudflare:index/workersKvNamespace:WorkersKvNamespace":
                return new exports.WorkersKvNamespace(name, undefined, { urn });
            case "cloudflare:index/workersRoute:WorkersRoute":
                return new exports.WorkersRoute(name, undefined, { urn });
            case "cloudflare:index/workersScript:WorkersScript":
                return new exports.WorkersScript(name, undefined, { urn });
            case "cloudflare:index/workersScriptSubdomain:WorkersScriptSubdomain":
                return new exports.WorkersScriptSubdomain(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessApplication:ZeroTrustAccessApplication":
                return new exports.ZeroTrustAccessApplication(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessCustomPage:ZeroTrustAccessCustomPage":
                return new exports.ZeroTrustAccessCustomPage(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup":
                return new exports.ZeroTrustAccessGroup(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider":
                return new exports.ZeroTrustAccessIdentityProvider(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessInfrastructureTarget:ZeroTrustAccessInfrastructureTarget":
                return new exports.ZeroTrustAccessInfrastructureTarget(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessKeyConfiguration:ZeroTrustAccessKeyConfiguration":
                return new exports.ZeroTrustAccessKeyConfiguration(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate":
                return new exports.ZeroTrustAccessMtlsCertificate(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessMtlsHostnameSettings:ZeroTrustAccessMtlsHostnameSettings":
                return new exports.ZeroTrustAccessMtlsHostnameSettings(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy":
                return new exports.ZeroTrustAccessPolicy(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken":
                return new exports.ZeroTrustAccessServiceToken(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate":
                return new exports.ZeroTrustAccessShortLivedCertificate(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessTag:ZeroTrustAccessTag":
                return new exports.ZeroTrustAccessTag(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceCustomProfile:ZeroTrustDeviceCustomProfile":
                return new exports.ZeroTrustDeviceCustomProfile(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceCustomProfileLocalDomainFallback:ZeroTrustDeviceCustomProfileLocalDomainFallback":
                return new exports.ZeroTrustDeviceCustomProfileLocalDomainFallback(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceDefaultProfile:ZeroTrustDeviceDefaultProfile":
                return new exports.ZeroTrustDeviceDefaultProfile(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceDefaultProfileCertificates:ZeroTrustDeviceDefaultProfileCertificates":
                return new exports.ZeroTrustDeviceDefaultProfileCertificates(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceDefaultProfileLocalDomainFallback:ZeroTrustDeviceDefaultProfileLocalDomainFallback":
                return new exports.ZeroTrustDeviceDefaultProfileLocalDomainFallback(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceManagedNetworks:ZeroTrustDeviceManagedNetworks":
                return new exports.ZeroTrustDeviceManagedNetworks(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDevicePostureIntegration:ZeroTrustDevicePostureIntegration":
                return new exports.ZeroTrustDevicePostureIntegration(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDevicePostureRule:ZeroTrustDevicePostureRule":
                return new exports.ZeroTrustDevicePostureRule(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceSettings:ZeroTrustDeviceSettings":
                return new exports.ZeroTrustDeviceSettings(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest":
                return new exports.ZeroTrustDexTest(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpCustomEntry:ZeroTrustDlpCustomEntry":
                return new exports.ZeroTrustDlpCustomEntry(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpCustomProfile:ZeroTrustDlpCustomProfile":
                return new exports.ZeroTrustDlpCustomProfile(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpDataset:ZeroTrustDlpDataset":
                return new exports.ZeroTrustDlpDataset(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpEntry:ZeroTrustDlpEntry":
                return new exports.ZeroTrustDlpEntry(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpIntegrationEntry:ZeroTrustDlpIntegrationEntry":
                return new exports.ZeroTrustDlpIntegrationEntry(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpPredefinedEntry:ZeroTrustDlpPredefinedEntry":
                return new exports.ZeroTrustDlpPredefinedEntry(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpPredefinedProfile:ZeroTrustDlpPredefinedProfile":
                return new exports.ZeroTrustDlpPredefinedProfile(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation":
                return new exports.ZeroTrustDnsLocation(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate":
                return new exports.ZeroTrustGatewayCertificate(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewayLogging:ZeroTrustGatewayLogging":
                return new exports.ZeroTrustGatewayLogging(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy":
                return new exports.ZeroTrustGatewayPolicy(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewayProxyEndpoint:ZeroTrustGatewayProxyEndpoint":
                return new exports.ZeroTrustGatewayProxyEndpoint(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings":
                return new exports.ZeroTrustGatewaySettings(name, undefined, { urn });
            case "cloudflare:index/zeroTrustList:ZeroTrustList":
                return new exports.ZeroTrustList(name, undefined, { urn });
            case "cloudflare:index/zeroTrustLocalFallbackDomain:ZeroTrustLocalFallbackDomain":
                return new exports.ZeroTrustLocalFallbackDomain(name, undefined, { urn });
            case "cloudflare:index/zeroTrustOrganization:ZeroTrustOrganization":
                return new exports.ZeroTrustOrganization(name, undefined, { urn });
            case "cloudflare:index/zeroTrustRiskBehavior:ZeroTrustRiskBehavior":
                return new exports.ZeroTrustRiskBehavior(name, undefined, { urn });
            case "cloudflare:index/zeroTrustRiskScoringIntegration:ZeroTrustRiskScoringIntegration":
                return new exports.ZeroTrustRiskScoringIntegration(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelCloudflared:ZeroTrustTunnelCloudflared":
                return new exports.ZeroTrustTunnelCloudflared(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig":
                return new exports.ZeroTrustTunnelCloudflaredConfig(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute":
                return new exports.ZeroTrustTunnelCloudflaredRoute(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelCloudflaredVirtualNetwork:ZeroTrustTunnelCloudflaredVirtualNetwork":
                return new exports.ZeroTrustTunnelCloudflaredVirtualNetwork(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelWarpConnector:ZeroTrustTunnelWarpConnector":
                return new exports.ZeroTrustTunnelWarpConnector(name, undefined, { urn });
            case "cloudflare:index/zone:Zone":
                return new exports.Zone(name, undefined, { urn });
            case "cloudflare:index/zoneCacheReserve:ZoneCacheReserve":
                return new exports.ZoneCacheReserve(name, undefined, { urn });
            case "cloudflare:index/zoneCacheVariants:ZoneCacheVariants":
                return new exports.ZoneCacheVariants(name, undefined, { urn });
            case "cloudflare:index/zoneDnsSettings:ZoneDnsSettings":
                return new exports.ZoneDnsSettings(name, undefined, { urn });
            case "cloudflare:index/zoneDnssec:ZoneDnssec":
                return new exports.ZoneDnssec(name, undefined, { urn });
            case "cloudflare:index/zoneHold:ZoneHold":
                return new exports.ZoneHold(name, undefined, { urn });
            case "cloudflare:index/zoneLockdown:ZoneLockdown":
                return new exports.ZoneLockdown(name, undefined, { urn });
            case "cloudflare:index/zoneSetting:ZoneSetting":
                return new exports.ZoneSetting(name, undefined, { urn });
            case "cloudflare:index/zoneSubscription:ZoneSubscription":
                return new exports.ZoneSubscription(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudflare", "index/accessApplication", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessCaCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessCustomPage", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessGroup", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessIdentityProvider", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessKeysConfiguration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessMutualTlsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessMutualTlsHostnameSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessOrganization", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessServiceToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessTag", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/account", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accountDnsSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accountDnsSettingsInternalView", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accountMember", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accountSubscription", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accountToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/addressMap", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShield", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldDiscoveryOperation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldOperation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldOperationSchemaValidationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldSchema", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldSchemaValidationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/argoSmartRouting", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/argoTieredCaching", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPulls", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPullsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPullsSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/botManagement", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/byoIpPrefix", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/callsSfuApp", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/callsTurnApp", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/certificatePack", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/cloudConnectorRules", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/cloudforceOneRequest", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/cloudforceOneRequestAsset", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/cloudforceOneRequestMessage", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/cloudforceOneRequestPriority", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/contentScanningExpression", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostname", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostnameFallbackOrigin", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customPages", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customSsl", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/d1Database", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceManagedNetworks", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePostureIntegration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePostureRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dlpCustomProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dlpPredefinedProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsFirewall", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsRecord", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsZoneTransfersAcl", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsZoneTransfersIncoming", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsZoneTransfersOutgoing", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsZoneTransfersPeer", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dnsZoneTransfersTsig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingAddress", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingCatchAll", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingDns", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailSecurityBlockSender", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailSecurityImpersonationRegistry", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailSecurityTrustedDomains", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/filter", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/firewallRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/healthcheck", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/hostnameTlsSetting", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/hyperdriveConfig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/image", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/imageVariant", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/keylessCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/leakedCredentialCheck", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/leakedCredentialCheckRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/list", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/listItem", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancer", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerMonitor", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerPool", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/logpullRetention", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushJob", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushOwnershipChallenge", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicNetworkMonitoringConfiguration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicNetworkMonitoringRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicTransitConnector", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicTransitSite", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicTransitSiteAcl", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicTransitSiteLan", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicTransitSiteWan", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicWanGreTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicWanIpsecTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicWanStaticRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/managedHeaders", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/managedTransforms", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/mtlsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/notificationPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/notificationPolicyWebhooks", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/observatoryScheduledTest", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/originCaCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pageRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pageShieldPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pagesDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pagesProject", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/queue", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/queueConsumer", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2Bucket", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2BucketCors", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2BucketEventNotification", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2BucketLifecycle", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2BucketLock", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2BucketSippy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2CustomDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2ManagedDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/rateLimit", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/record", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/regionalHostname", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/regionalTieredCache", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/registrarDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/riskBehavior", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/ruleset", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/schemaValidationOperationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/schemaValidationSchemas", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/schemaValidationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/snippetRules", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/snippets", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/spectrumApplication", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/staticRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/stream", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamAudioTrack", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamCaptionLanguage", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamDownload", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamKey", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamLiveInput", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamWatermark", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/streamWebhook", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsAccount", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsList", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsLocation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsProxyEndpoint", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tieredCache", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/totalTls", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelConfig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelVirtualNetwork", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/turnstileWidget", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/urlNormalizationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/user", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/userAgentBlockingRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoom", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomEvent", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomRules", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/web3Hostname", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/webAnalyticsRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/webAnalyticsSite", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerCronTrigger", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerScript", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersCronTrigger", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersCustomDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersDeployment", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersForPlatformsDispatchNamespace", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersForPlatformsNamespace", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKv", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKvNamespace", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersScript", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersScriptSubdomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessApplication", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessCustomPage", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessGroup", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessIdentityProvider", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessInfrastructureTarget", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessKeyConfiguration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessMtlsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessMtlsHostnameSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessServiceToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessShortLivedCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessTag", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceCustomProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceCustomProfileLocalDomainFallback", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceDefaultProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceDefaultProfileCertificates", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceDefaultProfileLocalDomainFallback", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceManagedNetworks", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDevicePostureIntegration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDevicePostureRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDexTest", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpCustomEntry", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpCustomProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpDataset", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpEntry", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpIntegrationEntry", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpPredefinedEntry", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpPredefinedProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDnsLocation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewayCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewayLogging", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewayPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewayProxyEndpoint", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewaySettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustList", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustLocalFallbackDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustOrganization", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustRiskBehavior", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustRiskScoringIntegration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelCloudflared", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelCloudflaredConfig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelCloudflaredRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelCloudflaredVirtualNetwork", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelWarpConnector", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zone", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneCacheReserve", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneCacheVariants", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneDnsSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneDnssec", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneHold", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneLockdown", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneSetting", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneSubscription", _module);
pulumi.runtime.registerResourcePackage("cloudflare", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:cloudflare") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map