"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerDomain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersCustomDomain = new cloudflare.WorkersCustomDomain("example_workers_custom_domain", {
 *     accountId: "9a7806061c88ada191ed06f989cc3dac",
 *     environment: "production",
 *     hostname: "foo.example.com",
 *     service: "foo",
 *     zoneId: "593c9c94de529bbbfaac7c53ced0447d",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerDomain:WorkerDomain example '<account_id>/<domain_id>'
 * ```
 *
 * @deprecated cloudflare.index/workerdomain.WorkerDomain has been deprecated in favor of cloudflare.index/workerscustomdomain.WorkersCustomDomain
 */
class WorkerDomain extends pulumi.CustomResource {
    /**
     * Get an existing WorkerDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("WorkerDomain is deprecated: cloudflare.index/workerdomain.WorkerDomain has been deprecated in favor of cloudflare.index/workerscustomdomain.WorkersCustomDomain");
        return new WorkerDomain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkerDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerDomain.__pulumiType;
    }
    /** @deprecated cloudflare.index/workerdomain.WorkerDomain has been deprecated in favor of cloudflare.index/workerscustomdomain.WorkersCustomDomain */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("WorkerDomain is deprecated: cloudflare.index/workerdomain.WorkerDomain has been deprecated in favor of cloudflare.index/workerscustomdomain.WorkersCustomDomain");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["zoneName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/workerDomain:WorkerDomain" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WorkerDomain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkerDomain = WorkerDomain;
/** @internal */
WorkerDomain.__pulumiType = 'cloudflare:index/workerDomain:WorkerDomain';
//# sourceMappingURL=workerDomain.js.map