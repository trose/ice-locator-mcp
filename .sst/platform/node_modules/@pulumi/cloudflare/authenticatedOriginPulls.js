"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatedOriginPulls = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 */
class AuthenticatedOriginPulls extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticatedOriginPulls resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AuthenticatedOriginPulls(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AuthenticatedOriginPulls.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticatedOriginPulls.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["certStatus"] = state ? state.certStatus : undefined;
            resourceInputs["certUpdatedAt"] = state ? state.certUpdatedAt : undefined;
            resourceInputs["certUploadedOn"] = state ? state.certUploadedOn : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiresOn"] = state ? state.expiresOn : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["certId"] = undefined /*out*/;
            resourceInputs["certStatus"] = undefined /*out*/;
            resourceInputs["certUpdatedAt"] = undefined /*out*/;
            resourceInputs["certUploadedOn"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["expiresOn"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["signature"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthenticatedOriginPulls.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AuthenticatedOriginPulls = AuthenticatedOriginPulls;
/** @internal */
AuthenticatedOriginPulls.__pulumiType = 'cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls';
//# sourceMappingURL=authenticatedOriginPulls.js.map