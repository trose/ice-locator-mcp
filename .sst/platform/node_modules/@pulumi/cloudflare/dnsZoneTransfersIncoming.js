"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsZoneTransfersIncoming = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsZoneTransfersIncoming = new cloudflare.DnsZoneTransfersIncoming("example_dns_zone_transfers_incoming", {
 *     zoneId: "269d8f4853475ca241c4e730be286b20",
 *     autoRefreshSeconds: 86400,
 *     name: "www.example.com.",
 *     peers: [
 *         "23ff594956f20c2a721606e94745a8aa",
 *         "00920f38ce07c2e2f4df50b1f61d4194",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming example '<zone_id>'
 * ```
 */
class DnsZoneTransfersIncoming extends pulumi.CustomResource {
    /**
     * Get an existing DnsZoneTransfersIncoming resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DnsZoneTransfersIncoming(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DnsZoneTransfersIncoming.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZoneTransfersIncoming.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoRefreshSeconds"] = state ? state.autoRefreshSeconds : undefined;
            resourceInputs["checkedTime"] = state ? state.checkedTime : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["modifiedTime"] = state ? state.modifiedTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
            resourceInputs["soaSerial"] = state ? state.soaSerial : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.autoRefreshSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoRefreshSeconds'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.peers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peers'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["autoRefreshSeconds"] = args ? args.autoRefreshSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["checkedTime"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["modifiedTime"] = undefined /*out*/;
            resourceInputs["soaSerial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZoneTransfersIncoming.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DnsZoneTransfersIncoming = DnsZoneTransfersIncoming;
/** @internal */
DnsZoneTransfersIncoming.__pulumiType = 'cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming';
//# sourceMappingURL=dnsZoneTransfersIncoming.js.map