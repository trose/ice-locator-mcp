"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroTrustDlpPredefinedProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustDlpPredefinedProfile = new cloudflare.ZeroTrustDlpPredefinedProfile("example_zero_trust_dlp_predefined_profile", {
 *     accountId: "account_id",
 *     profileId: "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
 *     aiContextEnabled: true,
 *     allowedMatchCount: 5,
 *     confidenceThreshold: "confidence_threshold",
 *     contextAwareness: {
 *         enabled: true,
 *         skip: {
 *             files: true,
 *         },
 *     },
 *     entries: [{
 *         id: "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
 *         enabled: true,
 *     }],
 *     ocrEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustDlpPredefinedProfile:ZeroTrustDlpPredefinedProfile example '<account_id>/<profile_id>'
 * ```
 */
class ZeroTrustDlpPredefinedProfile extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustDlpPredefinedProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZeroTrustDlpPredefinedProfile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZeroTrustDlpPredefinedProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustDlpPredefinedProfile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["aiContextEnabled"] = state ? state.aiContextEnabled : undefined;
            resourceInputs["allowedMatchCount"] = state ? state.allowedMatchCount : undefined;
            resourceInputs["confidenceThreshold"] = state ? state.confidenceThreshold : undefined;
            resourceInputs["contextAwareness"] = state ? state.contextAwareness : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entries"] = state ? state.entries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocrEnabled"] = state ? state.ocrEnabled : undefined;
            resourceInputs["openAccess"] = state ? state.openAccess : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["aiContextEnabled"] = args ? args.aiContextEnabled : undefined;
            resourceInputs["allowedMatchCount"] = args ? args.allowedMatchCount : undefined;
            resourceInputs["confidenceThreshold"] = args ? args.confidenceThreshold : undefined;
            resourceInputs["contextAwareness"] = args ? args.contextAwareness : undefined;
            resourceInputs["entries"] = args ? args.entries : undefined;
            resourceInputs["ocrEnabled"] = args ? args.ocrEnabled : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["openAccess"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/dlpPredefinedProfile:DlpPredefinedProfile" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustDlpPredefinedProfile.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZeroTrustDlpPredefinedProfile = ZeroTrustDlpPredefinedProfile;
/** @internal */
ZeroTrustDlpPredefinedProfile.__pulumiType = 'cloudflare:index/zeroTrustDlpPredefinedProfile:ZeroTrustDlpPredefinedProfile';
//# sourceMappingURL=zeroTrustDlpPredefinedProfile.js.map