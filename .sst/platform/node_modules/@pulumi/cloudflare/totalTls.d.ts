import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleTotalTls = new cloudflare.TotalTls("example_total_tls", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     enabled: true,
 *     certificateAuthority: "google",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/totalTls:TotalTls example '<zone_id>'
 * ```
 */
export declare class TotalTls extends pulumi.CustomResource {
    /**
     * Get an existing TotalTls resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TotalTlsState, opts?: pulumi.CustomResourceOptions): TotalTls;
    /**
     * Returns true if the given object is an instance of TotalTls.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TotalTls;
    /**
     * The Certificate Authority that Total TLS certificates will be issued through.
     * Available values: "google", "lets*encrypt", "ssl*com".
     */
    readonly certificateAuthority: pulumi.Output<string | undefined>;
    /**
     * If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
     */
    readonly enabled: pulumi.Output<boolean>;
    /**
     * The validity period in days for the certificates ordered via Total TLS.
     * Available values: 90.
     */
    readonly validityPeriod: pulumi.Output<number>;
    /**
     * Identifier.
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Create a TotalTls resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TotalTlsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TotalTls resources.
 */
export interface TotalTlsState {
    /**
     * The Certificate Authority that Total TLS certificates will be issued through.
     * Available values: "google", "lets*encrypt", "ssl*com".
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The validity period in days for the certificates ordered via Total TLS.
     * Available values: 90.
     */
    validityPeriod?: pulumi.Input<number>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a TotalTls resource.
 */
export interface TotalTlsArgs {
    /**
     * The Certificate Authority that Total TLS certificates will be issued through.
     * Available values: "google", "lets*encrypt", "ssl*com".
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
