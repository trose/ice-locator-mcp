import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneLockdown = cloudflare.getZoneLockdown({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     lockDownsId: "372e67954025e0ba6aaa6d586b9e0b59",
 * });
 * ```
 */
export declare function getZoneLockdown(args: GetZoneLockdownArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneLockdownResult>;
/**
 * A collection of arguments for invoking getZoneLockdown.
 */
export interface GetZoneLockdownArgs {
    filter?: inputs.GetZoneLockdownFilter;
    /**
     * The unique identifier of the Zone Lockdown rule.
     */
    lockDownsId?: string;
    /**
     * Defines an identifier.
     */
    zoneId: string;
}
/**
 * A collection of values returned by getZoneLockdown.
 */
export interface GetZoneLockdownResult {
    /**
     * A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ipRange` configurations.
     */
    readonly configurations: outputs.GetZoneLockdownConfiguration[];
    /**
     * The timestamp of when the rule was created.
     */
    readonly createdOn: string;
    /**
     * An informative summary of the rule.
     */
    readonly description: string;
    readonly filter?: outputs.GetZoneLockdownFilter;
    /**
     * The unique identifier of the Zone Lockdown rule.
     */
    readonly id: string;
    /**
     * The unique identifier of the Zone Lockdown rule.
     */
    readonly lockDownsId?: string;
    /**
     * The timestamp of when the rule was last modified.
     */
    readonly modifiedOn: string;
    /**
     * When true, indicates that the rule is currently paused.
     */
    readonly paused: boolean;
    /**
     * The URLs to include in the rule definition. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
     */
    readonly urls: string[];
    /**
     * Defines an identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneLockdown = cloudflare.getZoneLockdown({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     lockDownsId: "372e67954025e0ba6aaa6d586b9e0b59",
 * });
 * ```
 */
export declare function getZoneLockdownOutput(args: GetZoneLockdownOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZoneLockdownResult>;
/**
 * A collection of arguments for invoking getZoneLockdown.
 */
export interface GetZoneLockdownOutputArgs {
    filter?: pulumi.Input<inputs.GetZoneLockdownFilterArgs>;
    /**
     * The unique identifier of the Zone Lockdown rule.
     */
    lockDownsId?: pulumi.Input<string>;
    /**
     * Defines an identifier.
     */
    zoneId: pulumi.Input<string>;
}
