"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example '<zone_id>/<load_balancer_id>'
 * ```
 */
class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LoadBalancer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["adaptiveRouting"] = state ? state.adaptiveRouting : undefined;
            resourceInputs["countryPools"] = state ? state.countryPools : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["defaultPools"] = state ? state.defaultPools : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fallbackPool"] = state ? state.fallbackPool : undefined;
            resourceInputs["locationStrategy"] = state ? state.locationStrategy : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["popPools"] = state ? state.popPools : undefined;
            resourceInputs["proxied"] = state ? state.proxied : undefined;
            resourceInputs["randomSteering"] = state ? state.randomSteering : undefined;
            resourceInputs["regionPools"] = state ? state.regionPools : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["sessionAffinity"] = state ? state.sessionAffinity : undefined;
            resourceInputs["sessionAffinityAttributes"] = state ? state.sessionAffinityAttributes : undefined;
            resourceInputs["sessionAffinityTtl"] = state ? state.sessionAffinityTtl : undefined;
            resourceInputs["steeringPolicy"] = state ? state.steeringPolicy : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultPools'");
            }
            if ((!args || args.fallbackPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fallbackPool'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["adaptiveRouting"] = args ? args.adaptiveRouting : undefined;
            resourceInputs["countryPools"] = args ? args.countryPools : undefined;
            resourceInputs["defaultPools"] = args ? args.defaultPools : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fallbackPool"] = args ? args.fallbackPool : undefined;
            resourceInputs["locationStrategy"] = args ? args.locationStrategy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["popPools"] = args ? args.popPools : undefined;
            resourceInputs["proxied"] = args ? args.proxied : undefined;
            resourceInputs["randomSteering"] = args ? args.randomSteering : undefined;
            resourceInputs["regionPools"] = args ? args.regionPools : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["sessionAffinity"] = args ? args.sessionAffinity : undefined;
            resourceInputs["sessionAffinityAttributes"] = args ? args.sessionAffinityAttributes : undefined;
            resourceInputs["sessionAffinityTtl"] = args ? args.sessionAffinityTtl : undefined;
            resourceInputs["steeringPolicy"] = args ? args.steeringPolicy : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["zoneName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LoadBalancer = LoadBalancer;
/** @internal */
LoadBalancer.__pulumiType = 'cloudflare:index/loadBalancer:LoadBalancer';
//# sourceMappingURL=loadBalancer.js.map