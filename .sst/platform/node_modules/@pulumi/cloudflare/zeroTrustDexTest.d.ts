import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustDexTest = new cloudflare.ZeroTrustDexTest("example_zero_trust_dex_test", {
 *     accountId: "01a7362d577a6c3019a474fd6f485823",
 *     data: {
 *         host: "https://dash.cloudflare.com",
 *         kind: "http",
 *         method: "GET",
 *     },
 *     enabled: true,
 *     interval: "30m",
 *     name: "HTTP dash health check",
 *     description: "Checks the dash endpoint every 30 minutes",
 *     targetPolicies: [{
 *         id: "id",
 *         "default": true,
 *         name: "name",
 *     }],
 *     targeted: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest example '<account_id>/<dex_test_id>'
 * ```
 */
export declare class ZeroTrustDexTest extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustDexTest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustDexTestState, opts?: pulumi.CustomResourceOptions): ZeroTrustDexTest;
    /**
     * Returns true if the given object is an instance of ZeroTrustDexTest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ZeroTrustDexTest;
    readonly accountId: pulumi.Output<string>;
    /**
     * The configuration object which contains the details for the WARP client to conduct the test.
     */
    readonly data: pulumi.Output<outputs.ZeroTrustDexTestData>;
    /**
     * Additional details about the test.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Determines whether or not the test is active.
     */
    readonly enabled: pulumi.Output<boolean>;
    /**
     * How often the test will run.
     */
    readonly interval: pulumi.Output<string>;
    /**
     * The name of the DEX test. Must be unique.
     */
    readonly name: pulumi.Output<string>;
    /**
     * DEX rules targeted by this test
     */
    readonly targetPolicies: pulumi.Output<outputs.ZeroTrustDexTestTargetPolicy[] | undefined>;
    readonly targeted: pulumi.Output<boolean | undefined>;
    /**
     * The unique identifier for the test.
     */
    readonly testId: pulumi.Output<string>;
    /**
     * Create a ZeroTrustDexTest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustDexTestArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ZeroTrustDexTest resources.
 */
export interface ZeroTrustDexTestState {
    accountId?: pulumi.Input<string>;
    /**
     * The configuration object which contains the details for the WARP client to conduct the test.
     */
    data?: pulumi.Input<inputs.ZeroTrustDexTestData>;
    /**
     * Additional details about the test.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether or not the test is active.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * How often the test will run.
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the DEX test. Must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * DEX rules targeted by this test
     */
    targetPolicies?: pulumi.Input<pulumi.Input<inputs.ZeroTrustDexTestTargetPolicy>[]>;
    targeted?: pulumi.Input<boolean>;
    /**
     * The unique identifier for the test.
     */
    testId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ZeroTrustDexTest resource.
 */
export interface ZeroTrustDexTestArgs {
    accountId: pulumi.Input<string>;
    /**
     * The configuration object which contains the details for the WARP client to conduct the test.
     */
    data: pulumi.Input<inputs.ZeroTrustDexTestData>;
    /**
     * Additional details about the test.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether or not the test is active.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * How often the test will run.
     */
    interval: pulumi.Input<string>;
    /**
     * The name of the DEX test. Must be unique.
     */
    name: pulumi.Input<string>;
    /**
     * DEX rules targeted by this test
     */
    targetPolicies?: pulumi.Input<pulumi.Input<inputs.ZeroTrustDexTestTargetPolicy>[]>;
    targeted?: pulumi.Input<boolean>;
}
