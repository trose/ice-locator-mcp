"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotManagement = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleBotManagement = new cloudflare.BotManagement("example_bot_management", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     aiBotsProtection: "block",
 *     crawlerProtection: "enabled",
 *     enableJs: true,
 *     fightMode: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/botManagement:BotManagement example '<zone_id>'
 * ```
 */
class BotManagement extends pulumi.CustomResource {
    /**
     * Get an existing BotManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BotManagement(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BotManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotManagement.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["aiBotsProtection"] = state ? state.aiBotsProtection : undefined;
            resourceInputs["autoUpdateModel"] = state ? state.autoUpdateModel : undefined;
            resourceInputs["crawlerProtection"] = state ? state.crawlerProtection : undefined;
            resourceInputs["enableJs"] = state ? state.enableJs : undefined;
            resourceInputs["fightMode"] = state ? state.fightMode : undefined;
            resourceInputs["optimizeWordpress"] = state ? state.optimizeWordpress : undefined;
            resourceInputs["sbfmDefinitelyAutomated"] = state ? state.sbfmDefinitelyAutomated : undefined;
            resourceInputs["sbfmLikelyAutomated"] = state ? state.sbfmLikelyAutomated : undefined;
            resourceInputs["sbfmStaticResourceProtection"] = state ? state.sbfmStaticResourceProtection : undefined;
            resourceInputs["sbfmVerifiedBots"] = state ? state.sbfmVerifiedBots : undefined;
            resourceInputs["staleZoneConfiguration"] = state ? state.staleZoneConfiguration : undefined;
            resourceInputs["suppressSessionScore"] = state ? state.suppressSessionScore : undefined;
            resourceInputs["usingLatestModel"] = state ? state.usingLatestModel : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["aiBotsProtection"] = args ? args.aiBotsProtection : undefined;
            resourceInputs["autoUpdateModel"] = args ? args.autoUpdateModel : undefined;
            resourceInputs["crawlerProtection"] = args ? args.crawlerProtection : undefined;
            resourceInputs["enableJs"] = args ? args.enableJs : undefined;
            resourceInputs["fightMode"] = args ? args.fightMode : undefined;
            resourceInputs["optimizeWordpress"] = args ? args.optimizeWordpress : undefined;
            resourceInputs["sbfmDefinitelyAutomated"] = args ? args.sbfmDefinitelyAutomated : undefined;
            resourceInputs["sbfmLikelyAutomated"] = args ? args.sbfmLikelyAutomated : undefined;
            resourceInputs["sbfmStaticResourceProtection"] = args ? args.sbfmStaticResourceProtection : undefined;
            resourceInputs["sbfmVerifiedBots"] = args ? args.sbfmVerifiedBots : undefined;
            resourceInputs["suppressSessionScore"] = args ? args.suppressSessionScore : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["staleZoneConfiguration"] = undefined /*out*/;
            resourceInputs["usingLatestModel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotManagement.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BotManagement = BotManagement;
/** @internal */
BotManagement.__pulumiType = 'cloudflare:index/botManagement:BotManagement';
//# sourceMappingURL=botManagement.js.map