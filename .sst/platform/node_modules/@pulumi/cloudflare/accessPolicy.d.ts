import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessPolicy:AccessPolicy example '<account_id>/<policy_id>'
 * ```
 *
 * @deprecated cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy
 */
export declare class AccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPolicyState, opts?: pulumi.CustomResourceOptions): AccessPolicy;
    /**
     * Returns true if the given object is an instance of AccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AccessPolicy;
    /**
     * Identifier.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    readonly approvalGroups: pulumi.Output<outputs.AccessPolicyApprovalGroup[] | undefined>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    readonly approvalRequired: pulumi.Output<boolean | undefined>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    readonly decision: pulumi.Output<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    readonly excludes: pulumi.Output<outputs.AccessPolicyExclude[] | undefined>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    readonly includes: pulumi.Output<outputs.AccessPolicyInclude[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    readonly isolationRequired: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Access policy.
     */
    readonly name: pulumi.Output<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    readonly purposeJustificationPrompt: pulumi.Output<string | undefined>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    readonly purposeJustificationRequired: pulumi.Output<boolean | undefined>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    readonly requires: pulumi.Output<outputs.AccessPolicyRequire[] | undefined>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    readonly sessionDuration: pulumi.Output<string>;
    /**
     * Create a AccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy */
    constructor(name: string, args: AccessPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AccessPolicy resources.
 */
export interface AccessPolicyState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.AccessPolicyApprovalGroup>[]>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    decision?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * The name of the Access policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.AccessPolicyRequire>[]>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AccessPolicy resource.
 */
export interface AccessPolicyArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.AccessPolicyApprovalGroup>[]>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    decision: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes: pulumi.Input<pulumi.Input<inputs.AccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * The name of the Access policy.
     */
    name: pulumi.Input<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.AccessPolicyRequire>[]>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
}
