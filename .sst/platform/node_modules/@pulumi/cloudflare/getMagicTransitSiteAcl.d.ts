import * as pulumi from "@pulumi/pulumi";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicTransitSiteAcl = cloudflare.getMagicTransitSiteAcl({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     siteId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     aclId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export declare function getMagicTransitSiteAcl(args: GetMagicTransitSiteAclArgs, opts?: pulumi.InvokeOptions): Promise<GetMagicTransitSiteAclResult>;
/**
 * A collection of arguments for invoking getMagicTransitSiteAcl.
 */
export interface GetMagicTransitSiteAclArgs {
    /**
     * Identifier
     */
    accountId: string;
    /**
     * Identifier
     */
    aclId?: string;
    /**
     * Identifier
     */
    siteId: string;
}
/**
 * A collection of values returned by getMagicTransitSiteAcl.
 */
export interface GetMagicTransitSiteAclResult {
    /**
     * Identifier
     */
    readonly accountId: string;
    /**
     * Identifier
     */
    readonly aclId?: string;
    /**
     * Description for the ACL.
     */
    readonly description: string;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    readonly forwardLocally: boolean;
    /**
     * Identifier
     */
    readonly id: string;
    readonly lan1: outputs.GetMagicTransitSiteAclLan1;
    readonly lan2: outputs.GetMagicTransitSiteAclLan2;
    /**
     * The name of the ACL.
     */
    readonly name: string;
    readonly protocols: string[];
    /**
     * Identifier
     */
    readonly siteId: string;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    readonly unidirectional: boolean;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicTransitSiteAcl = cloudflare.getMagicTransitSiteAcl({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     siteId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     aclId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export declare function getMagicTransitSiteAclOutput(args: GetMagicTransitSiteAclOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMagicTransitSiteAclResult>;
/**
 * A collection of arguments for invoking getMagicTransitSiteAcl.
 */
export interface GetMagicTransitSiteAclOutputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Identifier
     */
    aclId?: pulumi.Input<string>;
    /**
     * Identifier
     */
    siteId: pulumi.Input<string>;
}
