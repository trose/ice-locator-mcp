import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleImage = new cloudflare.Image("example_image", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     imageId: "id",
 *     creator: "creator",
 *     file: null,
 *     metadata: {},
 *     requireSignedUrls: true,
 *     url: "https://example.com/path/to/logo.png",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/image:Image example '<account_id>/<image_id>'
 * ```
 */
export declare class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image;
    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Image;
    /**
     * Account identifier tag.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Can set the creator field with an internal user ID.
     */
    readonly creator: pulumi.Output<string | undefined>;
    /**
     * An image binary data. Only needed when type is uploading a file.
     */
    readonly file: pulumi.Output<string | undefined>;
    /**
     * Image file name.
     */
    readonly filename: pulumi.Output<string>;
    /**
     * An optional custom unique identifier for your image.
     */
    readonly imageId: pulumi.Output<string>;
    /**
     * User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     */
    readonly meta: pulumi.Output<string>;
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     */
    readonly metadata: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the image requires a signature token for the access.
     */
    readonly requireSignedUrls: pulumi.Output<boolean>;
    /**
     * When the media item was uploaded.
     */
    readonly uploaded: pulumi.Output<string>;
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     */
    readonly url: pulumi.Output<string | undefined>;
    /**
     * Object specifying available variants for an image.
     */
    readonly variants: pulumi.Output<string[]>;
    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * Account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Can set the creator field with an internal user ID.
     */
    creator?: pulumi.Input<string>;
    /**
     * An image binary data. Only needed when type is uploading a file.
     */
    file?: pulumi.Input<string>;
    /**
     * Image file name.
     */
    filename?: pulumi.Input<string>;
    /**
     * An optional custom unique identifier for your image.
     */
    imageId?: pulumi.Input<string>;
    /**
     * User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     */
    meta?: pulumi.Input<string>;
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Indicates whether the image requires a signature token for the access.
     */
    requireSignedUrls?: pulumi.Input<boolean>;
    /**
     * When the media item was uploaded.
     */
    uploaded?: pulumi.Input<string>;
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     */
    url?: pulumi.Input<string>;
    /**
     * Object specifying available variants for an image.
     */
    variants?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * Can set the creator field with an internal user ID.
     */
    creator?: pulumi.Input<string>;
    /**
     * An image binary data. Only needed when type is uploading a file.
     */
    file?: pulumi.Input<string>;
    /**
     * An optional custom unique identifier for your image.
     */
    imageId: pulumi.Input<string>;
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Indicates whether the image requires a signature token for the access.
     */
    requireSignedUrls?: pulumi.Input<boolean>;
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     */
    url?: pulumi.Input<string>;
}
