import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 */
export declare class ZoneDnsSettings extends pulumi.CustomResource {
    /**
     * Get an existing ZoneDnsSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneDnsSettingsState, opts?: pulumi.CustomResourceOptions): ZoneDnsSettings;
    /**
     * Returns true if the given object is an instance of ZoneDnsSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ZoneDnsSettings;
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    readonly flattenAllCnames: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    readonly foundationDns: pulumi.Output<boolean | undefined>;
    /**
     * Settings for this internal zone.
     */
    readonly internalDns: pulumi.Output<outputs.ZoneDnsSettingsInternalDns | undefined>;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    readonly multiProvider: pulumi.Output<boolean | undefined>;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    readonly nameservers: pulumi.Output<outputs.ZoneDnsSettingsNameservers | undefined>;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    readonly nsTtl: pulumi.Output<number | undefined>;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    readonly secondaryOverrides: pulumi.Output<boolean | undefined>;
    /**
     * Components of the zone's SOA record.
     */
    readonly soa: pulumi.Output<outputs.ZoneDnsSettingsSoa | undefined>;
    /**
     * Identifier.
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    readonly zoneMode: pulumi.Output<string | undefined>;
    /**
     * Create a ZoneDnsSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneDnsSettingsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ZoneDnsSettings resources.
 */
export interface ZoneDnsSettingsState {
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    flattenAllCnames?: pulumi.Input<boolean>;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    foundationDns?: pulumi.Input<boolean>;
    /**
     * Settings for this internal zone.
     */
    internalDns?: pulumi.Input<inputs.ZoneDnsSettingsInternalDns>;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    multiProvider?: pulumi.Input<boolean>;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    nameservers?: pulumi.Input<inputs.ZoneDnsSettingsNameservers>;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    nsTtl?: pulumi.Input<number>;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    secondaryOverrides?: pulumi.Input<boolean>;
    /**
     * Components of the zone's SOA record.
     */
    soa?: pulumi.Input<inputs.ZoneDnsSettingsSoa>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    zoneMode?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ZoneDnsSettings resource.
 */
export interface ZoneDnsSettingsArgs {
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    flattenAllCnames?: pulumi.Input<boolean>;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    foundationDns?: pulumi.Input<boolean>;
    /**
     * Settings for this internal zone.
     */
    internalDns?: pulumi.Input<inputs.ZoneDnsSettingsInternalDns>;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    multiProvider?: pulumi.Input<boolean>;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    nameservers?: pulumi.Input<inputs.ZoneDnsSettingsNameservers>;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    nsTtl?: pulumi.Input<number>;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    secondaryOverrides?: pulumi.Input<boolean>;
    /**
     * Components of the zone's SOA record.
     */
    soa?: pulumi.Input<inputs.ZoneDnsSettingsSoa>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    zoneMode?: pulumi.Input<string>;
}
