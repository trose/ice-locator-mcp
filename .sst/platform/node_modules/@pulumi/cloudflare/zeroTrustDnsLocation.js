"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroTrustDnsLocation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustDnsLocation = new cloudflare.ZeroTrustDnsLocation("example_zero_trust_dns_location", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     name: "Austin Office Location",
 *     clientDefault: false,
 *     dnsDestinationIpsId: "0e4a32c6-6fb8-4858-9296-98f51631e8e6",
 *     ecsSupport: false,
 *     endpoints: {
 *         doh: {
 *             enabled: true,
 *             networks: [{
 *                 network: "2001:85a3::/64",
 *             }],
 *             requireToken: true,
 *         },
 *         dot: {
 *             enabled: true,
 *             networks: [{
 *                 network: "2001:85a3::/64",
 *             }],
 *         },
 *         ipv4: {
 *             enabled: true,
 *         },
 *         ipv6: {
 *             enabled: true,
 *             networks: [{
 *                 network: "2001:85a3::/64",
 *             }],
 *         },
 *     },
 *     networks: [{
 *         network: "192.0.2.1/32",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation example '<account_id>/<location_id>'
 * ```
 */
class ZeroTrustDnsLocation extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustDnsLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZeroTrustDnsLocation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZeroTrustDnsLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustDnsLocation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["clientDefault"] = state ? state.clientDefault : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dnsDestinationIpsId"] = state ? state.dnsDestinationIpsId : undefined;
            resourceInputs["dnsDestinationIpv6BlockId"] = state ? state.dnsDestinationIpv6BlockId : undefined;
            resourceInputs["dohSubdomain"] = state ? state.dohSubdomain : undefined;
            resourceInputs["ecsSupport"] = state ? state.ecsSupport : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv4Destination"] = state ? state.ipv4Destination : undefined;
            resourceInputs["ipv4DestinationBackup"] = state ? state.ipv4DestinationBackup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["clientDefault"] = args ? args.clientDefault : undefined;
            resourceInputs["dnsDestinationIpsId"] = args ? args.dnsDestinationIpsId : undefined;
            resourceInputs["ecsSupport"] = args ? args.ecsSupport : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnsDestinationIpv6BlockId"] = undefined /*out*/;
            resourceInputs["dohSubdomain"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["ipv4Destination"] = undefined /*out*/;
            resourceInputs["ipv4DestinationBackup"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/teamsLocation:TeamsLocation" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustDnsLocation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZeroTrustDnsLocation = ZeroTrustDnsLocation;
/** @internal */
ZeroTrustDnsLocation.__pulumiType = 'cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation';
//# sourceMappingURL=zeroTrustDnsLocation.js.map