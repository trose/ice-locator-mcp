"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zone = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * > If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZone = new cloudflare.Zone("example_zone", {
 *     account: {
 *         id: "023e105f4ecef8ad9ca31a8372d0c353",
 *     },
 *     name: "example.com",
 *     type: "full",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zone:Zone example '<zone_id>'
 * ```
 */
class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Zone(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["activatedOn"] = state ? state.activatedOn : undefined;
            resourceInputs["cnameSuffix"] = state ? state.cnameSuffix : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["developmentMode"] = state ? state.developmentMode : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameServers"] = state ? state.nameServers : undefined;
            resourceInputs["originalDnshost"] = state ? state.originalDnshost : undefined;
            resourceInputs["originalNameServers"] = state ? state.originalNameServers : undefined;
            resourceInputs["originalRegistrar"] = state ? state.originalRegistrar : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenant"] = state ? state.tenant : undefined;
            resourceInputs["tenantUnit"] = state ? state.tenantUnit : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vanityNameServers"] = state ? state.vanityNameServers : undefined;
            resourceInputs["verificationKey"] = state ? state.verificationKey : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vanityNameServers"] = args ? args.vanityNameServers : undefined;
            resourceInputs["activatedOn"] = undefined /*out*/;
            resourceInputs["cnameSuffix"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["developmentMode"] = undefined /*out*/;
            resourceInputs["meta"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["nameServers"] = undefined /*out*/;
            resourceInputs["originalDnshost"] = undefined /*out*/;
            resourceInputs["originalNameServers"] = undefined /*out*/;
            resourceInputs["originalRegistrar"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["plan"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tenant"] = undefined /*out*/;
            resourceInputs["tenantUnit"] = undefined /*out*/;
            resourceInputs["verificationKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Zone = Zone;
/** @internal */
Zone.__pulumiType = 'cloudflare:index/zone:Zone';
//# sourceMappingURL=zone.js.map