"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamWatermark = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStreamWatermark = new cloudflare.StreamWatermark("example_stream_watermark", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     file: "@/Users/rchen/Downloads/watermark.png",
 *     name: "Marketing Videos",
 *     opacity: 0.75,
 *     padding: 0.1,
 *     position: "center",
 *     scale: 0.1,
 * });
 * ```
 */
class StreamWatermark extends pulumi.CustomResource {
    /**
     * Get an existing StreamWatermark resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamWatermark(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamWatermark.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamWatermark.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["downloadedFrom"] = state ? state.downloadedFrom : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["height"] = state ? state.height : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["opacity"] = state ? state.opacity : undefined;
            resourceInputs["padding"] = state ? state.padding : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["scale"] = state ? state.scale : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.file === undefined) && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["opacity"] = args ? args.opacity : undefined;
            resourceInputs["padding"] = args ? args.padding : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["scale"] = args ? args.scale : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["downloadedFrom"] = undefined /*out*/;
            resourceInputs["height"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["width"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamWatermark.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StreamWatermark = StreamWatermark;
/** @internal */
StreamWatermark.__pulumiType = 'cloudflare:index/streamWatermark:StreamWatermark';
//# sourceMappingURL=streamWatermark.js.map