"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamLiveInput = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 */
class StreamLiveInput extends pulumi.CustomResource {
    /**
     * Get an existing StreamLiveInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamLiveInput(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamLiveInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamLiveInput.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["defaultCreator"] = state ? state.defaultCreator : undefined;
            resourceInputs["deleteRecordingAfterDays"] = state ? state.deleteRecordingAfterDays : undefined;
            resourceInputs["liveInputIdentifier"] = state ? state.liveInputIdentifier : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["modified"] = state ? state.modified : undefined;
            resourceInputs["recording"] = state ? state.recording : undefined;
            resourceInputs["rtmps"] = state ? state.rtmps : undefined;
            resourceInputs["rtmpsPlayback"] = state ? state.rtmpsPlayback : undefined;
            resourceInputs["srt"] = state ? state.srt : undefined;
            resourceInputs["srtPlayback"] = state ? state.srtPlayback : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["webRtc"] = state ? state.webRtc : undefined;
            resourceInputs["webRtcPlayback"] = state ? state.webRtcPlayback : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["defaultCreator"] = args ? args.defaultCreator : undefined;
            resourceInputs["deleteRecordingAfterDays"] = args ? args.deleteRecordingAfterDays : undefined;
            resourceInputs["liveInputIdentifier"] = args ? args.liveInputIdentifier : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["recording"] = args ? args.recording : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["rtmps"] = undefined /*out*/;
            resourceInputs["rtmpsPlayback"] = undefined /*out*/;
            resourceInputs["srt"] = undefined /*out*/;
            resourceInputs["srtPlayback"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["webRtc"] = undefined /*out*/;
            resourceInputs["webRtcPlayback"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamLiveInput.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StreamLiveInput = StreamLiveInput;
/** @internal */
StreamLiveInput.__pulumiType = 'cloudflare:index/streamLiveInput:StreamLiveInput';
//# sourceMappingURL=streamLiveInput.js.map