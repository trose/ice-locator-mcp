import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleR2CustomDomain = new cloudflare.R2CustomDomain("example_r2_custom_domain", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     bucketName: "example-bucket",
 *     domain: "domain",
 *     enabled: true,
 *     zoneId: "zoneId",
 *     minTls: "1.0",
 * });
 * ```
 */
export declare class R2CustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing R2CustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: R2CustomDomainState, opts?: pulumi.CustomResourceOptions): R2CustomDomain;
    /**
     * Returns true if the given object is an instance of R2CustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is R2CustomDomain;
    /**
     * Account ID.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Name of the bucket.
     */
    readonly bucketName: pulumi.Output<string>;
    /**
     * Name of the custom domain to be added.
     */
    readonly domain: pulumi.Output<string>;
    /**
     * Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
     */
    readonly enabled: pulumi.Output<boolean>;
    /**
     * Jurisdiction of the bucket
     */
    readonly jurisdiction: pulumi.Output<string>;
    /**
     * Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: "1.0", "1.1", "1.2", "1.3".
     */
    readonly minTls: pulumi.Output<string | undefined>;
    readonly status: pulumi.Output<outputs.R2CustomDomainStatus>;
    /**
     * Zone ID of the custom domain.
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Zone that the custom domain resides in.
     */
    readonly zoneName: pulumi.Output<string>;
    /**
     * Create a R2CustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: R2CustomDomainArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering R2CustomDomain resources.
 */
export interface R2CustomDomainState {
    /**
     * Account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Name of the custom domain to be added.
     */
    domain?: pulumi.Input<string>;
    /**
     * Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    /**
     * Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: "1.0", "1.1", "1.2", "1.3".
     */
    minTls?: pulumi.Input<string>;
    status?: pulumi.Input<inputs.R2CustomDomainStatus>;
    /**
     * Zone ID of the custom domain.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * Zone that the custom domain resides in.
     */
    zoneName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a R2CustomDomain resource.
 */
export interface R2CustomDomainArgs {
    /**
     * Account ID.
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Name of the custom domain to be added.
     */
    domain: pulumi.Input<string>;
    /**
     * Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    /**
     * Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: "1.0", "1.1", "1.2", "1.3".
     */
    minTls?: pulumi.Input<string>;
    /**
     * Zone ID of the custom domain.
     */
    zoneId: pulumi.Input<string>;
}
