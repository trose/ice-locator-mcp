import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleApiShieldSchema = new cloudflare.ApiShieldSchema("example_api_shield_schema", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     file: null,
 *     kind: "openapi_v3",
 *     name: "petstore schema",
 *     validationEnabled: "true",
 * });
 * ```
 */
export declare class ApiShieldSchema extends pulumi.CustomResource {
    /**
     * Get an existing ApiShieldSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiShieldSchemaState, opts?: pulumi.CustomResourceOptions): ApiShieldSchema;
    /**
     * Returns true if the given object is an instance of ApiShieldSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ApiShieldSchema;
    readonly createdAt: pulumi.Output<string>;
    /**
     * Schema file bytes
     */
    readonly file: pulumi.Output<string>;
    /**
     * Kind of schema
     * Available values: "openapiV3".
     */
    readonly kind: pulumi.Output<string>;
    /**
     * Name of the schema
     */
    readonly name: pulumi.Output<string | undefined>;
    readonly schema: pulumi.Output<outputs.ApiShieldSchemaSchema>;
    readonly schemaId: pulumi.Output<string | undefined>;
    /**
     * Source of the schema
     */
    readonly source: pulumi.Output<string>;
    readonly uploadDetails: pulumi.Output<outputs.ApiShieldSchemaUploadDetails>;
    /**
     * Flag whether schema is enabled for validation.
     * Available values: "true", "false".
     */
    readonly validationEnabled: pulumi.Output<string | undefined>;
    /**
     * Identifier.
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Create a ApiShieldSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiShieldSchemaArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ApiShieldSchema resources.
 */
export interface ApiShieldSchemaState {
    createdAt?: pulumi.Input<string>;
    /**
     * Schema file bytes
     */
    file?: pulumi.Input<string>;
    /**
     * Kind of schema
     * Available values: "openapiV3".
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the schema
     */
    name?: pulumi.Input<string>;
    schema?: pulumi.Input<inputs.ApiShieldSchemaSchema>;
    schemaId?: pulumi.Input<string>;
    /**
     * Source of the schema
     */
    source?: pulumi.Input<string>;
    uploadDetails?: pulumi.Input<inputs.ApiShieldSchemaUploadDetails>;
    /**
     * Flag whether schema is enabled for validation.
     * Available values: "true", "false".
     */
    validationEnabled?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ApiShieldSchema resource.
 */
export interface ApiShieldSchemaArgs {
    /**
     * Schema file bytes
     */
    file: pulumi.Input<string>;
    /**
     * Kind of schema
     * Available values: "openapiV3".
     */
    kind: pulumi.Input<string>;
    /**
     * Name of the schema
     */
    name?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    /**
     * Flag whether schema is enabled for validation.
     * Available values: "true", "false".
     */
    validationEnabled?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
