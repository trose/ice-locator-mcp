import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl example '<account_id>/<site_id>/<acl_id>'
 * ```
 */
export declare class MagicTransitSiteAcl extends pulumi.CustomResource {
    /**
     * Get an existing MagicTransitSiteAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicTransitSiteAclState, opts?: pulumi.CustomResourceOptions): MagicTransitSiteAcl;
    /**
     * Returns true if the given object is an instance of MagicTransitSiteAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MagicTransitSiteAcl;
    /**
     * Identifier
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Description for the ACL.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    readonly forwardLocally: pulumi.Output<boolean | undefined>;
    readonly lan1: pulumi.Output<outputs.MagicTransitSiteAclLan1>;
    readonly lan2: pulumi.Output<outputs.MagicTransitSiteAclLan2>;
    /**
     * The name of the ACL.
     */
    readonly name: pulumi.Output<string>;
    readonly protocols: pulumi.Output<string[] | undefined>;
    /**
     * Identifier
     */
    readonly siteId: pulumi.Output<string>;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    readonly unidirectional: pulumi.Output<boolean | undefined>;
    /**
     * Create a MagicTransitSiteAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicTransitSiteAclArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MagicTransitSiteAcl resources.
 */
export interface MagicTransitSiteAclState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Description for the ACL.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    forwardLocally?: pulumi.Input<boolean>;
    lan1?: pulumi.Input<inputs.MagicTransitSiteAclLan1>;
    lan2?: pulumi.Input<inputs.MagicTransitSiteAclLan2>;
    /**
     * The name of the ACL.
     */
    name?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier
     */
    siteId?: pulumi.Input<string>;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    unidirectional?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a MagicTransitSiteAcl resource.
 */
export interface MagicTransitSiteAclArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Description for the ACL.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    forwardLocally?: pulumi.Input<boolean>;
    lan1: pulumi.Input<inputs.MagicTransitSiteAclLan1>;
    lan2: pulumi.Input<inputs.MagicTransitSiteAclLan2>;
    /**
     * The name of the ACL.
     */
    name: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier
     */
    siteId: pulumi.Input<string>;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    unidirectional?: pulumi.Input<boolean>;
}
