"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStream = new cloudflare.Stream("example_stream", {accountId: "023e105f4ecef8ad9ca31a8372d0c353"});
 * ```
 */
class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stream(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["allowedOrigins"] = state ? state.allowedOrigins : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["liveInput"] = state ? state.liveInput : undefined;
            resourceInputs["maxDurationSeconds"] = state ? state.maxDurationSeconds : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["modified"] = state ? state.modified : undefined;
            resourceInputs["playback"] = state ? state.playback : undefined;
            resourceInputs["preview"] = state ? state.preview : undefined;
            resourceInputs["readyToStream"] = state ? state.readyToStream : undefined;
            resourceInputs["readyToStreamAt"] = state ? state.readyToStreamAt : undefined;
            resourceInputs["requireSignedUrls"] = state ? state.requireSignedUrls : undefined;
            resourceInputs["scheduledDeletion"] = state ? state.scheduledDeletion : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["thumbnail"] = state ? state.thumbnail : undefined;
            resourceInputs["thumbnailTimestampPct"] = state ? state.thumbnailTimestampPct : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["uploadExpiry"] = state ? state.uploadExpiry : undefined;
            resourceInputs["uploaded"] = state ? state.uploaded : undefined;
            resourceInputs["watermark"] = state ? state.watermark : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["allowedOrigins"] = args ? args.allowedOrigins : undefined;
            resourceInputs["creator"] = args ? args.creator : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["maxDurationSeconds"] = args ? args.maxDurationSeconds : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["requireSignedUrls"] = args ? args.requireSignedUrls : undefined;
            resourceInputs["scheduledDeletion"] = args ? args.scheduledDeletion : undefined;
            resourceInputs["thumbnailTimestampPct"] = args ? args.thumbnailTimestampPct : undefined;
            resourceInputs["uploadExpiry"] = args ? args.uploadExpiry : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["input"] = undefined /*out*/;
            resourceInputs["liveInput"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["playback"] = undefined /*out*/;
            resourceInputs["preview"] = undefined /*out*/;
            resourceInputs["readyToStream"] = undefined /*out*/;
            resourceInputs["readyToStreamAt"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["thumbnail"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["uploaded"] = undefined /*out*/;
            resourceInputs["watermark"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Stream = Stream;
/** @internal */
Stream.__pulumiType = 'cloudflare:index/stream:Stream';
//# sourceMappingURL=stream.js.map