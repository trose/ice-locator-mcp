"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tunnel = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustTunnelCloudflared = new cloudflare.ZeroTrustTunnelCloudflared("example_zero_trust_tunnel_cloudflared", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     name: "blog",
 *     configSrc: "cloudflare",
 *     tunnelSecret: "AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg=",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/tunnel:Tunnel example '<account_id>/<tunnel_id>'
 * ```
 *
 * @deprecated cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared
 */
class Tunnel extends pulumi.CustomResource {
    /**
     * Get an existing Tunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("Tunnel is deprecated: cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared");
        return new Tunnel(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Tunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tunnel.__pulumiType;
    }
    /** @deprecated cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("Tunnel is deprecated: cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["accountTag"] = state ? state.accountTag : undefined;
            resourceInputs["configSrc"] = state ? state.configSrc : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["connsActiveAt"] = state ? state.connsActiveAt : undefined;
            resourceInputs["connsInactiveAt"] = state ? state.connsInactiveAt : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteConfig"] = state ? state.remoteConfig : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tunType"] = state ? state.tunType : undefined;
            resourceInputs["tunnelSecret"] = state ? state.tunnelSecret : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["configSrc"] = args ? args.configSrc : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tunnelSecret"] = (args === null || args === void 0 ? void 0 : args.tunnelSecret) ? pulumi.secret(args.tunnelSecret) : undefined;
            resourceInputs["accountTag"] = undefined /*out*/;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["connsActiveAt"] = undefined /*out*/;
            resourceInputs["connsInactiveAt"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["remoteConfig"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tunType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/tunnel:Tunnel" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["tunnelSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Tunnel.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Tunnel = Tunnel;
/** @internal */
Tunnel.__pulumiType = 'cloudflare:index/tunnel:Tunnel';
//# sourceMappingURL=tunnel.js.map