"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkersDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workersDeployment:WorkersDeployment example '<account_id>/<script_name>/<deployment_id>'
 * ```
 */
class WorkersDeployment extends pulumi.CustomResource {
    /**
     * Get an existing WorkersDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkersDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkersDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkersDeployment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["authorEmail"] = state ? state.authorEmail : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["versions"] = state ? state.versions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.scriptName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            if ((!args || args.versions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versions'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["versions"] = args ? args.versions : undefined;
            resourceInputs["authorEmail"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkersDeployment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkersDeployment = WorkersDeployment;
/** @internal */
WorkersDeployment.__pulumiType = 'cloudflare:index/workersDeployment:WorkersDeployment';
//# sourceMappingURL=workersDeployment.js.map