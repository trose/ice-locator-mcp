import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 */
export declare class StreamLiveInput extends pulumi.CustomResource {
    /**
     * Get an existing StreamLiveInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamLiveInputState, opts?: pulumi.CustomResourceOptions): StreamLiveInput;
    /**
     * Returns true if the given object is an instance of StreamLiveInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StreamLiveInput;
    /**
     * Identifier.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * The date and time the live input was created.
     */
    readonly created: pulumi.Output<string>;
    /**
     * Sets the creator ID asssociated with this live input.
     */
    readonly defaultCreator: pulumi.Output<string | undefined>;
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     */
    readonly deleteRecordingAfterDays: pulumi.Output<number | undefined>;
    /**
     * A unique identifier for a live input.
     */
    readonly liveInputIdentifier: pulumi.Output<string | undefined>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     */
    readonly meta: pulumi.Output<string | undefined>;
    /**
     * The date and time the live input was last modified.
     */
    readonly modified: pulumi.Output<string>;
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     */
    readonly recording: pulumi.Output<outputs.StreamLiveInputRecording>;
    /**
     * Details for streaming to an live input using RTMPS.
     */
    readonly rtmps: pulumi.Output<outputs.StreamLiveInputRtmps>;
    /**
     * Details for playback from an live input using RTMPS.
     */
    readonly rtmpsPlayback: pulumi.Output<outputs.StreamLiveInputRtmpsPlayback>;
    /**
     * Details for streaming to a live input using SRT.
     */
    readonly srt: pulumi.Output<outputs.StreamLiveInputSrt>;
    /**
     * Details for playback from an live input using SRT.
     */
    readonly srtPlayback: pulumi.Output<outputs.StreamLiveInputSrtPlayback>;
    /**
     * The connection status of a live input.
     * Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
     */
    readonly status: pulumi.Output<string>;
    /**
     * A unique identifier for a live input.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * Details for streaming to a live input using WebRTC.
     */
    readonly webRtc: pulumi.Output<outputs.StreamLiveInputWebRtc>;
    /**
     * Details for playback from a live input using WebRTC.
     */
    readonly webRtcPlayback: pulumi.Output<outputs.StreamLiveInputWebRtcPlayback>;
    /**
     * Create a StreamLiveInput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamLiveInputArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StreamLiveInput resources.
 */
export interface StreamLiveInputState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The date and time the live input was created.
     */
    created?: pulumi.Input<string>;
    /**
     * Sets the creator ID asssociated with this live input.
     */
    defaultCreator?: pulumi.Input<string>;
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     */
    deleteRecordingAfterDays?: pulumi.Input<number>;
    /**
     * A unique identifier for a live input.
     */
    liveInputIdentifier?: pulumi.Input<string>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     */
    meta?: pulumi.Input<string>;
    /**
     * The date and time the live input was last modified.
     */
    modified?: pulumi.Input<string>;
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     */
    recording?: pulumi.Input<inputs.StreamLiveInputRecording>;
    /**
     * Details for streaming to an live input using RTMPS.
     */
    rtmps?: pulumi.Input<inputs.StreamLiveInputRtmps>;
    /**
     * Details for playback from an live input using RTMPS.
     */
    rtmpsPlayback?: pulumi.Input<inputs.StreamLiveInputRtmpsPlayback>;
    /**
     * Details for streaming to a live input using SRT.
     */
    srt?: pulumi.Input<inputs.StreamLiveInputSrt>;
    /**
     * Details for playback from an live input using SRT.
     */
    srtPlayback?: pulumi.Input<inputs.StreamLiveInputSrtPlayback>;
    /**
     * The connection status of a live input.
     * Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
     */
    status?: pulumi.Input<string>;
    /**
     * A unique identifier for a live input.
     */
    uid?: pulumi.Input<string>;
    /**
     * Details for streaming to a live input using WebRTC.
     */
    webRtc?: pulumi.Input<inputs.StreamLiveInputWebRtc>;
    /**
     * Details for playback from a live input using WebRTC.
     */
    webRtcPlayback?: pulumi.Input<inputs.StreamLiveInputWebRtcPlayback>;
}
/**
 * The set of arguments for constructing a StreamLiveInput resource.
 */
export interface StreamLiveInputArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Sets the creator ID asssociated with this live input.
     */
    defaultCreator?: pulumi.Input<string>;
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     */
    deleteRecordingAfterDays?: pulumi.Input<number>;
    /**
     * A unique identifier for a live input.
     */
    liveInputIdentifier?: pulumi.Input<string>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     */
    meta?: pulumi.Input<string>;
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     */
    recording?: pulumi.Input<inputs.StreamLiveInputRecording>;
}
