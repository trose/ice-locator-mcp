import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleAccountMember = new cloudflare.AccountMember("example_account_member", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     email: "user@example.com",
 *     roles: ["3536bcfad5faccb999b47003c79917fb"],
 *     status: "accepted",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accountMember:AccountMember example '<account_id>/<member_id>'
 * ```
 */
export declare class AccountMember extends pulumi.CustomResource {
    /**
     * Get an existing AccountMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountMemberState, opts?: pulumi.CustomResourceOptions): AccountMember;
    /**
     * Returns true if the given object is an instance of AccountMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AccountMember;
    /**
     * Account identifier tag.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * The contact email address of the user.
     */
    readonly email: pulumi.Output<string>;
    /**
     * Array of policies associated with this member.
     */
    readonly policies: pulumi.Output<outputs.AccountMemberPolicy[]>;
    /**
     * Array of roles associated with this member.
     */
    readonly roles: pulumi.Output<string[] | undefined>;
    /**
     * Available values: "accepted", "pending".
     */
    readonly status: pulumi.Output<string>;
    /**
     * Details of the user associated to the membership.
     */
    readonly user: pulumi.Output<outputs.AccountMemberUser>;
    /**
     * Create a AccountMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountMemberArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AccountMember resources.
 */
export interface AccountMemberState {
    /**
     * Account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The contact email address of the user.
     */
    email?: pulumi.Input<string>;
    /**
     * Array of policies associated with this member.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.AccountMemberPolicy>[]>;
    /**
     * Array of roles associated with this member.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Available values: "accepted", "pending".
     */
    status?: pulumi.Input<string>;
    /**
     * Details of the user associated to the membership.
     */
    user?: pulumi.Input<inputs.AccountMemberUser>;
}
/**
 * The set of arguments for constructing a AccountMember resource.
 */
export interface AccountMemberArgs {
    /**
     * Account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * The contact email address of the user.
     */
    email: pulumi.Input<string>;
    /**
     * Array of policies associated with this member.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.AccountMemberPolicy>[]>;
    /**
     * Array of roles associated with this member.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Available values: "accepted", "pending".
     */
    status?: pulumi.Input<string>;
}
