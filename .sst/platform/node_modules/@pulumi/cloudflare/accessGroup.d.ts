import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessGroup = new cloudflare.ZeroTrustAccessGroup("example_zero_trust_access_group", {
 *     includes: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     name: "Allow devs",
 *     zoneId: "zone_id",
 *     excludes: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     isDefault: true,
 *     requires: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessGroup:AccessGroup example '<{accounts|zones}/{account_id|zone_id}>/<group_id>'
 * ```
 *
 * @deprecated cloudflare.index/accessgroup.AccessGroup has been deprecated in favor of cloudflare.index/zerotrustaccessgroup.ZeroTrustAccessGroup
 */
export declare class AccessGroup extends pulumi.CustomResource {
    /**
     * Get an existing AccessGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessGroupState, opts?: pulumi.CustomResourceOptions): AccessGroup;
    /**
     * Returns true if the given object is an instance of AccessGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AccessGroup;
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    readonly accountId: pulumi.Output<string | undefined>;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    readonly excludes: pulumi.Output<outputs.AccessGroupExclude[] | undefined>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    readonly includes: pulumi.Output<outputs.AccessGroupInclude[]>;
    /**
     * Whether this is the default group
     */
    readonly isDefault: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Access group.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    readonly requires: pulumi.Output<outputs.AccessGroupRequire[] | undefined>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    readonly zoneId: pulumi.Output<string | undefined>;
    /**
     * Create a AccessGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/accessgroup.AccessGroup has been deprecated in favor of cloudflare.index/zerotrustaccessgroup.ZeroTrustAccessGroup */
    constructor(name: string, args: AccessGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AccessGroup resources.
 */
export interface AccessGroupState {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.AccessGroupExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.AccessGroupInclude>[]>;
    /**
     * Whether this is the default group
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Access group.
     */
    name?: pulumi.Input<string>;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.AccessGroupRequire>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AccessGroup resource.
 */
export interface AccessGroupArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.AccessGroupExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes: pulumi.Input<pulumi.Input<inputs.AccessGroupInclude>[]>;
    /**
     * Whether this is the default group
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Access group.
     */
    name: pulumi.Input<string>;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.AccessGroupRequire>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
