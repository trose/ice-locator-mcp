import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * > A DNS record for the domain is not automatically created. You need to create
 *    a `cloudflareRecord` resource for the domain you want to use.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const examplePagesDomain = new cloudflare.PagesDomain("example_pages_domain", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     projectName: "this-is-my-project-01",
 *     name: "example.com",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/pagesDomain:PagesDomain example '<account_id>/<project_name>/<domain_name>'
 * ```
 */
export declare class PagesDomain extends pulumi.CustomResource {
    /**
     * Get an existing PagesDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagesDomainState, opts?: pulumi.CustomResourceOptions): PagesDomain;
    /**
     * Returns true if the given object is an instance of PagesDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PagesDomain;
    /**
     * Identifier
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Available values: "google", "letsEncrypt".
     */
    readonly certificateAuthority: pulumi.Output<string>;
    readonly createdOn: pulumi.Output<string>;
    readonly domainId: pulumi.Output<string>;
    readonly name: pulumi.Output<string>;
    /**
     * Name of the project.
     */
    readonly projectName: pulumi.Output<string>;
    /**
     * Available values: "initializing", "pending", "active", "deactivated", "blocked", "error".
     */
    readonly status: pulumi.Output<string>;
    readonly validationData: pulumi.Output<outputs.PagesDomainValidationData>;
    readonly verificationData: pulumi.Output<outputs.PagesDomainVerificationData>;
    readonly zoneTag: pulumi.Output<string>;
    /**
     * Create a PagesDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagesDomainArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PagesDomain resources.
 */
export interface PagesDomainState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Available values: "google", "letsEncrypt".
     */
    certificateAuthority?: pulumi.Input<string>;
    createdOn?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Name of the project.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Available values: "initializing", "pending", "active", "deactivated", "blocked", "error".
     */
    status?: pulumi.Input<string>;
    validationData?: pulumi.Input<inputs.PagesDomainValidationData>;
    verificationData?: pulumi.Input<inputs.PagesDomainVerificationData>;
    zoneTag?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a PagesDomain resource.
 */
export interface PagesDomainArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    name: pulumi.Input<string>;
    /**
     * Name of the project.
     */
    projectName: pulumi.Input<string>;
}
