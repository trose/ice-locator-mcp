"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerScript = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerScript:WorkerScript example '<account_id>/<script_name>'
 * ```
 *
 * @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript
 */
class WorkerScript extends pulumi.CustomResource {
    /**
     * Get an existing WorkerScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("WorkerScript is deprecated: cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript");
        return new WorkerScript(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkerScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerScript.__pulumiType;
    }
    /** @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("WorkerScript is deprecated: cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["assets"] = state ? state.assets : undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["bodyPart"] = state ? state.bodyPart : undefined;
            resourceInputs["compatibilityDate"] = state ? state.compatibilityDate : undefined;
            resourceInputs["compatibilityFlags"] = state ? state.compatibilityFlags : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentFile"] = state ? state.contentFile : undefined;
            resourceInputs["contentSha256"] = state ? state.contentSha256 : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["hasAssets"] = state ? state.hasAssets : undefined;
            resourceInputs["hasModules"] = state ? state.hasModules : undefined;
            resourceInputs["keepAssets"] = state ? state.keepAssets : undefined;
            resourceInputs["keepBindings"] = state ? state.keepBindings : undefined;
            resourceInputs["logpush"] = state ? state.logpush : undefined;
            resourceInputs["mainModule"] = state ? state.mainModule : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["observability"] = state ? state.observability : undefined;
            resourceInputs["placement"] = state ? state.placement : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["startupTimeMs"] = state ? state.startupTimeMs : undefined;
            resourceInputs["tailConsumers"] = state ? state.tailConsumers : undefined;
            resourceInputs["usageModel"] = state ? state.usageModel : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.scriptName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["assets"] = args ? args.assets : undefined;
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["bodyPart"] = args ? args.bodyPart : undefined;
            resourceInputs["compatibilityDate"] = args ? args.compatibilityDate : undefined;
            resourceInputs["compatibilityFlags"] = args ? args.compatibilityFlags : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentFile"] = args ? args.contentFile : undefined;
            resourceInputs["contentSha256"] = args ? args.contentSha256 : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["keepAssets"] = args ? args.keepAssets : undefined;
            resourceInputs["keepBindings"] = args ? args.keepBindings : undefined;
            resourceInputs["logpush"] = args ? args.logpush : undefined;
            resourceInputs["mainModule"] = args ? args.mainModule : undefined;
            resourceInputs["observability"] = args ? args.observability : undefined;
            resourceInputs["placement"] = args ? args.placement : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["tailConsumers"] = args ? args.tailConsumers : undefined;
            resourceInputs["usageModel"] = args ? args.usageModel : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["hasAssets"] = undefined /*out*/;
            resourceInputs["hasModules"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["startupTimeMs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/workerScript:WorkerScript" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WorkerScript.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkerScript = WorkerScript;
/** @internal */
WorkerScript.__pulumiType = 'cloudflare:index/workerScript:WorkerScript';
//# sourceMappingURL=workerScript.js.map