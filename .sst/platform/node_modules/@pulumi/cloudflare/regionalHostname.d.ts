import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRegionalHostname = new cloudflare.RegionalHostname("example_regional_hostname", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     hostname: "foo.example.com",
 *     regionKey: "ca",
 *     routing: "dns",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/regionalHostname:RegionalHostname example '<zone_id>/<hostname>'
 * ```
 */
export declare class RegionalHostname extends pulumi.CustomResource {
    /**
     * Get an existing RegionalHostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionalHostnameState, opts?: pulumi.CustomResourceOptions): RegionalHostname;
    /**
     * Returns true if the given object is an instance of RegionalHostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RegionalHostname;
    /**
     * When the regional hostname was created
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     */
    readonly hostname: pulumi.Output<string>;
    /**
     * Identifying key for the region
     */
    readonly regionKey: pulumi.Output<string>;
    /**
     * Configure which routing method to use for the regional hostname
     */
    readonly routing: pulumi.Output<string>;
    /**
     * Identifier.
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Create a RegionalHostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionalHostnameArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RegionalHostname resources.
 */
export interface RegionalHostnameState {
    /**
     * When the regional hostname was created
     */
    createdOn?: pulumi.Input<string>;
    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     */
    hostname?: pulumi.Input<string>;
    /**
     * Identifying key for the region
     */
    regionKey?: pulumi.Input<string>;
    /**
     * Configure which routing method to use for the regional hostname
     */
    routing?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a RegionalHostname resource.
 */
export interface RegionalHostnameArgs {
    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     */
    hostname: pulumi.Input<string>;
    /**
     * Identifying key for the region
     */
    regionKey: pulumi.Input<string>;
    /**
     * Configure which routing method to use for the regional hostname
     */
    routing?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
