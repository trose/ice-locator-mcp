import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 */
export declare class QueueConsumer extends pulumi.CustomResource {
    /**
     * Get an existing QueueConsumer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueueConsumerState, opts?: pulumi.CustomResourceOptions): QueueConsumer;
    /**
     * Returns true if the given object is an instance of QueueConsumer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is QueueConsumer;
    /**
     * A Resource identifier.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * A Resource identifier.
     */
    readonly consumerId: pulumi.Output<string | undefined>;
    readonly createdOn: pulumi.Output<string>;
    readonly deadLetterQueue: pulumi.Output<string | undefined>;
    /**
     * A Resource identifier.
     */
    readonly queueId: pulumi.Output<string>;
    /**
     * Name of a Worker
     */
    readonly script: pulumi.Output<string>;
    /**
     * Name of a Worker
     */
    readonly scriptName: pulumi.Output<string | undefined>;
    readonly settings: pulumi.Output<outputs.QueueConsumerSettings | undefined>;
    /**
     * Available values: "worker", "httpPull".
     */
    readonly type: pulumi.Output<string | undefined>;
    /**
     * Create a QueueConsumer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueConsumerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering QueueConsumer resources.
 */
export interface QueueConsumerState {
    /**
     * A Resource identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * A Resource identifier.
     */
    consumerId?: pulumi.Input<string>;
    createdOn?: pulumi.Input<string>;
    deadLetterQueue?: pulumi.Input<string>;
    /**
     * A Resource identifier.
     */
    queueId?: pulumi.Input<string>;
    /**
     * Name of a Worker
     */
    script?: pulumi.Input<string>;
    /**
     * Name of a Worker
     */
    scriptName?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.QueueConsumerSettings>;
    /**
     * Available values: "worker", "httpPull".
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a QueueConsumer resource.
 */
export interface QueueConsumerArgs {
    /**
     * A Resource identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * A Resource identifier.
     */
    consumerId?: pulumi.Input<string>;
    deadLetterQueue?: pulumi.Input<string>;
    /**
     * A Resource identifier.
     */
    queueId: pulumi.Input<string>;
    /**
     * Name of a Worker
     */
    scriptName?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.QueueConsumerSettings>;
    /**
     * Available values: "worker", "httpPull".
     */
    type?: pulumi.Input<string>;
}
