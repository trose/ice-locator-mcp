"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDnsRecordsOutput = exports.getDnsRecords = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsRecords = cloudflare.getDnsRecords({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     comment: {
 *         absent: "absent",
 *         contains: "ello, worl",
 *         endswith: "o, world",
 *         exact: "Hello, world",
 *         present: "present",
 *         startswith: "Hello, w",
 *     },
 *     content: {
 *         contains: "7.0.0.",
 *         endswith: ".0.1",
 *         exact: "127.0.0.1",
 *         startswith: "127.0.",
 *     },
 *     name: {
 *         contains: "w.example.",
 *         endswith: ".example.com",
 *         exact: "www.example.com",
 *         startswith: "www.example",
 *     },
 *     search: "www.cloudflare.com",
 *     tag: {
 *         absent: "important",
 *         contains: "greeting:ello, worl",
 *         endswith: "greeting:o, world",
 *         exact: "greeting:Hello, world",
 *         present: "important",
 *         startswith: "greeting:Hello, w",
 *     },
 *     type: "A",
 * });
 * ```
 */
function getDnsRecords(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getDnsRecords:getDnsRecords", {
        "comment": args.comment,
        "content": args.content,
        "direction": args.direction,
        "match": args.match,
        "maxItems": args.maxItems,
        "name": args.name,
        "order": args.order,
        "proxied": args.proxied,
        "search": args.search,
        "tag": args.tag,
        "tagMatch": args.tagMatch,
        "type": args.type,
        "zoneId": args.zoneId,
    }, opts);
}
exports.getDnsRecords = getDnsRecords;
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsRecords = cloudflare.getDnsRecords({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     comment: {
 *         absent: "absent",
 *         contains: "ello, worl",
 *         endswith: "o, world",
 *         exact: "Hello, world",
 *         present: "present",
 *         startswith: "Hello, w",
 *     },
 *     content: {
 *         contains: "7.0.0.",
 *         endswith: ".0.1",
 *         exact: "127.0.0.1",
 *         startswith: "127.0.",
 *     },
 *     name: {
 *         contains: "w.example.",
 *         endswith: ".example.com",
 *         exact: "www.example.com",
 *         startswith: "www.example",
 *     },
 *     search: "www.cloudflare.com",
 *     tag: {
 *         absent: "important",
 *         contains: "greeting:ello, worl",
 *         endswith: "greeting:o, world",
 *         exact: "greeting:Hello, world",
 *         present: "important",
 *         startswith: "greeting:Hello, w",
 *     },
 *     type: "A",
 * });
 * ```
 */
function getDnsRecordsOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getDnsRecords:getDnsRecords", {
        "comment": args.comment,
        "content": args.content,
        "direction": args.direction,
        "match": args.match,
        "maxItems": args.maxItems,
        "name": args.name,
        "order": args.order,
        "proxied": args.proxied,
        "search": args.search,
        "tag": args.tag,
        "tagMatch": args.tagMatch,
        "type": args.type,
        "zoneId": args.zoneId,
    }, opts);
}
exports.getDnsRecordsOutput = getDnsRecordsOutput;
//# sourceMappingURL=getDnsRecords.js.map