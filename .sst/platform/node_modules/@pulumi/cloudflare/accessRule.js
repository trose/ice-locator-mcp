"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleAccessRule = new cloudflare.AccessRule("example_access_rule", {
 *     configuration: {
 *         target: "ip",
 *         value: "198.51.100.4",
 *     },
 *     mode: "challenge",
 *     zoneId: "zone_id",
 *     notes: "This rule is enabled because of an event that occurred on date X.",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessRule:AccessRule example '<{accounts|zones}/{account_id|zone_id}>/<rule_id>'
 * ```
 */
class AccessRule extends pulumi.CustomResource {
    /**
     * Get an existing AccessRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccessRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccessRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["allowedModes"] = state ? state.allowedModes : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["allowedModes"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AccessRule = AccessRule;
/** @internal */
AccessRule.__pulumiType = 'cloudflare:index/accessRule:AccessRule';
//# sourceMappingURL=accessRule.js.map