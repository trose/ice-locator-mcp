"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleImage = new cloudflare.Image("example_image", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     imageId: "id",
 *     creator: "creator",
 *     file: null,
 *     metadata: {},
 *     requireSignedUrls: true,
 *     url: "https://example.com/path/to/logo.png",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/image:Image example '<account_id>/<image_id>'
 * ```
 */
class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Image(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["requireSignedUrls"] = state ? state.requireSignedUrls : undefined;
            resourceInputs["uploaded"] = state ? state.uploaded : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["variants"] = state ? state.variants : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["creator"] = args ? args.creator : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["requireSignedUrls"] = args ? args.requireSignedUrls : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["filename"] = undefined /*out*/;
            resourceInputs["meta"] = undefined /*out*/;
            resourceInputs["uploaded"] = undefined /*out*/;
            resourceInputs["variants"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Image = Image;
/** @internal */
Image.__pulumiType = 'cloudflare:index/image:Image';
//# sourceMappingURL=image.js.map