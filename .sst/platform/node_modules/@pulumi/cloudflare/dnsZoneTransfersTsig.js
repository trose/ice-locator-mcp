"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsZoneTransfersTsig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsZoneTransfersTsig = new cloudflare.DnsZoneTransfersTsig("example_dns_zone_transfers_tsig", {
 *     accountId: "01a7362d577a6c3019a474fd6f485823",
 *     algo: "hmac-sha512.",
 *     name: "tsig.customer.cf.",
 *     secret: "caf79a7804b04337c9c66ccd7bef9190a1e1679b5dd03d8aa10f7ad45e1a9dab92b417896c15d4d007c7c14194538d2a5d0feffdecc5a7f0e1c570cfa700837c",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig example '<account_id>/<tsig_id>'
 * ```
 */
class DnsZoneTransfersTsig extends pulumi.CustomResource {
    /**
     * Get an existing DnsZoneTransfersTsig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DnsZoneTransfersTsig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DnsZoneTransfersTsig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZoneTransfersTsig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["algo"] = state ? state.algo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.algo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algo'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secret'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["algo"] = args ? args.algo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secret"] = (args === null || args === void 0 ? void 0 : args.secret) ? pulumi.secret(args.secret) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DnsZoneTransfersTsig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DnsZoneTransfersTsig = DnsZoneTransfersTsig;
/** @internal */
DnsZoneTransfersTsig.__pulumiType = 'cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig';
//# sourceMappingURL=dnsZoneTransfersTsig.js.map