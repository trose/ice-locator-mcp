"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessOrganization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * @deprecated cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization
 */
class AccessOrganization extends pulumi.CustomResource {
    /**
     * Get an existing AccessOrganization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("AccessOrganization is deprecated: cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization");
        return new AccessOrganization(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccessOrganization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessOrganization.__pulumiType;
    }
    /** @deprecated cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("AccessOrganization is deprecated: cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["allowAuthenticateViaWarp"] = state ? state.allowAuthenticateViaWarp : undefined;
            resourceInputs["authDomain"] = state ? state.authDomain : undefined;
            resourceInputs["autoRedirectToIdentity"] = state ? state.autoRedirectToIdentity : undefined;
            resourceInputs["customPages"] = state ? state.customPages : undefined;
            resourceInputs["isUiReadOnly"] = state ? state.isUiReadOnly : undefined;
            resourceInputs["loginDesign"] = state ? state.loginDesign : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sessionDuration"] = state ? state.sessionDuration : undefined;
            resourceInputs["uiReadOnlyToggleReason"] = state ? state.uiReadOnlyToggleReason : undefined;
            resourceInputs["userSeatExpirationInactiveTime"] = state ? state.userSeatExpirationInactiveTime : undefined;
            resourceInputs["warpAuthSessionDuration"] = state ? state.warpAuthSessionDuration : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["allowAuthenticateViaWarp"] = args ? args.allowAuthenticateViaWarp : undefined;
            resourceInputs["authDomain"] = args ? args.authDomain : undefined;
            resourceInputs["autoRedirectToIdentity"] = args ? args.autoRedirectToIdentity : undefined;
            resourceInputs["customPages"] = args ? args.customPages : undefined;
            resourceInputs["isUiReadOnly"] = args ? args.isUiReadOnly : undefined;
            resourceInputs["loginDesign"] = args ? args.loginDesign : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sessionDuration"] = args ? args.sessionDuration : undefined;
            resourceInputs["uiReadOnlyToggleReason"] = args ? args.uiReadOnlyToggleReason : undefined;
            resourceInputs["userSeatExpirationInactiveTime"] = args ? args.userSeatExpirationInactiveTime : undefined;
            resourceInputs["warpAuthSessionDuration"] = args ? args.warpAuthSessionDuration : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessOrganization:AccessOrganization" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AccessOrganization.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AccessOrganization = AccessOrganization;
/** @internal */
AccessOrganization.__pulumiType = 'cloudflare:index/accessOrganization:AccessOrganization';
//# sourceMappingURL=accessOrganization.js.map