import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneDnssec = cloudflare.getZoneDnssec({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export declare function getZoneDnssec(args: GetZoneDnssecArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneDnssecResult>;
/**
 * A collection of arguments for invoking getZoneDnssec.
 */
export interface GetZoneDnssecArgs {
    /**
     * Identifier.
     */
    zoneId: string;
}
/**
 * A collection of values returned by getZoneDnssec.
 */
export interface GetZoneDnssecResult {
    /**
     * Algorithm key code.
     */
    readonly algorithm: string;
    /**
     * Digest hash.
     */
    readonly digest: string;
    /**
     * Type of digest algorithm.
     */
    readonly digestAlgorithm: string;
    /**
     * Coded type for digest algorithm.
     */
    readonly digestType: string;
    /**
     * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     */
    readonly dnssecMultiSigner: boolean;
    readonly dnssecPresigned: boolean;
    readonly dnssecUseNsec3: boolean;
    readonly ds: string;
    readonly flags: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyTag: number;
    readonly keyType: string;
    readonly modifiedOn: string;
    readonly publicKey: string;
    readonly status: string;
    /**
     * Identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneDnssec = cloudflare.getZoneDnssec({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export declare function getZoneDnssecOutput(args: GetZoneDnssecOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZoneDnssecResult>;
/**
 * A collection of arguments for invoking getZoneDnssec.
 */
export interface GetZoneDnssecOutputArgs {
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
