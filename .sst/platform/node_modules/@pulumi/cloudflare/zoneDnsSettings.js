"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoneDnsSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 */
class ZoneDnsSettings extends pulumi.CustomResource {
    /**
     * Get an existing ZoneDnsSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZoneDnsSettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZoneDnsSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneDnsSettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["flattenAllCnames"] = state ? state.flattenAllCnames : undefined;
            resourceInputs["foundationDns"] = state ? state.foundationDns : undefined;
            resourceInputs["internalDns"] = state ? state.internalDns : undefined;
            resourceInputs["multiProvider"] = state ? state.multiProvider : undefined;
            resourceInputs["nameservers"] = state ? state.nameservers : undefined;
            resourceInputs["nsTtl"] = state ? state.nsTtl : undefined;
            resourceInputs["secondaryOverrides"] = state ? state.secondaryOverrides : undefined;
            resourceInputs["soa"] = state ? state.soa : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneMode"] = state ? state.zoneMode : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["flattenAllCnames"] = args ? args.flattenAllCnames : undefined;
            resourceInputs["foundationDns"] = args ? args.foundationDns : undefined;
            resourceInputs["internalDns"] = args ? args.internalDns : undefined;
            resourceInputs["multiProvider"] = args ? args.multiProvider : undefined;
            resourceInputs["nameservers"] = args ? args.nameservers : undefined;
            resourceInputs["nsTtl"] = args ? args.nsTtl : undefined;
            resourceInputs["secondaryOverrides"] = args ? args.secondaryOverrides : undefined;
            resourceInputs["soa"] = args ? args.soa : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["zoneMode"] = args ? args.zoneMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneDnsSettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZoneDnsSettings = ZoneDnsSettings;
/** @internal */
ZoneDnsSettings.__pulumiType = 'cloudflare:index/zoneDnsSettings:ZoneDnsSettings';
//# sourceMappingURL=zoneDnsSettings.js.map