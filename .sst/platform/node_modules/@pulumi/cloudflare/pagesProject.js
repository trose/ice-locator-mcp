"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagesProject = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * > If you are using a `source` block configuration, you must first have a
 *    connected GitHub or GitLab account connected to Cloudflare. See the
 *    [Getting Started with Pages] documentation on how to link your accounts.
 *
 * ## Import
 *
 * !> It is not possible to import a pages project with secret environment variables. If you have a secret environment variable, you must remove it from your project before importing it.
 *
 * ```sh
 * $ pulumi import cloudflare:index/pagesProject:PagesProject example '<account_id>/<project_name>'
 * ```
 */
class PagesProject extends pulumi.CustomResource {
    /**
     * Get an existing PagesProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PagesProject(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PagesProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagesProject.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["buildConfig"] = state ? state.buildConfig : undefined;
            resourceInputs["canonicalDeployment"] = state ? state.canonicalDeployment : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["deploymentConfigs"] = state ? state.deploymentConfigs : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["latestDeployment"] = state ? state.latestDeployment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productionBranch"] = state ? state.productionBranch : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["buildConfig"] = args ? args.buildConfig : undefined;
            resourceInputs["deploymentConfigs"] = args ? args.deploymentConfigs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productionBranch"] = args ? args.productionBranch : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["canonicalDeployment"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["domains"] = undefined /*out*/;
            resourceInputs["latestDeployment"] = undefined /*out*/;
            resourceInputs["subdomain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PagesProject.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PagesProject = PagesProject;
/** @internal */
PagesProject.__pulumiType = 'cloudflare:index/pagesProject:PagesProject';
//# sourceMappingURL=pagesProject.js.map