"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogpushJob = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/logpushJob:LogpushJob example '<{accounts|zones}/{account_id|zone_id}>/<job_id>'
 * ```
 */
class LogpushJob extends pulumi.CustomResource {
    /**
     * Get an existing LogpushJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogpushJob(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogpushJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogpushJob.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["destinationConf"] = state ? state.destinationConf : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["lastComplete"] = state ? state.lastComplete : undefined;
            resourceInputs["lastError"] = state ? state.lastError : undefined;
            resourceInputs["logpullOptions"] = state ? state.logpullOptions : undefined;
            resourceInputs["maxUploadBytes"] = state ? state.maxUploadBytes : undefined;
            resourceInputs["maxUploadIntervalSeconds"] = state ? state.maxUploadIntervalSeconds : undefined;
            resourceInputs["maxUploadRecords"] = state ? state.maxUploadRecords : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputOptions"] = state ? state.outputOptions : undefined;
            resourceInputs["ownershipChallenge"] = state ? state.ownershipChallenge : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destinationConf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationConf'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["destinationConf"] = args ? args.destinationConf : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["logpullOptions"] = args ? args.logpullOptions : undefined;
            resourceInputs["maxUploadBytes"] = args ? args.maxUploadBytes : undefined;
            resourceInputs["maxUploadIntervalSeconds"] = args ? args.maxUploadIntervalSeconds : undefined;
            resourceInputs["maxUploadRecords"] = args ? args.maxUploadRecords : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputOptions"] = args ? args.outputOptions : undefined;
            resourceInputs["ownershipChallenge"] = (args === null || args === void 0 ? void 0 : args.ownershipChallenge) ? pulumi.secret(args.ownershipChallenge) : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["lastComplete"] = undefined /*out*/;
            resourceInputs["lastError"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ownershipChallenge"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogpushJob.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LogpushJob = LogpushJob;
/** @internal */
LogpushJob.__pulumiType = 'cloudflare:index/logpushJob:LogpushJob';
//# sourceMappingURL=logpushJob.js.map