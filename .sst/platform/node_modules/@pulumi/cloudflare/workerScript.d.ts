import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerScript:WorkerScript example '<account_id>/<script_name>'
 * ```
 *
 * @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript
 */
export declare class WorkerScript extends pulumi.CustomResource {
    /**
     * Get an existing WorkerScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerScriptState, opts?: pulumi.CustomResourceOptions): WorkerScript;
    /**
     * Returns true if the given object is an instance of WorkerScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is WorkerScript;
    /**
     * Identifier.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Configuration for assets within a Worker
     */
    readonly assets: pulumi.Output<outputs.WorkerScriptAssets | undefined>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    readonly bindings: pulumi.Output<outputs.WorkerScriptBinding[]>;
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     */
    readonly bodyPart: pulumi.Output<string | undefined>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    readonly compatibilityDate: pulumi.Output<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    readonly compatibilityFlags: pulumi.Output<string[]>;
    /**
     * Module or Service Worker contents of the Worker. Exactly one of `content` or `contentFile` must be specified.
     */
    readonly content: pulumi.Output<string | undefined>;
    /**
     * Path to a file containing the Module or Service Worker contents of the Worker. Exactly one of `content` or `contentFile` must be specified. Must be paired with `contentSha256`.
     */
    readonly contentFile: pulumi.Output<string | undefined>;
    /**
     * SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
     */
    readonly contentSha256: pulumi.Output<string | undefined>;
    /**
     * Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
     */
    readonly contentType: pulumi.Output<string | undefined>;
    /**
     * When the script was created.
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * Hashed script content, can be used in a If-None-Match header when updating.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * Whether a Worker contains assets.
     */
    readonly hasAssets: pulumi.Output<boolean>;
    /**
     * Whether a Worker contains modules.
     */
    readonly hasModules: pulumi.Output<boolean>;
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     */
    readonly keepAssets: pulumi.Output<boolean | undefined>;
    /**
     * List of binding types to keep from previous_upload.
     */
    readonly keepBindings: pulumi.Output<string[] | undefined>;
    /**
     * Whether Logpush is turned on for the Worker.
     */
    readonly logpush: pulumi.Output<boolean>;
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     */
    readonly mainModule: pulumi.Output<string | undefined>;
    /**
     * When the script was last modified.
     */
    readonly modifiedOn: pulumi.Output<string>;
    /**
     * Observability settings for the Worker.
     */
    readonly observability: pulumi.Output<outputs.WorkerScriptObservability | undefined>;
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     */
    readonly placement: pulumi.Output<outputs.WorkerScriptPlacement>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    readonly scriptName: pulumi.Output<string>;
    readonly startupTimeMs: pulumi.Output<number>;
    /**
     * List of Workers that will consume logs from the attached Worker.
     */
    readonly tailConsumers: pulumi.Output<outputs.WorkerScriptTailConsumer[]>;
    /**
     * Usage model for the Worker invocations.
     * Available values: "standard".
     */
    readonly usageModel: pulumi.Output<string>;
    /**
     * Create a WorkerScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript */
    constructor(name: string, args: WorkerScriptArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering WorkerScript resources.
 */
export interface WorkerScriptState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Configuration for assets within a Worker
     */
    assets?: pulumi.Input<inputs.WorkerScriptAssets>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptBinding>[]>;
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     */
    bodyPart?: pulumi.Input<string>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Module or Service Worker contents of the Worker. Exactly one of `content` or `contentFile` must be specified.
     */
    content?: pulumi.Input<string>;
    /**
     * Path to a file containing the Module or Service Worker contents of the Worker. Exactly one of `content` or `contentFile` must be specified. Must be paired with `contentSha256`.
     */
    contentFile?: pulumi.Input<string>;
    /**
     * SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
     */
    contentSha256?: pulumi.Input<string>;
    /**
     * Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
     */
    contentType?: pulumi.Input<string>;
    /**
     * When the script was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Hashed script content, can be used in a If-None-Match header when updating.
     */
    etag?: pulumi.Input<string>;
    /**
     * Whether a Worker contains assets.
     */
    hasAssets?: pulumi.Input<boolean>;
    /**
     * Whether a Worker contains modules.
     */
    hasModules?: pulumi.Input<boolean>;
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     */
    keepAssets?: pulumi.Input<boolean>;
    /**
     * List of binding types to keep from previous_upload.
     */
    keepBindings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether Logpush is turned on for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     */
    mainModule?: pulumi.Input<string>;
    /**
     * When the script was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerScriptObservability>;
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     */
    placement?: pulumi.Input<inputs.WorkerScriptPlacement>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName?: pulumi.Input<string>;
    startupTimeMs?: pulumi.Input<number>;
    /**
     * List of Workers that will consume logs from the attached Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerScriptTailConsumer>[]>;
    /**
     * Usage model for the Worker invocations.
     * Available values: "standard".
     */
    usageModel?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a WorkerScript resource.
 */
export interface WorkerScriptArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Configuration for assets within a Worker
     */
    assets?: pulumi.Input<inputs.WorkerScriptAssets>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptBinding>[]>;
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     */
    bodyPart?: pulumi.Input<string>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Module or Service Worker contents of the Worker. Exactly one of `content` or `contentFile` must be specified.
     */
    content?: pulumi.Input<string>;
    /**
     * Path to a file containing the Module or Service Worker contents of the Worker. Exactly one of `content` or `contentFile` must be specified. Must be paired with `contentSha256`.
     */
    contentFile?: pulumi.Input<string>;
    /**
     * SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
     */
    contentSha256?: pulumi.Input<string>;
    /**
     * Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
     */
    contentType?: pulumi.Input<string>;
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     */
    keepAssets?: pulumi.Input<boolean>;
    /**
     * List of binding types to keep from previous_upload.
     */
    keepBindings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether Logpush is turned on for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     */
    mainModule?: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerScriptObservability>;
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     */
    placement?: pulumi.Input<inputs.WorkerScriptPlacement>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName: pulumi.Input<string>;
    /**
     * List of Workers that will consume logs from the attached Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerScriptTailConsumer>[]>;
    /**
     * Usage model for the Worker invocations.
     * Available values: "standard".
     */
    usageModel?: pulumi.Input<string>;
}
