import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessGroup = cloudflare.getZeroTrustAccessGroup({
 *     groupId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 *     accountId: "account_id",
 *     zoneId: "zone_id",
 * });
 * ```
 */
export declare function getZeroTrustAccessGroup(args?: GetZeroTrustAccessGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetZeroTrustAccessGroupResult>;
/**
 * A collection of arguments for invoking getZeroTrustAccessGroup.
 */
export interface GetZeroTrustAccessGroupArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: string;
    filter?: inputs.GetZeroTrustAccessGroupFilter;
    /**
     * UUID.
     */
    groupId?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: string;
}
/**
 * A collection of values returned by getZeroTrustAccessGroup.
 */
export interface GetZeroTrustAccessGroupResult {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    readonly accountId?: string;
    readonly createdAt: string;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    readonly excludes: outputs.GetZeroTrustAccessGroupExclude[];
    readonly filter?: outputs.GetZeroTrustAccessGroupFilter;
    /**
     * UUID.
     */
    readonly groupId?: string;
    /**
     * UUID.
     */
    readonly id: string;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    readonly includes: outputs.GetZeroTrustAccessGroupInclude[];
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    readonly isDefaults: outputs.GetZeroTrustAccessGroupIsDefault[];
    /**
     * The name of the Access group.
     */
    readonly name: string;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    readonly requires: outputs.GetZeroTrustAccessGroupRequire[];
    readonly updatedAt: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    readonly zoneId?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessGroup = cloudflare.getZeroTrustAccessGroup({
 *     groupId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 *     accountId: "account_id",
 *     zoneId: "zone_id",
 * });
 * ```
 */
export declare function getZeroTrustAccessGroupOutput(args?: GetZeroTrustAccessGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZeroTrustAccessGroupResult>;
/**
 * A collection of arguments for invoking getZeroTrustAccessGroup.
 */
export interface GetZeroTrustAccessGroupOutputArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.GetZeroTrustAccessGroupFilterArgs>;
    /**
     * UUID.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
