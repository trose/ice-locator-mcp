import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { ECRClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ECRClient";
import { PutRegistryScanningConfigurationRequest, PutRegistryScanningConfigurationResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link PutRegistryScanningConfigurationCommand}.
 */
export interface PutRegistryScanningConfigurationCommandInput extends PutRegistryScanningConfigurationRequest {
}
/**
 * @public
 *
 * The output of {@link PutRegistryScanningConfigurationCommand}.
 */
export interface PutRegistryScanningConfigurationCommandOutput extends PutRegistryScanningConfigurationResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Creates or updates the scanning configuration for your private registry.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ECRClient, PutRegistryScanningConfigurationCommand } from "@aws-sdk/client-ecr"; // ES Modules import
 * // const { ECRClient, PutRegistryScanningConfigurationCommand } = require("@aws-sdk/client-ecr"); // CommonJS import
 * const client = new ECRClient(config);
 * const input = { // PutRegistryScanningConfigurationRequest
 *   scanType: "BASIC" || "ENHANCED",
 *   rules: [ // RegistryScanningRuleList
 *     { // RegistryScanningRule
 *       scanFrequency: "SCAN_ON_PUSH" || "CONTINUOUS_SCAN" || "MANUAL", // required
 *       repositoryFilters: [ // ScanningRepositoryFilterList // required
 *         { // ScanningRepositoryFilter
 *           filter: "STRING_VALUE", // required
 *           filterType: "WILDCARD", // required
 *         },
 *       ],
 *     },
 *   ],
 * };
 * const command = new PutRegistryScanningConfigurationCommand(input);
 * const response = await client.send(command);
 * // { // PutRegistryScanningConfigurationResponse
 * //   registryScanningConfiguration: { // RegistryScanningConfiguration
 * //     scanType: "BASIC" || "ENHANCED",
 * //     rules: [ // RegistryScanningRuleList
 * //       { // RegistryScanningRule
 * //         scanFrequency: "SCAN_ON_PUSH" || "CONTINUOUS_SCAN" || "MANUAL", // required
 * //         repositoryFilters: [ // ScanningRepositoryFilterList // required
 * //           { // ScanningRepositoryFilter
 * //             filter: "STRING_VALUE", // required
 * //             filterType: "WILDCARD", // required
 * //           },
 * //         ],
 * //       },
 * //     ],
 * //   },
 * // };
 *
 * ```
 *
 * @param PutRegistryScanningConfigurationCommandInput - {@link PutRegistryScanningConfigurationCommandInput}
 * @returns {@link PutRegistryScanningConfigurationCommandOutput}
 * @see {@link PutRegistryScanningConfigurationCommandInput} for command's `input` shape.
 * @see {@link PutRegistryScanningConfigurationCommandOutput} for command's `response` shape.
 * @see {@link ECRClientResolvedConfig | config} for ECRClient's `config` shape.
 *
 * @throws {@link InvalidParameterException} (client fault)
 *  <p>The specified parameter is invalid. Review the available parameters for the API
 *             request.</p>
 *
 * @throws {@link ServerException} (server fault)
 *  <p>These errors are usually caused by a server-side issue.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>There was an exception validating this request.</p>
 *
 * @throws {@link ECRServiceException}
 * <p>Base exception class for all service exceptions from ECR service.</p>
 *
 */
export declare class PutRegistryScanningConfigurationCommand extends $Command<PutRegistryScanningConfigurationCommandInput, PutRegistryScanningConfigurationCommandOutput, ECRClientResolvedConfig> {
    readonly input: PutRegistryScanningConfigurationCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: PutRegistryScanningConfigurationCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ECRClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRegistryScanningConfigurationCommandInput, PutRegistryScanningConfigurationCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
