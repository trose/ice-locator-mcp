"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_CreateRepositoryCommand = exports.de_CreatePullThroughCacheRuleCommand = exports.de_CompleteLayerUploadCommand = exports.de_BatchGetRepositoryScanningConfigurationCommand = exports.de_BatchGetImageCommand = exports.de_BatchDeleteImageCommand = exports.de_BatchCheckLayerAvailabilityCommand = exports.se_ValidatePullThroughCacheRuleCommand = exports.se_UploadLayerPartCommand = exports.se_UpdatePullThroughCacheRuleCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StartLifecyclePolicyPreviewCommand = exports.se_StartImageScanCommand = exports.se_SetRepositoryPolicyCommand = exports.se_PutReplicationConfigurationCommand = exports.se_PutRegistryScanningConfigurationCommand = exports.se_PutRegistryPolicyCommand = exports.se_PutLifecyclePolicyCommand = exports.se_PutImageTagMutabilityCommand = exports.se_PutImageScanningConfigurationCommand = exports.se_PutImageCommand = exports.se_ListTagsForResourceCommand = exports.se_ListImagesCommand = exports.se_InitiateLayerUploadCommand = exports.se_GetRepositoryPolicyCommand = exports.se_GetRegistryScanningConfigurationCommand = exports.se_GetRegistryPolicyCommand = exports.se_GetLifecyclePolicyPreviewCommand = exports.se_GetLifecyclePolicyCommand = exports.se_GetDownloadUrlForLayerCommand = exports.se_GetAuthorizationTokenCommand = exports.se_DescribeRepositoriesCommand = exports.se_DescribeRegistryCommand = exports.se_DescribePullThroughCacheRulesCommand = exports.se_DescribeImageScanFindingsCommand = exports.se_DescribeImagesCommand = exports.se_DescribeImageReplicationStatusCommand = exports.se_DeleteRepositoryPolicyCommand = exports.se_DeleteRepositoryCommand = exports.se_DeleteRegistryPolicyCommand = exports.se_DeletePullThroughCacheRuleCommand = exports.se_DeleteLifecyclePolicyCommand = exports.se_CreateRepositoryCommand = exports.se_CreatePullThroughCacheRuleCommand = exports.se_CompleteLayerUploadCommand = exports.se_BatchGetRepositoryScanningConfigurationCommand = exports.se_BatchGetImageCommand = exports.se_BatchDeleteImageCommand = exports.se_BatchCheckLayerAvailabilityCommand = void 0;
exports.de_ValidatePullThroughCacheRuleCommand = exports.de_UploadLayerPartCommand = exports.de_UpdatePullThroughCacheRuleCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StartLifecyclePolicyPreviewCommand = exports.de_StartImageScanCommand = exports.de_SetRepositoryPolicyCommand = exports.de_PutReplicationConfigurationCommand = exports.de_PutRegistryScanningConfigurationCommand = exports.de_PutRegistryPolicyCommand = exports.de_PutLifecyclePolicyCommand = exports.de_PutImageTagMutabilityCommand = exports.de_PutImageScanningConfigurationCommand = exports.de_PutImageCommand = exports.de_ListTagsForResourceCommand = exports.de_ListImagesCommand = exports.de_InitiateLayerUploadCommand = exports.de_GetRepositoryPolicyCommand = exports.de_GetRegistryScanningConfigurationCommand = exports.de_GetRegistryPolicyCommand = exports.de_GetLifecyclePolicyPreviewCommand = exports.de_GetLifecyclePolicyCommand = exports.de_GetDownloadUrlForLayerCommand = exports.de_GetAuthorizationTokenCommand = exports.de_DescribeRepositoriesCommand = exports.de_DescribeRegistryCommand = exports.de_DescribePullThroughCacheRulesCommand = exports.de_DescribeImageScanFindingsCommand = exports.de_DescribeImagesCommand = exports.de_DescribeImageReplicationStatusCommand = exports.de_DeleteRepositoryPolicyCommand = exports.de_DeleteRepositoryCommand = exports.de_DeleteRegistryPolicyCommand = exports.de_DeletePullThroughCacheRuleCommand = exports.de_DeleteLifecyclePolicyCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const ECRServiceException_1 = require("../models/ECRServiceException");
const models_0_1 = require("../models/models_0");
const se_BatchCheckLayerAvailabilityCommand = async (input, context) => {
    const headers = sharedHeaders("BatchCheckLayerAvailability");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchCheckLayerAvailabilityCommand = se_BatchCheckLayerAvailabilityCommand;
const se_BatchDeleteImageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteImage");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchDeleteImageCommand = se_BatchDeleteImageCommand;
const se_BatchGetImageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetImage");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetImageCommand = se_BatchGetImageCommand;
const se_BatchGetRepositoryScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetRepositoryScanningConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetRepositoryScanningConfigurationCommand = se_BatchGetRepositoryScanningConfigurationCommand;
const se_CompleteLayerUploadCommand = async (input, context) => {
    const headers = sharedHeaders("CompleteLayerUpload");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CompleteLayerUploadCommand = se_CompleteLayerUploadCommand;
const se_CreatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePullThroughCacheRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreatePullThroughCacheRuleCommand = se_CreatePullThroughCacheRuleCommand;
const se_CreateRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRepository");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRepositoryCommand = se_CreateRepositoryCommand;
const se_DeleteLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLifecyclePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteLifecyclePolicyCommand = se_DeleteLifecyclePolicyCommand;
const se_DeletePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePullThroughCacheRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePullThroughCacheRuleCommand = se_DeletePullThroughCacheRuleCommand;
const se_DeleteRegistryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistryPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRegistryPolicyCommand = se_DeleteRegistryPolicyCommand;
const se_DeleteRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRepository");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRepositoryCommand = se_DeleteRepositoryCommand;
const se_DeleteRepositoryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRepositoryPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRepositoryPolicyCommand = se_DeleteRepositoryPolicyCommand;
const se_DescribeImageReplicationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageReplicationStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeImageReplicationStatusCommand = se_DescribeImageReplicationStatusCommand;
const se_DescribeImagesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImages");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeImagesCommand = se_DescribeImagesCommand;
const se_DescribeImageScanFindingsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageScanFindings");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeImageScanFindingsCommand = se_DescribeImageScanFindingsCommand;
const se_DescribePullThroughCacheRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePullThroughCacheRules");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePullThroughCacheRulesCommand = se_DescribePullThroughCacheRulesCommand;
const se_DescribeRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRegistryCommand = se_DescribeRegistryCommand;
const se_DescribeRepositoriesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRepositories");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRepositoriesCommand = se_DescribeRepositoriesCommand;
const se_GetAuthorizationTokenCommand = async (input, context) => {
    const headers = sharedHeaders("GetAuthorizationToken");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAuthorizationTokenCommand = se_GetAuthorizationTokenCommand;
const se_GetDownloadUrlForLayerCommand = async (input, context) => {
    const headers = sharedHeaders("GetDownloadUrlForLayer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDownloadUrlForLayerCommand = se_GetDownloadUrlForLayerCommand;
const se_GetLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetLifecyclePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLifecyclePolicyCommand = se_GetLifecyclePolicyCommand;
const se_GetLifecyclePolicyPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("GetLifecyclePolicyPreview");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLifecyclePolicyPreviewCommand = se_GetLifecyclePolicyPreviewCommand;
const se_GetRegistryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegistryPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRegistryPolicyCommand = se_GetRegistryPolicyCommand;
const se_GetRegistryScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegistryScanningConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRegistryScanningConfigurationCommand = se_GetRegistryScanningConfigurationCommand;
const se_GetRepositoryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetRepositoryPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRepositoryPolicyCommand = se_GetRepositoryPolicyCommand;
const se_InitiateLayerUploadCommand = async (input, context) => {
    const headers = sharedHeaders("InitiateLayerUpload");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_InitiateLayerUploadCommand = se_InitiateLayerUploadCommand;
const se_ListImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListImages");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListImagesCommand = se_ListImagesCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_PutImageCommand = async (input, context) => {
    const headers = sharedHeaders("PutImage");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutImageCommand = se_PutImageCommand;
const se_PutImageScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutImageScanningConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutImageScanningConfigurationCommand = se_PutImageScanningConfigurationCommand;
const se_PutImageTagMutabilityCommand = async (input, context) => {
    const headers = sharedHeaders("PutImageTagMutability");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutImageTagMutabilityCommand = se_PutImageTagMutabilityCommand;
const se_PutLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutLifecyclePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutLifecyclePolicyCommand = se_PutLifecyclePolicyCommand;
const se_PutRegistryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutRegistryPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRegistryPolicyCommand = se_PutRegistryPolicyCommand;
const se_PutRegistryScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutRegistryScanningConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRegistryScanningConfigurationCommand = se_PutRegistryScanningConfigurationCommand;
const se_PutReplicationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutReplicationConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutReplicationConfigurationCommand = se_PutReplicationConfigurationCommand;
const se_SetRepositoryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("SetRepositoryPolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SetRepositoryPolicyCommand = se_SetRepositoryPolicyCommand;
const se_StartImageScanCommand = async (input, context) => {
    const headers = sharedHeaders("StartImageScan");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartImageScanCommand = se_StartImageScanCommand;
const se_StartLifecyclePolicyPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("StartLifecyclePolicyPreview");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartLifecyclePolicyPreviewCommand = se_StartLifecyclePolicyPreviewCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePullThroughCacheRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdatePullThroughCacheRuleCommand = se_UpdatePullThroughCacheRuleCommand;
const se_UploadLayerPartCommand = async (input, context) => {
    const headers = sharedHeaders("UploadLayerPart");
    let body;
    body = JSON.stringify(se_UploadLayerPartRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UploadLayerPartCommand = se_UploadLayerPartCommand;
const se_ValidatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("ValidatePullThroughCacheRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ValidatePullThroughCacheRuleCommand = se_ValidatePullThroughCacheRuleCommand;
const de_BatchCheckLayerAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchCheckLayerAvailabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchCheckLayerAvailabilityCommand = de_BatchCheckLayerAvailabilityCommand;
const de_BatchCheckLayerAvailabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDeleteImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchDeleteImageCommand = de_BatchDeleteImageCommand;
const de_BatchDeleteImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetImageCommand = de_BatchGetImageCommand;
const de_BatchGetImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnableToGetUpstreamImageException":
        case "com.amazonaws.ecr#UnableToGetUpstreamImageException":
            throw await de_UnableToGetUpstreamImageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetRepositoryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetRepositoryScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetRepositoryScanningConfigurationCommand = de_BatchGetRepositoryScanningConfigurationCommand;
const de_BatchGetRepositoryScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CompleteLayerUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CompleteLayerUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CompleteLayerUploadCommand = de_CompleteLayerUploadCommand;
const de_CompleteLayerUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EmptyUploadException":
        case "com.amazonaws.ecr#EmptyUploadException":
            throw await de_EmptyUploadExceptionRes(parsedOutput, context);
        case "InvalidLayerException":
        case "com.amazonaws.ecr#InvalidLayerException":
            throw await de_InvalidLayerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "LayerAlreadyExistsException":
        case "com.amazonaws.ecr#LayerAlreadyExistsException":
            throw await de_LayerAlreadyExistsExceptionRes(parsedOutput, context);
        case "LayerPartTooSmallException":
        case "com.amazonaws.ecr#LayerPartTooSmallException":
            throw await de_LayerPartTooSmallExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UploadNotFoundException":
        case "com.amazonaws.ecr#UploadNotFoundException":
            throw await de_UploadNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePullThroughCacheRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePullThroughCacheRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreatePullThroughCacheRuleCommand = de_CreatePullThroughCacheRuleCommand;
const de_CreatePullThroughCacheRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PullThroughCacheRuleAlreadyExistsException":
        case "com.amazonaws.ecr#PullThroughCacheRuleAlreadyExistsException":
            throw await de_PullThroughCacheRuleAlreadyExistsExceptionRes(parsedOutput, context);
        case "SecretNotFoundException":
        case "com.amazonaws.ecr#SecretNotFoundException":
            throw await de_SecretNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnableToAccessSecretException":
        case "com.amazonaws.ecr#UnableToAccessSecretException":
            throw await de_UnableToAccessSecretExceptionRes(parsedOutput, context);
        case "UnableToDecryptSecretValueException":
        case "com.amazonaws.ecr#UnableToDecryptSecretValueException":
            throw await de_UnableToDecryptSecretValueExceptionRes(parsedOutput, context);
        case "UnsupportedUpstreamRegistryException":
        case "com.amazonaws.ecr#UnsupportedUpstreamRegistryException":
            throw await de_UnsupportedUpstreamRegistryExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRepositoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateRepositoryCommand = de_CreateRepositoryCommand;
const de_CreateRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await de_InvalidTagParameterExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "RepositoryAlreadyExistsException":
        case "com.amazonaws.ecr#RepositoryAlreadyExistsException":
            throw await de_RepositoryAlreadyExistsExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLifecyclePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteLifecyclePolicyCommand = de_DeleteLifecyclePolicyCommand;
const de_DeleteLifecyclePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await de_LifecyclePolicyNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeletePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePullThroughCacheRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeletePullThroughCacheRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeletePullThroughCacheRuleCommand = de_DeletePullThroughCacheRuleCommand;
const de_DeletePullThroughCacheRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await de_PullThroughCacheRuleNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRegistryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRegistryPolicyCommand = de_DeleteRegistryPolicyCommand;
const de_DeleteRegistryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RegistryPolicyNotFoundException":
        case "com.amazonaws.ecr#RegistryPolicyNotFoundException":
            throw await de_RegistryPolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRepositoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRepositoryCommand = de_DeleteRepositoryCommand;
const de_DeleteRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "RepositoryNotEmptyException":
        case "com.amazonaws.ecr#RepositoryNotEmptyException":
            throw await de_RepositoryNotEmptyExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRepositoryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRepositoryPolicyCommand = de_DeleteRepositoryPolicyCommand;
const de_DeleteRepositoryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryPolicyNotFoundException":
        case "com.amazonaws.ecr#RepositoryPolicyNotFoundException":
            throw await de_RepositoryPolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeImageReplicationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImageReplicationStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeImageReplicationStatusCommand = de_DescribeImageReplicationStatusCommand;
const de_DescribeImageReplicationStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await de_ImageNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImagesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeImagesCommand = de_DescribeImagesCommand;
const de_DescribeImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await de_ImageNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeImageScanFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeImageScanFindingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageScanFindingsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeImageScanFindingsCommand = de_DescribeImageScanFindingsCommand;
const de_DescribeImageScanFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await de_ImageNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ScanNotFoundException":
        case "com.amazonaws.ecr#ScanNotFoundException":
            throw await de_ScanNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribePullThroughCacheRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePullThroughCacheRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePullThroughCacheRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribePullThroughCacheRulesCommand = de_DescribePullThroughCacheRulesCommand;
const de_DescribePullThroughCacheRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await de_PullThroughCacheRuleNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRegistryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeRegistryCommand = de_DescribeRegistryCommand;
const de_DescribeRegistryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRepositoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRepositoriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeRepositoriesCommand = de_DescribeRepositoriesCommand;
const de_DescribeRepositoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAuthorizationTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAuthorizationTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAuthorizationTokenResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAuthorizationTokenCommand = de_GetAuthorizationTokenCommand;
const de_GetAuthorizationTokenCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDownloadUrlForLayerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDownloadUrlForLayerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDownloadUrlForLayerCommand = de_GetDownloadUrlForLayerCommand;
const de_GetDownloadUrlForLayerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LayerInaccessibleException":
        case "com.amazonaws.ecr#LayerInaccessibleException":
            throw await de_LayerInaccessibleExceptionRes(parsedOutput, context);
        case "LayersNotFoundException":
        case "com.amazonaws.ecr#LayersNotFoundException":
            throw await de_LayersNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnableToGetUpstreamLayerException":
        case "com.amazonaws.ecr#UnableToGetUpstreamLayerException":
            throw await de_UnableToGetUpstreamLayerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLifecyclePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLifecyclePolicyCommand = de_GetLifecyclePolicyCommand;
const de_GetLifecyclePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await de_LifecyclePolicyNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLifecyclePolicyPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLifecyclePolicyPreviewCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLifecyclePolicyPreviewResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLifecyclePolicyPreviewCommand = de_GetLifecyclePolicyPreviewCommand;
const de_GetLifecyclePolicyPreviewCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LifecyclePolicyPreviewNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyPreviewNotFoundException":
            throw await de_LifecyclePolicyPreviewNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRegistryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRegistryPolicyCommand = de_GetRegistryPolicyCommand;
const de_GetRegistryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RegistryPolicyNotFoundException":
        case "com.amazonaws.ecr#RegistryPolicyNotFoundException":
            throw await de_RegistryPolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRegistryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRegistryScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRegistryScanningConfigurationCommand = de_GetRegistryScanningConfigurationCommand;
const de_GetRegistryScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRepositoryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRepositoryPolicyCommand = de_GetRepositoryPolicyCommand;
const de_GetRepositoryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryPolicyNotFoundException":
        case "com.amazonaws.ecr#RepositoryPolicyNotFoundException":
            throw await de_RepositoryPolicyNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InitiateLayerUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_InitiateLayerUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_InitiateLayerUploadCommand = de_InitiateLayerUploadCommand;
const de_InitiateLayerUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListImagesCommand = de_ListImagesCommand;
const de_ListImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutImageCommand = de_PutImageCommand;
const de_PutImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageAlreadyExistsException":
        case "com.amazonaws.ecr#ImageAlreadyExistsException":
            throw await de_ImageAlreadyExistsExceptionRes(parsedOutput, context);
        case "ImageDigestDoesNotMatchException":
        case "com.amazonaws.ecr#ImageDigestDoesNotMatchException":
            throw await de_ImageDigestDoesNotMatchExceptionRes(parsedOutput, context);
        case "ImageTagAlreadyExistsException":
        case "com.amazonaws.ecr#ImageTagAlreadyExistsException":
            throw await de_ImageTagAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "LayersNotFoundException":
        case "com.amazonaws.ecr#LayersNotFoundException":
            throw await de_LayersNotFoundExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ReferencedImagesNotFoundException":
        case "com.amazonaws.ecr#ReferencedImagesNotFoundException":
            throw await de_ReferencedImagesNotFoundExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutImageScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutImageScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutImageScanningConfigurationCommand = de_PutImageScanningConfigurationCommand;
const de_PutImageScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutImageTagMutabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutImageTagMutabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutImageTagMutabilityCommand = de_PutImageTagMutabilityCommand;
const de_PutImageTagMutabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutLifecyclePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutLifecyclePolicyCommand = de_PutLifecyclePolicyCommand;
const de_PutLifecyclePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRegistryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutRegistryPolicyCommand = de_PutRegistryPolicyCommand;
const de_PutRegistryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutRegistryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRegistryScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutRegistryScanningConfigurationCommand = de_PutRegistryScanningConfigurationCommand;
const de_PutRegistryScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutReplicationConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutReplicationConfigurationCommand = de_PutReplicationConfigurationCommand;
const de_PutReplicationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SetRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SetRepositoryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SetRepositoryPolicyCommand = de_SetRepositoryPolicyCommand;
const de_SetRepositoryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartImageScanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartImageScanCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartImageScanCommand = de_StartImageScanCommand;
const de_StartImageScanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await de_ImageNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnsupportedImageTypeException":
        case "com.amazonaws.ecr#UnsupportedImageTypeException":
            throw await de_UnsupportedImageTypeExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartLifecyclePolicyPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartLifecyclePolicyPreviewCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartLifecyclePolicyPreviewCommand = de_StartLifecyclePolicyPreviewCommand;
const de_StartLifecyclePolicyPreviewCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await de_LifecyclePolicyNotFoundExceptionRes(parsedOutput, context);
        case "LifecyclePolicyPreviewInProgressException":
        case "com.amazonaws.ecr#LifecyclePolicyPreviewInProgressException":
            throw await de_LifecyclePolicyPreviewInProgressExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await de_InvalidTagParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await de_InvalidTagParameterExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdatePullThroughCacheRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdatePullThroughCacheRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdatePullThroughCacheRuleCommand = de_UpdatePullThroughCacheRuleCommand;
const de_UpdatePullThroughCacheRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await de_PullThroughCacheRuleNotFoundExceptionRes(parsedOutput, context);
        case "SecretNotFoundException":
        case "com.amazonaws.ecr#SecretNotFoundException":
            throw await de_SecretNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnableToAccessSecretException":
        case "com.amazonaws.ecr#UnableToAccessSecretException":
            throw await de_UnableToAccessSecretExceptionRes(parsedOutput, context);
        case "UnableToDecryptSecretValueException":
        case "com.amazonaws.ecr#UnableToDecryptSecretValueException":
            throw await de_UnableToDecryptSecretValueExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UploadLayerPartCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UploadLayerPartCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UploadLayerPartCommand = de_UploadLayerPartCommand;
const de_UploadLayerPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLayerPartException":
        case "com.amazonaws.ecr#InvalidLayerPartException":
            throw await de_InvalidLayerPartExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UploadNotFoundException":
        case "com.amazonaws.ecr#UploadNotFoundException":
            throw await de_UploadNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ValidatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ValidatePullThroughCacheRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ValidatePullThroughCacheRuleCommand = de_ValidatePullThroughCacheRuleCommand;
const de_ValidatePullThroughCacheRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await de_PullThroughCacheRuleNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EmptyUploadExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.EmptyUploadException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ImageAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ImageAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ImageDigestDoesNotMatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ImageDigestDoesNotMatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ImageNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ImageNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ImageTagAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ImageTagAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidLayerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidLayerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidLayerPartExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidLayerPartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTagParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTagParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_KmsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.KmsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LayerAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LayerAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LayerInaccessibleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LayerInaccessibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LayerPartTooSmallExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LayerPartTooSmallException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LayersNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LayersNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LifecyclePolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LifecyclePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LifecyclePolicyPreviewInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LifecyclePolicyPreviewInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LifecyclePolicyPreviewNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LifecyclePolicyPreviewNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PullThroughCacheRuleAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PullThroughCacheRuleAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PullThroughCacheRuleNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PullThroughCacheRuleNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ReferencedImagesNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ReferencedImagesNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RegistryPolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RegistryPolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RepositoryAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RepositoryAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RepositoryNotEmptyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RepositoryNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RepositoryNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RepositoryNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RepositoryPolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RepositoryPolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ScanNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ScanNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SecretNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.SecretNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnableToAccessSecretExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnableToAccessSecretException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnableToDecryptSecretValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnableToDecryptSecretValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnableToGetUpstreamImageExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnableToGetUpstreamImageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnableToGetUpstreamLayerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnableToGetUpstreamLayerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedImageTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedImageTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedUpstreamRegistryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedUpstreamRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UploadNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UploadNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_UploadLayerPartRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        layerPartBlob: context.base64Encoder,
        partFirstByte: [],
        partLastByte: [],
        registryId: [],
        repositoryName: [],
        uploadId: [],
    });
};
const de_AuthorizationData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        authorizationToken: smithy_client_1.expectString,
        expiresAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        proxyEndpoint: smithy_client_1.expectString,
    });
};
const de_AuthorizationDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthorizationData(entry, context);
    });
    return retVal;
};
const de_AwsEcrContainerImageDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        architecture: smithy_client_1.expectString,
        author: smithy_client_1.expectString,
        imageHash: smithy_client_1.expectString,
        imageTags: smithy_client_1._json,
        platform: smithy_client_1.expectString,
        pushedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        registry: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
    });
};
const de_CreatePullThroughCacheRuleResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        credentialArn: smithy_client_1.expectString,
        ecrRepositoryPrefix: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        upstreamRegistry: smithy_client_1.expectString,
        upstreamRegistryUrl: smithy_client_1.expectString,
    });
};
const de_CreateRepositoryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        repository: (_) => de_Repository(_, context),
    });
};
const de_CvssScore = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        baseScore: smithy_client_1.limitedParseDouble,
        scoringVector: smithy_client_1.expectString,
        source: smithy_client_1.expectString,
        version: smithy_client_1.expectString,
    });
};
const de_CvssScoreDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        adjustments: smithy_client_1._json,
        score: smithy_client_1.limitedParseDouble,
        scoreSource: smithy_client_1.expectString,
        scoringVector: smithy_client_1.expectString,
        version: smithy_client_1.expectString,
    });
};
const de_CvssScoreList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CvssScore(entry, context);
    });
    return retVal;
};
const de_DeleteLifecyclePolicyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastEvaluatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lifecyclePolicyText: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
    });
};
const de_DeletePullThroughCacheRuleResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        credentialArn: smithy_client_1.expectString,
        ecrRepositoryPrefix: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        upstreamRegistryUrl: smithy_client_1.expectString,
    });
};
const de_DeleteRepositoryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        repository: (_) => de_Repository(_, context),
    });
};
const de_DescribeImageScanFindingsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        imageId: smithy_client_1._json,
        imageScanFindings: (_) => de_ImageScanFindings(_, context),
        imageScanStatus: smithy_client_1._json,
        nextToken: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
    });
};
const de_DescribeImagesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        imageDetails: (_) => de_ImageDetailList(_, context),
        nextToken: smithy_client_1.expectString,
    });
};
const de_DescribePullThroughCacheRulesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextToken: smithy_client_1.expectString,
        pullThroughCacheRules: (_) => de_PullThroughCacheRuleList(_, context),
    });
};
const de_DescribeRepositoriesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextToken: smithy_client_1.expectString,
        repositories: (_) => de_RepositoryList(_, context),
    });
};
const de_EnhancedImageScanFinding = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        awsAccountId: smithy_client_1.expectString,
        description: smithy_client_1.expectString,
        findingArn: smithy_client_1.expectString,
        firstObservedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastObservedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        packageVulnerabilityDetails: (_) => de_PackageVulnerabilityDetails(_, context),
        remediation: smithy_client_1._json,
        resources: (_) => de_ResourceList(_, context),
        score: smithy_client_1.limitedParseDouble,
        scoreDetails: (_) => de_ScoreDetails(_, context),
        severity: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        title: smithy_client_1.expectString,
        type: smithy_client_1.expectString,
        updatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_EnhancedImageScanFindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnhancedImageScanFinding(entry, context);
    });
    return retVal;
};
const de_GetAuthorizationTokenResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        authorizationData: (_) => de_AuthorizationDataList(_, context),
    });
};
const de_GetLifecyclePolicyPreviewResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lifecyclePolicyText: smithy_client_1.expectString,
        nextToken: smithy_client_1.expectString,
        previewResults: (_) => de_LifecyclePolicyPreviewResultList(_, context),
        registryId: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        summary: smithy_client_1._json,
    });
};
const de_GetLifecyclePolicyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastEvaluatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lifecyclePolicyText: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
    });
};
const de_ImageDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        artifactMediaType: smithy_client_1.expectString,
        imageDigest: smithy_client_1.expectString,
        imageManifestMediaType: smithy_client_1.expectString,
        imagePushedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        imageScanFindingsSummary: (_) => de_ImageScanFindingsSummary(_, context),
        imageScanStatus: smithy_client_1._json,
        imageSizeInBytes: smithy_client_1.expectLong,
        imageTags: smithy_client_1._json,
        lastRecordedPullTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        registryId: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
    });
};
const de_ImageDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageDetail(entry, context);
    });
    return retVal;
};
const de_ImageScanFindings = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        enhancedFindings: (_) => de_EnhancedImageScanFindingList(_, context),
        findingSeverityCounts: smithy_client_1._json,
        findings: smithy_client_1._json,
        imageScanCompletedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        vulnerabilitySourceUpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ImageScanFindingsSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        findingSeverityCounts: smithy_client_1._json,
        imageScanCompletedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        vulnerabilitySourceUpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_LifecyclePolicyPreviewResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        action: smithy_client_1._json,
        appliedRulePriority: smithy_client_1.expectInt32,
        imageDigest: smithy_client_1.expectString,
        imagePushedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        imageTags: smithy_client_1._json,
    });
};
const de_LifecyclePolicyPreviewResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LifecyclePolicyPreviewResult(entry, context);
    });
    return retVal;
};
const de_PackageVulnerabilityDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        cvss: (_) => de_CvssScoreList(_, context),
        referenceUrls: smithy_client_1._json,
        relatedVulnerabilities: smithy_client_1._json,
        source: smithy_client_1.expectString,
        sourceUrl: smithy_client_1.expectString,
        vendorCreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        vendorSeverity: smithy_client_1.expectString,
        vendorUpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        vulnerabilityId: smithy_client_1.expectString,
        vulnerablePackages: smithy_client_1._json,
    });
};
const de_PullThroughCacheRule = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        credentialArn: smithy_client_1.expectString,
        ecrRepositoryPrefix: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        updatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        upstreamRegistry: smithy_client_1.expectString,
        upstreamRegistryUrl: smithy_client_1.expectString,
    });
};
const de_PullThroughCacheRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PullThroughCacheRule(entry, context);
    });
    return retVal;
};
const de_Repository = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        encryptionConfiguration: smithy_client_1._json,
        imageScanningConfiguration: smithy_client_1._json,
        imageTagMutability: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        repositoryArn: smithy_client_1.expectString,
        repositoryName: smithy_client_1.expectString,
        repositoryUri: smithy_client_1.expectString,
    });
};
const de_RepositoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Repository(entry, context);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        details: (_) => de_ResourceDetails(_, context),
        id: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        type: smithy_client_1.expectString,
    });
};
const de_ResourceDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        awsEcrContainerImage: (_) => de_AwsEcrContainerImageDetails(_, context),
    });
};
const de_ResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry, context);
    });
    return retVal;
};
const de_ScoreDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        cvss: (_) => de_CvssScoreDetails(_, context),
    });
};
const de_UpdatePullThroughCacheRuleResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        credentialArn: smithy_client_1.expectString,
        ecrRepositoryPrefix: smithy_client_1.expectString,
        registryId: smithy_client_1.expectString,
        updatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(ECRServiceException_1.ECRServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonEC2ContainerRegistry_V20150921.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
