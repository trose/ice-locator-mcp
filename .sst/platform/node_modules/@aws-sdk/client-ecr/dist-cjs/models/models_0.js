"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageDigestDoesNotMatchException = exports.ImageAlreadyExistsException = exports.ScanType = exports.LifecyclePolicyPreviewNotFoundException = exports.LifecyclePolicyPreviewStatus = exports.ImageActionType = exports.UnableToGetUpstreamLayerException = exports.LayersNotFoundException = exports.LayerInaccessibleException = exports.RepositoryFilterType = exports.ScanNotFoundException = exports.ScanStatus = exports.FindingSeverity = exports.TagStatus = exports.ImageNotFoundException = exports.ReplicationStatus = exports.RepositoryPolicyNotFoundException = exports.RepositoryNotEmptyException = exports.RegistryPolicyNotFoundException = exports.PullThroughCacheRuleNotFoundException = exports.LifecyclePolicyNotFoundException = exports.TooManyTagsException = exports.RepositoryAlreadyExistsException = exports.InvalidTagParameterException = exports.ImageTagMutability = exports.EncryptionType = exports.UnsupportedUpstreamRegistryException = exports.UnableToDecryptSecretValueException = exports.UnableToAccessSecretException = exports.SecretNotFoundException = exports.PullThroughCacheRuleAlreadyExistsException = exports.UpstreamRegistry = exports.UploadNotFoundException = exports.LayerPartTooSmallException = exports.LayerAlreadyExistsException = exports.KmsException = exports.InvalidLayerException = exports.EmptyUploadException = exports.ValidationException = exports.ScanFrequency = exports.ScanningRepositoryFilterType = exports.ScanningConfigurationFailureCode = exports.UnableToGetUpstreamImageException = exports.LimitExceededException = exports.ImageFailureCode = exports.ServerException = exports.RepositoryNotFoundException = exports.InvalidParameterException = exports.LayerAvailability = exports.LayerFailureCode = void 0;
exports.InvalidLayerPartException = exports.LifecyclePolicyPreviewInProgressException = exports.UnsupportedImageTypeException = exports.ReferencedImagesNotFoundException = exports.ImageTagAlreadyExistsException = void 0;
const ECRServiceException_1 = require("./ECRServiceException");
exports.LayerFailureCode = {
    InvalidLayerDigest: "InvalidLayerDigest",
    MissingLayerDigest: "MissingLayerDigest",
};
exports.LayerAvailability = {
    AVAILABLE: "AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
class InvalidParameterException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
exports.InvalidParameterException = InvalidParameterException;
class RepositoryNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "RepositoryNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNotFoundException.prototype);
    }
}
exports.RepositoryNotFoundException = RepositoryNotFoundException;
class ServerException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServerException.prototype);
    }
}
exports.ServerException = ServerException;
exports.ImageFailureCode = {
    ImageNotFound: "ImageNotFound",
    ImageReferencedByManifestList: "ImageReferencedByManifestList",
    ImageTagDoesNotMatchDigest: "ImageTagDoesNotMatchDigest",
    InvalidImageDigest: "InvalidImageDigest",
    InvalidImageTag: "InvalidImageTag",
    KmsError: "KmsError",
    MissingDigestAndTag: "MissingDigestAndTag",
    UpstreamAccessDenied: "UpstreamAccessDenied",
    UpstreamTooManyRequests: "UpstreamTooManyRequests",
    UpstreamUnavailable: "UpstreamUnavailable",
};
class LimitExceededException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class UnableToGetUpstreamImageException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UnableToGetUpstreamImageException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnableToGetUpstreamImageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnableToGetUpstreamImageException.prototype);
    }
}
exports.UnableToGetUpstreamImageException = UnableToGetUpstreamImageException;
exports.ScanningConfigurationFailureCode = {
    REPOSITORY_NOT_FOUND: "REPOSITORY_NOT_FOUND",
};
exports.ScanningRepositoryFilterType = {
    WILDCARD: "WILDCARD",
};
exports.ScanFrequency = {
    CONTINUOUS_SCAN: "CONTINUOUS_SCAN",
    MANUAL: "MANUAL",
    SCAN_ON_PUSH: "SCAN_ON_PUSH",
};
class ValidationException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
exports.ValidationException = ValidationException;
class EmptyUploadException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "EmptyUploadException",
            $fault: "client",
            ...opts,
        });
        this.name = "EmptyUploadException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EmptyUploadException.prototype);
    }
}
exports.EmptyUploadException = EmptyUploadException;
class InvalidLayerException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "InvalidLayerException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLayerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLayerException.prototype);
    }
}
exports.InvalidLayerException = InvalidLayerException;
class KmsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "KmsException",
            $fault: "client",
            ...opts,
        });
        this.name = "KmsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, KmsException.prototype);
        this.kmsError = opts.kmsError;
    }
}
exports.KmsException = KmsException;
class LayerAlreadyExistsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LayerAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayerAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayerAlreadyExistsException.prototype);
    }
}
exports.LayerAlreadyExistsException = LayerAlreadyExistsException;
class LayerPartTooSmallException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LayerPartTooSmallException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayerPartTooSmallException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayerPartTooSmallException.prototype);
    }
}
exports.LayerPartTooSmallException = LayerPartTooSmallException;
class UploadNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UploadNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "UploadNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UploadNotFoundException.prototype);
    }
}
exports.UploadNotFoundException = UploadNotFoundException;
exports.UpstreamRegistry = {
    AzureContainerRegistry: "azure-container-registry",
    DockerHub: "docker-hub",
    EcrPublic: "ecr-public",
    GitHubContainerRegistry: "github-container-registry",
    K8s: "k8s",
    Quay: "quay",
};
class PullThroughCacheRuleAlreadyExistsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "PullThroughCacheRuleAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullThroughCacheRuleAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullThroughCacheRuleAlreadyExistsException.prototype);
    }
}
exports.PullThroughCacheRuleAlreadyExistsException = PullThroughCacheRuleAlreadyExistsException;
class SecretNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "SecretNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SecretNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SecretNotFoundException.prototype);
    }
}
exports.SecretNotFoundException = SecretNotFoundException;
class UnableToAccessSecretException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UnableToAccessSecretException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnableToAccessSecretException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnableToAccessSecretException.prototype);
    }
}
exports.UnableToAccessSecretException = UnableToAccessSecretException;
class UnableToDecryptSecretValueException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UnableToDecryptSecretValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnableToDecryptSecretValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnableToDecryptSecretValueException.prototype);
    }
}
exports.UnableToDecryptSecretValueException = UnableToDecryptSecretValueException;
class UnsupportedUpstreamRegistryException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedUpstreamRegistryException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedUpstreamRegistryException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedUpstreamRegistryException.prototype);
    }
}
exports.UnsupportedUpstreamRegistryException = UnsupportedUpstreamRegistryException;
exports.EncryptionType = {
    AES256: "AES256",
    KMS: "KMS",
};
exports.ImageTagMutability = {
    IMMUTABLE: "IMMUTABLE",
    MUTABLE: "MUTABLE",
};
class InvalidTagParameterException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagParameterException.prototype);
    }
}
exports.InvalidTagParameterException = InvalidTagParameterException;
class RepositoryAlreadyExistsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "RepositoryAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryAlreadyExistsException.prototype);
    }
}
exports.RepositoryAlreadyExistsException = RepositoryAlreadyExistsException;
class TooManyTagsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
exports.TooManyTagsException = TooManyTagsException;
class LifecyclePolicyNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LifecyclePolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LifecyclePolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecyclePolicyNotFoundException.prototype);
    }
}
exports.LifecyclePolicyNotFoundException = LifecyclePolicyNotFoundException;
class PullThroughCacheRuleNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "PullThroughCacheRuleNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullThroughCacheRuleNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullThroughCacheRuleNotFoundException.prototype);
    }
}
exports.PullThroughCacheRuleNotFoundException = PullThroughCacheRuleNotFoundException;
class RegistryPolicyNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "RegistryPolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RegistryPolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegistryPolicyNotFoundException.prototype);
    }
}
exports.RegistryPolicyNotFoundException = RegistryPolicyNotFoundException;
class RepositoryNotEmptyException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "RepositoryNotEmptyException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNotEmptyException.prototype);
    }
}
exports.RepositoryNotEmptyException = RepositoryNotEmptyException;
class RepositoryPolicyNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "RepositoryPolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryPolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryPolicyNotFoundException.prototype);
    }
}
exports.RepositoryPolicyNotFoundException = RepositoryPolicyNotFoundException;
exports.ReplicationStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
class ImageNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ImageNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageNotFoundException.prototype);
    }
}
exports.ImageNotFoundException = ImageNotFoundException;
exports.TagStatus = {
    ANY: "ANY",
    TAGGED: "TAGGED",
    UNTAGGED: "UNTAGGED",
};
exports.FindingSeverity = {
    CRITICAL: "CRITICAL",
    HIGH: "HIGH",
    INFORMATIONAL: "INFORMATIONAL",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    UNDEFINED: "UNDEFINED",
};
exports.ScanStatus = {
    ACTIVE: "ACTIVE",
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    FINDINGS_UNAVAILABLE: "FINDINGS_UNAVAILABLE",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    SCAN_ELIGIBILITY_EXPIRED: "SCAN_ELIGIBILITY_EXPIRED",
    UNSUPPORTED_IMAGE: "UNSUPPORTED_IMAGE",
};
class ScanNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ScanNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ScanNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ScanNotFoundException.prototype);
    }
}
exports.ScanNotFoundException = ScanNotFoundException;
exports.RepositoryFilterType = {
    PREFIX_MATCH: "PREFIX_MATCH",
};
class LayerInaccessibleException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LayerInaccessibleException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayerInaccessibleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayerInaccessibleException.prototype);
    }
}
exports.LayerInaccessibleException = LayerInaccessibleException;
class LayersNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LayersNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayersNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayersNotFoundException.prototype);
    }
}
exports.LayersNotFoundException = LayersNotFoundException;
class UnableToGetUpstreamLayerException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UnableToGetUpstreamLayerException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnableToGetUpstreamLayerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnableToGetUpstreamLayerException.prototype);
    }
}
exports.UnableToGetUpstreamLayerException = UnableToGetUpstreamLayerException;
exports.ImageActionType = {
    EXPIRE: "EXPIRE",
};
exports.LifecyclePolicyPreviewStatus = {
    COMPLETE: "COMPLETE",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
class LifecyclePolicyPreviewNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LifecyclePolicyPreviewNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LifecyclePolicyPreviewNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecyclePolicyPreviewNotFoundException.prototype);
    }
}
exports.LifecyclePolicyPreviewNotFoundException = LifecyclePolicyPreviewNotFoundException;
exports.ScanType = {
    BASIC: "BASIC",
    ENHANCED: "ENHANCED",
};
class ImageAlreadyExistsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ImageAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageAlreadyExistsException.prototype);
    }
}
exports.ImageAlreadyExistsException = ImageAlreadyExistsException;
class ImageDigestDoesNotMatchException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ImageDigestDoesNotMatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageDigestDoesNotMatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageDigestDoesNotMatchException.prototype);
    }
}
exports.ImageDigestDoesNotMatchException = ImageDigestDoesNotMatchException;
class ImageTagAlreadyExistsException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ImageTagAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageTagAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageTagAlreadyExistsException.prototype);
    }
}
exports.ImageTagAlreadyExistsException = ImageTagAlreadyExistsException;
class ReferencedImagesNotFoundException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "ReferencedImagesNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReferencedImagesNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReferencedImagesNotFoundException.prototype);
    }
}
exports.ReferencedImagesNotFoundException = ReferencedImagesNotFoundException;
class UnsupportedImageTypeException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedImageTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedImageTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedImageTypeException.prototype);
    }
}
exports.UnsupportedImageTypeException = UnsupportedImageTypeException;
class LifecyclePolicyPreviewInProgressException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "LifecyclePolicyPreviewInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "LifecyclePolicyPreviewInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecyclePolicyPreviewInProgressException.prototype);
    }
}
exports.LifecyclePolicyPreviewInProgressException = LifecyclePolicyPreviewInProgressException;
class InvalidLayerPartException extends ECRServiceException_1.ECRServiceException {
    constructor(opts) {
        super({
            name: "InvalidLayerPartException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLayerPartException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLayerPartException.prototype);
        this.registryId = opts.registryId;
        this.repositoryName = opts.repositoryName;
        this.uploadId = opts.uploadId;
        this.lastValidByteReceived = opts.lastValidByteReceived;
    }
}
exports.InvalidLayerPartException = InvalidLayerPartException;
