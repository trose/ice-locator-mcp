"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AbortAction: () => AbortAction,
  AcceptCertificateTransferCommand: () => AcceptCertificateTransferCommand,
  ActionType: () => ActionType,
  AddThingToBillingGroupCommand: () => AddThingToBillingGroupCommand,
  AddThingToThingGroupCommand: () => AddThingToThingGroupCommand,
  AggregationTypeName: () => AggregationTypeName,
  AlertTargetType: () => AlertTargetType,
  AssetPropertyVariant: () => AssetPropertyVariant,
  AssociateTargetsWithJobCommand: () => AssociateTargetsWithJobCommand,
  AttachPolicyCommand: () => AttachPolicyCommand,
  AttachPrincipalPolicyCommand: () => AttachPrincipalPolicyCommand,
  AttachSecurityProfileCommand: () => AttachSecurityProfileCommand,
  AttachThingPrincipalCommand: () => AttachThingPrincipalCommand,
  AuditCheckRunStatus: () => AuditCheckRunStatus,
  AuditFindingSeverity: () => AuditFindingSeverity,
  AuditFrequency: () => AuditFrequency,
  AuditMitigationActionsExecutionStatus: () => AuditMitigationActionsExecutionStatus,
  AuditMitigationActionsTaskStatus: () => AuditMitigationActionsTaskStatus,
  AuditNotificationType: () => AuditNotificationType,
  AuditTaskStatus: () => AuditTaskStatus,
  AuditTaskType: () => AuditTaskType,
  AuthDecision: () => AuthDecision,
  AuthorizerStatus: () => AuthorizerStatus,
  AutoRegistrationStatus: () => AutoRegistrationStatus,
  AwsJobAbortCriteriaAbortAction: () => AwsJobAbortCriteriaAbortAction,
  AwsJobAbortCriteriaFailureType: () => AwsJobAbortCriteriaFailureType,
  BehaviorCriteriaType: () => BehaviorCriteriaType,
  CACertificateStatus: () => CACertificateStatus,
  CACertificateUpdateAction: () => CACertificateUpdateAction,
  CancelAuditMitigationActionsTaskCommand: () => CancelAuditMitigationActionsTaskCommand,
  CancelAuditTaskCommand: () => CancelAuditTaskCommand,
  CancelCertificateTransferCommand: () => CancelCertificateTransferCommand,
  CancelDetectMitigationActionsTaskCommand: () => CancelDetectMitigationActionsTaskCommand,
  CancelJobCommand: () => CancelJobCommand,
  CancelJobExecutionCommand: () => CancelJobExecutionCommand,
  CannedAccessControlList: () => CannedAccessControlList,
  CertificateConflictException: () => CertificateConflictException,
  CertificateMode: () => CertificateMode,
  CertificateProviderOperation: () => CertificateProviderOperation,
  CertificateStateException: () => CertificateStateException,
  CertificateStatus: () => CertificateStatus,
  CertificateValidationException: () => CertificateValidationException,
  ClearDefaultAuthorizerCommand: () => ClearDefaultAuthorizerCommand,
  ComparisonOperator: () => ComparisonOperator,
  ConfidenceLevel: () => ConfidenceLevel,
  ConfirmTopicRuleDestinationCommand: () => ConfirmTopicRuleDestinationCommand,
  ConflictException: () => ConflictException,
  ConflictingResourceUpdateException: () => ConflictingResourceUpdateException,
  CreateAuditSuppressionCommand: () => CreateAuditSuppressionCommand,
  CreateAuthorizerCommand: () => CreateAuthorizerCommand,
  CreateBillingGroupCommand: () => CreateBillingGroupCommand,
  CreateCertificateFromCsrCommand: () => CreateCertificateFromCsrCommand,
  CreateCertificateProviderCommand: () => CreateCertificateProviderCommand,
  CreateCustomMetricCommand: () => CreateCustomMetricCommand,
  CreateDimensionCommand: () => CreateDimensionCommand,
  CreateDomainConfigurationCommand: () => CreateDomainConfigurationCommand,
  CreateDynamicThingGroupCommand: () => CreateDynamicThingGroupCommand,
  CreateFleetMetricCommand: () => CreateFleetMetricCommand,
  CreateJobCommand: () => CreateJobCommand,
  CreateJobTemplateCommand: () => CreateJobTemplateCommand,
  CreateKeysAndCertificateCommand: () => CreateKeysAndCertificateCommand,
  CreateKeysAndCertificateResponseFilterSensitiveLog: () => CreateKeysAndCertificateResponseFilterSensitiveLog,
  CreateMitigationActionCommand: () => CreateMitigationActionCommand,
  CreateOTAUpdateCommand: () => CreateOTAUpdateCommand,
  CreatePackageCommand: () => CreatePackageCommand,
  CreatePackageRequestFilterSensitiveLog: () => CreatePackageRequestFilterSensitiveLog,
  CreatePackageResponseFilterSensitiveLog: () => CreatePackageResponseFilterSensitiveLog,
  CreatePackageVersionCommand: () => CreatePackageVersionCommand,
  CreatePackageVersionRequestFilterSensitiveLog: () => CreatePackageVersionRequestFilterSensitiveLog,
  CreatePackageVersionResponseFilterSensitiveLog: () => CreatePackageVersionResponseFilterSensitiveLog,
  CreatePolicyCommand: () => CreatePolicyCommand,
  CreatePolicyVersionCommand: () => CreatePolicyVersionCommand,
  CreateProvisioningClaimCommand: () => CreateProvisioningClaimCommand,
  CreateProvisioningClaimResponseFilterSensitiveLog: () => CreateProvisioningClaimResponseFilterSensitiveLog,
  CreateProvisioningTemplateCommand: () => CreateProvisioningTemplateCommand,
  CreateProvisioningTemplateVersionCommand: () => CreateProvisioningTemplateVersionCommand,
  CreateRoleAliasCommand: () => CreateRoleAliasCommand,
  CreateScheduledAuditCommand: () => CreateScheduledAuditCommand,
  CreateSecurityProfileCommand: () => CreateSecurityProfileCommand,
  CreateStreamCommand: () => CreateStreamCommand,
  CreateThingCommand: () => CreateThingCommand,
  CreateThingGroupCommand: () => CreateThingGroupCommand,
  CreateThingTypeCommand: () => CreateThingTypeCommand,
  CreateTopicRuleCommand: () => CreateTopicRuleCommand,
  CreateTopicRuleDestinationCommand: () => CreateTopicRuleDestinationCommand,
  CustomMetricType: () => CustomMetricType,
  DayOfWeek: () => DayOfWeek,
  DeleteAccountAuditConfigurationCommand: () => DeleteAccountAuditConfigurationCommand,
  DeleteAuditSuppressionCommand: () => DeleteAuditSuppressionCommand,
  DeleteAuthorizerCommand: () => DeleteAuthorizerCommand,
  DeleteBillingGroupCommand: () => DeleteBillingGroupCommand,
  DeleteCACertificateCommand: () => DeleteCACertificateCommand,
  DeleteCertificateCommand: () => DeleteCertificateCommand,
  DeleteCertificateProviderCommand: () => DeleteCertificateProviderCommand,
  DeleteConflictException: () => DeleteConflictException,
  DeleteCustomMetricCommand: () => DeleteCustomMetricCommand,
  DeleteDimensionCommand: () => DeleteDimensionCommand,
  DeleteDomainConfigurationCommand: () => DeleteDomainConfigurationCommand,
  DeleteDynamicThingGroupCommand: () => DeleteDynamicThingGroupCommand,
  DeleteFleetMetricCommand: () => DeleteFleetMetricCommand,
  DeleteJobCommand: () => DeleteJobCommand,
  DeleteJobExecutionCommand: () => DeleteJobExecutionCommand,
  DeleteJobTemplateCommand: () => DeleteJobTemplateCommand,
  DeleteMitigationActionCommand: () => DeleteMitigationActionCommand,
  DeleteOTAUpdateCommand: () => DeleteOTAUpdateCommand,
  DeletePackageCommand: () => DeletePackageCommand,
  DeletePackageVersionCommand: () => DeletePackageVersionCommand,
  DeletePolicyCommand: () => DeletePolicyCommand,
  DeletePolicyVersionCommand: () => DeletePolicyVersionCommand,
  DeleteProvisioningTemplateCommand: () => DeleteProvisioningTemplateCommand,
  DeleteProvisioningTemplateVersionCommand: () => DeleteProvisioningTemplateVersionCommand,
  DeleteRegistrationCodeCommand: () => DeleteRegistrationCodeCommand,
  DeleteRoleAliasCommand: () => DeleteRoleAliasCommand,
  DeleteScheduledAuditCommand: () => DeleteScheduledAuditCommand,
  DeleteSecurityProfileCommand: () => DeleteSecurityProfileCommand,
  DeleteStreamCommand: () => DeleteStreamCommand,
  DeleteThingCommand: () => DeleteThingCommand,
  DeleteThingGroupCommand: () => DeleteThingGroupCommand,
  DeleteThingTypeCommand: () => DeleteThingTypeCommand,
  DeleteTopicRuleCommand: () => DeleteTopicRuleCommand,
  DeleteTopicRuleDestinationCommand: () => DeleteTopicRuleDestinationCommand,
  DeleteV2LoggingLevelCommand: () => DeleteV2LoggingLevelCommand,
  DeprecateThingTypeCommand: () => DeprecateThingTypeCommand,
  DescribeAccountAuditConfigurationCommand: () => DescribeAccountAuditConfigurationCommand,
  DescribeAuditFindingCommand: () => DescribeAuditFindingCommand,
  DescribeAuditMitigationActionsTaskCommand: () => DescribeAuditMitigationActionsTaskCommand,
  DescribeAuditSuppressionCommand: () => DescribeAuditSuppressionCommand,
  DescribeAuditTaskCommand: () => DescribeAuditTaskCommand,
  DescribeAuthorizerCommand: () => DescribeAuthorizerCommand,
  DescribeBillingGroupCommand: () => DescribeBillingGroupCommand,
  DescribeCACertificateCommand: () => DescribeCACertificateCommand,
  DescribeCertificateCommand: () => DescribeCertificateCommand,
  DescribeCertificateProviderCommand: () => DescribeCertificateProviderCommand,
  DescribeCustomMetricCommand: () => DescribeCustomMetricCommand,
  DescribeDefaultAuthorizerCommand: () => DescribeDefaultAuthorizerCommand,
  DescribeDetectMitigationActionsTaskCommand: () => DescribeDetectMitigationActionsTaskCommand,
  DescribeDimensionCommand: () => DescribeDimensionCommand,
  DescribeDomainConfigurationCommand: () => DescribeDomainConfigurationCommand,
  DescribeEndpointCommand: () => DescribeEndpointCommand,
  DescribeEventConfigurationsCommand: () => DescribeEventConfigurationsCommand,
  DescribeFleetMetricCommand: () => DescribeFleetMetricCommand,
  DescribeIndexCommand: () => DescribeIndexCommand,
  DescribeJobCommand: () => DescribeJobCommand,
  DescribeJobExecutionCommand: () => DescribeJobExecutionCommand,
  DescribeJobTemplateCommand: () => DescribeJobTemplateCommand,
  DescribeManagedJobTemplateCommand: () => DescribeManagedJobTemplateCommand,
  DescribeMitigationActionCommand: () => DescribeMitigationActionCommand,
  DescribeProvisioningTemplateCommand: () => DescribeProvisioningTemplateCommand,
  DescribeProvisioningTemplateVersionCommand: () => DescribeProvisioningTemplateVersionCommand,
  DescribeRoleAliasCommand: () => DescribeRoleAliasCommand,
  DescribeScheduledAuditCommand: () => DescribeScheduledAuditCommand,
  DescribeSecurityProfileCommand: () => DescribeSecurityProfileCommand,
  DescribeStreamCommand: () => DescribeStreamCommand,
  DescribeThingCommand: () => DescribeThingCommand,
  DescribeThingGroupCommand: () => DescribeThingGroupCommand,
  DescribeThingRegistrationTaskCommand: () => DescribeThingRegistrationTaskCommand,
  DescribeThingTypeCommand: () => DescribeThingTypeCommand,
  DetachPolicyCommand: () => DetachPolicyCommand,
  DetachPrincipalPolicyCommand: () => DetachPrincipalPolicyCommand,
  DetachSecurityProfileCommand: () => DetachSecurityProfileCommand,
  DetachThingPrincipalCommand: () => DetachThingPrincipalCommand,
  DetectMitigationActionExecutionStatus: () => DetectMitigationActionExecutionStatus,
  DetectMitigationActionsTaskStatus: () => DetectMitigationActionsTaskStatus,
  DeviceCertificateUpdateAction: () => DeviceCertificateUpdateAction,
  DeviceDefenderIndexingMode: () => DeviceDefenderIndexingMode,
  DimensionType: () => DimensionType,
  DimensionValueOperator: () => DimensionValueOperator,
  DisableTopicRuleCommand: () => DisableTopicRuleCommand,
  DomainConfigurationStatus: () => DomainConfigurationStatus,
  DomainType: () => DomainType,
  DynamicGroupStatus: () => DynamicGroupStatus,
  DynamoKeyType: () => DynamoKeyType,
  EnableTopicRuleCommand: () => EnableTopicRuleCommand,
  EventType: () => EventType,
  FieldType: () => FieldType,
  FleetMetricUnit: () => FleetMetricUnit,
  GetBehaviorModelTrainingSummariesCommand: () => GetBehaviorModelTrainingSummariesCommand,
  GetBucketsAggregationCommand: () => GetBucketsAggregationCommand,
  GetCardinalityCommand: () => GetCardinalityCommand,
  GetEffectivePoliciesCommand: () => GetEffectivePoliciesCommand,
  GetIndexingConfigurationCommand: () => GetIndexingConfigurationCommand,
  GetJobDocumentCommand: () => GetJobDocumentCommand,
  GetLoggingOptionsCommand: () => GetLoggingOptionsCommand,
  GetOTAUpdateCommand: () => GetOTAUpdateCommand,
  GetPackageCommand: () => GetPackageCommand,
  GetPackageConfigurationCommand: () => GetPackageConfigurationCommand,
  GetPackageResponseFilterSensitiveLog: () => GetPackageResponseFilterSensitiveLog,
  GetPackageVersionCommand: () => GetPackageVersionCommand,
  GetPackageVersionResponseFilterSensitiveLog: () => GetPackageVersionResponseFilterSensitiveLog,
  GetPercentilesCommand: () => GetPercentilesCommand,
  GetPolicyCommand: () => GetPolicyCommand,
  GetPolicyVersionCommand: () => GetPolicyVersionCommand,
  GetRegistrationCodeCommand: () => GetRegistrationCodeCommand,
  GetStatisticsCommand: () => GetStatisticsCommand,
  GetTopicRuleCommand: () => GetTopicRuleCommand,
  GetTopicRuleDestinationCommand: () => GetTopicRuleDestinationCommand,
  GetV2LoggingOptionsCommand: () => GetV2LoggingOptionsCommand,
  IndexNotReadyException: () => IndexNotReadyException,
  IndexStatus: () => IndexStatus,
  InternalException: () => InternalException,
  InternalFailureException: () => InternalFailureException,
  InternalServerException: () => InternalServerException,
  InvalidAggregationException: () => InvalidAggregationException,
  InvalidQueryException: () => InvalidQueryException,
  InvalidRequestException: () => InvalidRequestException,
  InvalidResponseException: () => InvalidResponseException,
  InvalidStateTransitionException: () => InvalidStateTransitionException,
  IoT: () => IoT,
  IoTClient: () => IoTClient,
  IoTServiceException: () => IoTServiceException,
  JobEndBehavior: () => JobEndBehavior,
  JobExecutionFailureType: () => JobExecutionFailureType,
  JobExecutionStatus: () => JobExecutionStatus,
  JobStatus: () => JobStatus,
  KeyPairFilterSensitiveLog: () => KeyPairFilterSensitiveLog,
  LimitExceededException: () => LimitExceededException,
  ListActiveViolationsCommand: () => ListActiveViolationsCommand,
  ListAttachedPoliciesCommand: () => ListAttachedPoliciesCommand,
  ListAuditFindingsCommand: () => ListAuditFindingsCommand,
  ListAuditMitigationActionsExecutionsCommand: () => ListAuditMitigationActionsExecutionsCommand,
  ListAuditMitigationActionsTasksCommand: () => ListAuditMitigationActionsTasksCommand,
  ListAuditSuppressionsCommand: () => ListAuditSuppressionsCommand,
  ListAuditTasksCommand: () => ListAuditTasksCommand,
  ListAuthorizersCommand: () => ListAuthorizersCommand,
  ListBillingGroupsCommand: () => ListBillingGroupsCommand,
  ListCACertificatesCommand: () => ListCACertificatesCommand,
  ListCertificateProvidersCommand: () => ListCertificateProvidersCommand,
  ListCertificatesByCACommand: () => ListCertificatesByCACommand,
  ListCertificatesCommand: () => ListCertificatesCommand,
  ListCustomMetricsCommand: () => ListCustomMetricsCommand,
  ListDetectMitigationActionsExecutionsCommand: () => ListDetectMitigationActionsExecutionsCommand,
  ListDetectMitigationActionsTasksCommand: () => ListDetectMitigationActionsTasksCommand,
  ListDimensionsCommand: () => ListDimensionsCommand,
  ListDomainConfigurationsCommand: () => ListDomainConfigurationsCommand,
  ListFleetMetricsCommand: () => ListFleetMetricsCommand,
  ListIndicesCommand: () => ListIndicesCommand,
  ListJobExecutionsForJobCommand: () => ListJobExecutionsForJobCommand,
  ListJobExecutionsForThingCommand: () => ListJobExecutionsForThingCommand,
  ListJobTemplatesCommand: () => ListJobTemplatesCommand,
  ListJobsCommand: () => ListJobsCommand,
  ListManagedJobTemplatesCommand: () => ListManagedJobTemplatesCommand,
  ListMetricValuesCommand: () => ListMetricValuesCommand,
  ListMitigationActionsCommand: () => ListMitigationActionsCommand,
  ListOTAUpdatesCommand: () => ListOTAUpdatesCommand,
  ListOutgoingCertificatesCommand: () => ListOutgoingCertificatesCommand,
  ListPackageVersionsCommand: () => ListPackageVersionsCommand,
  ListPackagesCommand: () => ListPackagesCommand,
  ListPoliciesCommand: () => ListPoliciesCommand,
  ListPolicyPrincipalsCommand: () => ListPolicyPrincipalsCommand,
  ListPolicyVersionsCommand: () => ListPolicyVersionsCommand,
  ListPrincipalPoliciesCommand: () => ListPrincipalPoliciesCommand,
  ListPrincipalThingsCommand: () => ListPrincipalThingsCommand,
  ListProvisioningTemplateVersionsCommand: () => ListProvisioningTemplateVersionsCommand,
  ListProvisioningTemplatesCommand: () => ListProvisioningTemplatesCommand,
  ListRelatedResourcesForAuditFindingCommand: () => ListRelatedResourcesForAuditFindingCommand,
  ListRoleAliasesCommand: () => ListRoleAliasesCommand,
  ListScheduledAuditsCommand: () => ListScheduledAuditsCommand,
  ListSecurityProfilesCommand: () => ListSecurityProfilesCommand,
  ListSecurityProfilesForTargetCommand: () => ListSecurityProfilesForTargetCommand,
  ListStreamsCommand: () => ListStreamsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListTargetsForPolicyCommand: () => ListTargetsForPolicyCommand,
  ListTargetsForSecurityProfileCommand: () => ListTargetsForSecurityProfileCommand,
  ListThingGroupsCommand: () => ListThingGroupsCommand,
  ListThingGroupsForThingCommand: () => ListThingGroupsForThingCommand,
  ListThingPrincipalsCommand: () => ListThingPrincipalsCommand,
  ListThingRegistrationTaskReportsCommand: () => ListThingRegistrationTaskReportsCommand,
  ListThingRegistrationTasksCommand: () => ListThingRegistrationTasksCommand,
  ListThingTypesCommand: () => ListThingTypesCommand,
  ListThingsCommand: () => ListThingsCommand,
  ListThingsInBillingGroupCommand: () => ListThingsInBillingGroupCommand,
  ListThingsInThingGroupCommand: () => ListThingsInThingGroupCommand,
  ListTopicRuleDestinationsCommand: () => ListTopicRuleDestinationsCommand,
  ListTopicRulesCommand: () => ListTopicRulesCommand,
  ListV2LoggingLevelsCommand: () => ListV2LoggingLevelsCommand,
  ListViolationEventsCommand: () => ListViolationEventsCommand,
  LogLevel: () => LogLevel,
  LogTargetType: () => LogTargetType,
  MalformedPolicyException: () => MalformedPolicyException,
  MessageFormat: () => MessageFormat,
  MitigationActionType: () => MitigationActionType,
  ModelStatus: () => ModelStatus,
  NamedShadowIndexingMode: () => NamedShadowIndexingMode,
  NotConfiguredException: () => NotConfiguredException,
  OTAUpdateStatus: () => OTAUpdateStatus,
  PackageVersionAction: () => PackageVersionAction,
  PackageVersionStatus: () => PackageVersionStatus,
  PolicyTemplateName: () => PolicyTemplateName,
  Protocol: () => Protocol,
  PutVerificationStateOnViolationCommand: () => PutVerificationStateOnViolationCommand,
  RegisterCACertificateCommand: () => RegisterCACertificateCommand,
  RegisterCertificateCommand: () => RegisterCertificateCommand,
  RegisterCertificateWithoutCACommand: () => RegisterCertificateWithoutCACommand,
  RegisterThingCommand: () => RegisterThingCommand,
  RegistrationCodeValidationException: () => RegistrationCodeValidationException,
  RejectCertificateTransferCommand: () => RejectCertificateTransferCommand,
  RemoveThingFromBillingGroupCommand: () => RemoveThingFromBillingGroupCommand,
  RemoveThingFromThingGroupCommand: () => RemoveThingFromThingGroupCommand,
  ReplaceTopicRuleCommand: () => ReplaceTopicRuleCommand,
  ReportType: () => ReportType,
  ResourceAlreadyExistsException: () => ResourceAlreadyExistsException,
  ResourceNotFoundException: () => ResourceNotFoundException,
  ResourceRegistrationFailureException: () => ResourceRegistrationFailureException,
  ResourceType: () => ResourceType,
  RetryableFailureType: () => RetryableFailureType,
  SearchIndexCommand: () => SearchIndexCommand,
  ServerCertificateStatus: () => ServerCertificateStatus,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  ServiceType: () => ServiceType,
  ServiceUnavailableException: () => ServiceUnavailableException,
  SetDefaultAuthorizerCommand: () => SetDefaultAuthorizerCommand,
  SetDefaultPolicyVersionCommand: () => SetDefaultPolicyVersionCommand,
  SetLoggingOptionsCommand: () => SetLoggingOptionsCommand,
  SetV2LoggingLevelCommand: () => SetV2LoggingLevelCommand,
  SetV2LoggingOptionsCommand: () => SetV2LoggingOptionsCommand,
  SqlParseException: () => SqlParseException,
  StartAuditMitigationActionsTaskCommand: () => StartAuditMitigationActionsTaskCommand,
  StartDetectMitigationActionsTaskCommand: () => StartDetectMitigationActionsTaskCommand,
  StartOnDemandAuditTaskCommand: () => StartOnDemandAuditTaskCommand,
  StartThingRegistrationTaskCommand: () => StartThingRegistrationTaskCommand,
  Status: () => Status,
  StopThingRegistrationTaskCommand: () => StopThingRegistrationTaskCommand,
  TagResourceCommand: () => TagResourceCommand,
  TargetFieldOrder: () => TargetFieldOrder,
  TargetSelection: () => TargetSelection,
  TaskAlreadyExistsException: () => TaskAlreadyExistsException,
  TemplateType: () => TemplateType,
  TestAuthorizationCommand: () => TestAuthorizationCommand,
  TestInvokeAuthorizerCommand: () => TestInvokeAuthorizerCommand,
  ThingConnectivityIndexingMode: () => ThingConnectivityIndexingMode,
  ThingGroupIndexingMode: () => ThingGroupIndexingMode,
  ThingIndexingMode: () => ThingIndexingMode,
  ThrottlingException: () => ThrottlingException,
  TopicRuleDestinationStatus: () => TopicRuleDestinationStatus,
  TransferAlreadyCompletedException: () => TransferAlreadyCompletedException,
  TransferCertificateCommand: () => TransferCertificateCommand,
  TransferConflictException: () => TransferConflictException,
  UnauthorizedException: () => UnauthorizedException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateAccountAuditConfigurationCommand: () => UpdateAccountAuditConfigurationCommand,
  UpdateAuditSuppressionCommand: () => UpdateAuditSuppressionCommand,
  UpdateAuthorizerCommand: () => UpdateAuthorizerCommand,
  UpdateBillingGroupCommand: () => UpdateBillingGroupCommand,
  UpdateCACertificateCommand: () => UpdateCACertificateCommand,
  UpdateCertificateCommand: () => UpdateCertificateCommand,
  UpdateCertificateProviderCommand: () => UpdateCertificateProviderCommand,
  UpdateCustomMetricCommand: () => UpdateCustomMetricCommand,
  UpdateDimensionCommand: () => UpdateDimensionCommand,
  UpdateDomainConfigurationCommand: () => UpdateDomainConfigurationCommand,
  UpdateDynamicThingGroupCommand: () => UpdateDynamicThingGroupCommand,
  UpdateEventConfigurationsCommand: () => UpdateEventConfigurationsCommand,
  UpdateFleetMetricCommand: () => UpdateFleetMetricCommand,
  UpdateIndexingConfigurationCommand: () => UpdateIndexingConfigurationCommand,
  UpdateJobCommand: () => UpdateJobCommand,
  UpdateMitigationActionCommand: () => UpdateMitigationActionCommand,
  UpdatePackageCommand: () => UpdatePackageCommand,
  UpdatePackageConfigurationCommand: () => UpdatePackageConfigurationCommand,
  UpdatePackageRequestFilterSensitiveLog: () => UpdatePackageRequestFilterSensitiveLog,
  UpdatePackageVersionCommand: () => UpdatePackageVersionCommand,
  UpdatePackageVersionRequestFilterSensitiveLog: () => UpdatePackageVersionRequestFilterSensitiveLog,
  UpdateProvisioningTemplateCommand: () => UpdateProvisioningTemplateCommand,
  UpdateRoleAliasCommand: () => UpdateRoleAliasCommand,
  UpdateScheduledAuditCommand: () => UpdateScheduledAuditCommand,
  UpdateSecurityProfileCommand: () => UpdateSecurityProfileCommand,
  UpdateStreamCommand: () => UpdateStreamCommand,
  UpdateThingCommand: () => UpdateThingCommand,
  UpdateThingGroupCommand: () => UpdateThingGroupCommand,
  UpdateThingGroupsForThingCommand: () => UpdateThingGroupsForThingCommand,
  UpdateTopicRuleDestinationCommand: () => UpdateTopicRuleDestinationCommand,
  ValidateSecurityProfileBehaviorsCommand: () => ValidateSecurityProfileBehaviorsCommand,
  ValidationException: () => ValidationException,
  VerificationState: () => VerificationState,
  VersionConflictException: () => VersionConflictException,
  VersionsLimitExceededException: () => VersionsLimitExceededException,
  ViolationEventType: () => ViolationEventType,
  __Client: () => import_smithy_client.Client,
  paginateGetBehaviorModelTrainingSummaries: () => paginateGetBehaviorModelTrainingSummaries,
  paginateListActiveViolations: () => paginateListActiveViolations,
  paginateListAttachedPolicies: () => paginateListAttachedPolicies,
  paginateListAuditFindings: () => paginateListAuditFindings,
  paginateListAuditMitigationActionsExecutions: () => paginateListAuditMitigationActionsExecutions,
  paginateListAuditMitigationActionsTasks: () => paginateListAuditMitigationActionsTasks,
  paginateListAuditSuppressions: () => paginateListAuditSuppressions,
  paginateListAuditTasks: () => paginateListAuditTasks,
  paginateListAuthorizers: () => paginateListAuthorizers,
  paginateListBillingGroups: () => paginateListBillingGroups,
  paginateListCACertificates: () => paginateListCACertificates,
  paginateListCertificates: () => paginateListCertificates,
  paginateListCertificatesByCA: () => paginateListCertificatesByCA,
  paginateListCustomMetrics: () => paginateListCustomMetrics,
  paginateListDetectMitigationActionsExecutions: () => paginateListDetectMitigationActionsExecutions,
  paginateListDetectMitigationActionsTasks: () => paginateListDetectMitigationActionsTasks,
  paginateListDimensions: () => paginateListDimensions,
  paginateListDomainConfigurations: () => paginateListDomainConfigurations,
  paginateListFleetMetrics: () => paginateListFleetMetrics,
  paginateListIndices: () => paginateListIndices,
  paginateListJobExecutionsForJob: () => paginateListJobExecutionsForJob,
  paginateListJobExecutionsForThing: () => paginateListJobExecutionsForThing,
  paginateListJobTemplates: () => paginateListJobTemplates,
  paginateListJobs: () => paginateListJobs,
  paginateListManagedJobTemplates: () => paginateListManagedJobTemplates,
  paginateListMetricValues: () => paginateListMetricValues,
  paginateListMitigationActions: () => paginateListMitigationActions,
  paginateListOTAUpdates: () => paginateListOTAUpdates,
  paginateListOutgoingCertificates: () => paginateListOutgoingCertificates,
  paginateListPackageVersions: () => paginateListPackageVersions,
  paginateListPackages: () => paginateListPackages,
  paginateListPolicies: () => paginateListPolicies,
  paginateListPolicyPrincipals: () => paginateListPolicyPrincipals,
  paginateListPrincipalPolicies: () => paginateListPrincipalPolicies,
  paginateListPrincipalThings: () => paginateListPrincipalThings,
  paginateListProvisioningTemplateVersions: () => paginateListProvisioningTemplateVersions,
  paginateListProvisioningTemplates: () => paginateListProvisioningTemplates,
  paginateListRelatedResourcesForAuditFinding: () => paginateListRelatedResourcesForAuditFinding,
  paginateListRoleAliases: () => paginateListRoleAliases,
  paginateListScheduledAudits: () => paginateListScheduledAudits,
  paginateListSecurityProfiles: () => paginateListSecurityProfiles,
  paginateListSecurityProfilesForTarget: () => paginateListSecurityProfilesForTarget,
  paginateListStreams: () => paginateListStreams,
  paginateListTagsForResource: () => paginateListTagsForResource,
  paginateListTargetsForPolicy: () => paginateListTargetsForPolicy,
  paginateListTargetsForSecurityProfile: () => paginateListTargetsForSecurityProfile,
  paginateListThingGroups: () => paginateListThingGroups,
  paginateListThingGroupsForThing: () => paginateListThingGroupsForThing,
  paginateListThingPrincipals: () => paginateListThingPrincipals,
  paginateListThingRegistrationTaskReports: () => paginateListThingRegistrationTaskReports,
  paginateListThingRegistrationTasks: () => paginateListThingRegistrationTasks,
  paginateListThingTypes: () => paginateListThingTypes,
  paginateListThings: () => paginateListThings,
  paginateListThingsInBillingGroup: () => paginateListThingsInBillingGroup,
  paginateListThingsInThingGroup: () => paginateListThingsInThingGroup,
  paginateListTopicRuleDestinations: () => paginateListTopicRuleDestinations,
  paginateListTopicRules: () => paginateListTopicRules,
  paginateListV2LoggingLevels: () => paginateListV2LoggingLevels,
  paginateListViolationEvents: () => paginateListViolationEvents
});
module.exports = __toCommonJS(src_exports);

// src/IoTClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_signing = require("@aws-sdk/middleware-signing");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");


// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "iot"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/IoTClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/IoTClient.ts
var _IoTClient = class _IoTClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_signing.resolveAwsAuthConfig)(_config_5);
    const _config_7 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_signing.getAwsAuthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getOmitRetryHeadersPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};
__name(_IoTClient, "IoTClient");
var IoTClient = _IoTClient;

// src/IoT.ts


// src/commands/AcceptCertificateTransferCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core = require("@smithy/core");

var import_uuid = require("uuid");

// src/models/IoTServiceException.ts

var _IoTServiceException = class _IoTServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _IoTServiceException.prototype);
  }
};
__name(_IoTServiceException, "IoTServiceException");
var IoTServiceException = _IoTServiceException;

// src/models/models_0.ts

var AbortAction = {
  CANCEL: "CANCEL"
};
var JobExecutionFailureType = {
  ALL: "ALL",
  FAILED: "FAILED",
  REJECTED: "REJECTED",
  TIMED_OUT: "TIMED_OUT"
};
var _InternalFailureException = class _InternalFailureException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalFailureException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalFailureException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalFailureException.prototype);
  }
};
__name(_InternalFailureException, "InternalFailureException");
var InternalFailureException = _InternalFailureException;
var _InvalidRequestException = class _InvalidRequestException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidRequestException.prototype);
  }
};
__name(_InvalidRequestException, "InvalidRequestException");
var InvalidRequestException = _InvalidRequestException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _ServiceUnavailableException = class _ServiceUnavailableException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
  }
};
__name(_ServiceUnavailableException, "ServiceUnavailableException");
var ServiceUnavailableException = _ServiceUnavailableException;
var _ThrottlingException = class _ThrottlingException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _TransferAlreadyCompletedException = class _TransferAlreadyCompletedException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TransferAlreadyCompletedException",
      $fault: "client",
      ...opts
    });
    this.name = "TransferAlreadyCompletedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TransferAlreadyCompletedException.prototype);
  }
};
__name(_TransferAlreadyCompletedException, "TransferAlreadyCompletedException");
var TransferAlreadyCompletedException = _TransferAlreadyCompletedException;
var _UnauthorizedException = class _UnauthorizedException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnauthorizedException",
      $fault: "client",
      ...opts
    });
    this.name = "UnauthorizedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnauthorizedException.prototype);
  }
};
__name(_UnauthorizedException, "UnauthorizedException");
var UnauthorizedException = _UnauthorizedException;
var DynamoKeyType = {
  NUMBER: "NUMBER",
  STRING: "STRING"
};
var AssetPropertyVariant;
((AssetPropertyVariant3) => {
  AssetPropertyVariant3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.stringValue !== void 0)
      return visitor.stringValue(value.stringValue);
    if (value.integerValue !== void 0)
      return visitor.integerValue(value.integerValue);
    if (value.doubleValue !== void 0)
      return visitor.doubleValue(value.doubleValue);
    if (value.booleanValue !== void 0)
      return visitor.booleanValue(value.booleanValue);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(AssetPropertyVariant || (AssetPropertyVariant = {}));
var CannedAccessControlList = {
  AuthenticatedRead: "authenticated-read",
  AwsExecRead: "aws-exec-read",
  BucketOwnerFullControl: "bucket-owner-full-control",
  BucketOwnerRead: "bucket-owner-read",
  LogDeliveryWrite: "log-delivery-write",
  Private: "private",
  PublicRead: "public-read",
  PublicReadWrite: "public-read-write"
};
var MessageFormat = {
  JSON: "JSON",
  RAW: "RAW"
};
var ActionType = {
  CONNECT: "CONNECT",
  PUBLISH: "PUBLISH",
  RECEIVE: "RECEIVE",
  SUBSCRIBE: "SUBSCRIBE"
};
var ComparisonOperator = {
  GREATER_THAN: "greater-than",
  GREATER_THAN_EQUALS: "greater-than-equals",
  IN_CIDR_SET: "in-cidr-set",
  IN_PORT_SET: "in-port-set",
  IN_SET: "in-set",
  LESS_THAN: "less-than",
  LESS_THAN_EQUALS: "less-than-equals",
  NOT_IN_CIDR_SET: "not-in-cidr-set",
  NOT_IN_PORT_SET: "not-in-port-set",
  NOT_IN_SET: "not-in-set"
};
var ConfidenceLevel = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM"
};
var DimensionValueOperator = {
  IN: "IN",
  NOT_IN: "NOT_IN"
};
var VerificationState = {
  BENIGN_POSITIVE: "BENIGN_POSITIVE",
  FALSE_POSITIVE: "FALSE_POSITIVE",
  TRUE_POSITIVE: "TRUE_POSITIVE",
  UNKNOWN: "UNKNOWN"
};
var AggregationTypeName = {
  CARDINALITY: "Cardinality",
  PERCENTILES: "Percentiles",
  STATISTICS: "Statistics"
};
var AlertTargetType = {
  SNS: "SNS"
};
var _LimitExceededException = class _LimitExceededException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
  }
};
__name(_LimitExceededException, "LimitExceededException");
var LimitExceededException = _LimitExceededException;
var _VersionConflictException = class _VersionConflictException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "VersionConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "VersionConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _VersionConflictException.prototype);
  }
};
__name(_VersionConflictException, "VersionConflictException");
var VersionConflictException = _VersionConflictException;
var AuditCheckRunStatus = {
  CANCELED: "CANCELED",
  COMPLETED_COMPLIANT: "COMPLETED_COMPLIANT",
  COMPLETED_NON_COMPLIANT: "COMPLETED_NON_COMPLIANT",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  WAITING_FOR_DATA_COLLECTION: "WAITING_FOR_DATA_COLLECTION"
};
var ResourceType = {
  ACCOUNT_SETTINGS: "ACCOUNT_SETTINGS",
  CA_CERTIFICATE: "CA_CERTIFICATE",
  CLIENT_ID: "CLIENT_ID",
  COGNITO_IDENTITY_POOL: "COGNITO_IDENTITY_POOL",
  DEVICE_CERTIFICATE: "DEVICE_CERTIFICATE",
  IAM_ROLE: "IAM_ROLE",
  IOT_POLICY: "IOT_POLICY",
  ISSUER_CERTIFICATE: "ISSUER_CERTIFICATE",
  ROLE_ALIAS: "ROLE_ALIAS"
};
var AuditFindingSeverity = {
  CRITICAL: "CRITICAL",
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM"
};
var AuditFrequency = {
  BIWEEKLY: "BIWEEKLY",
  DAILY: "DAILY",
  MONTHLY: "MONTHLY",
  WEEKLY: "WEEKLY"
};
var AuditMitigationActionsExecutionStatus = {
  CANCELED: "CANCELED",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  PENDING: "PENDING",
  SKIPPED: "SKIPPED"
};
var AuditMitigationActionsTaskStatus = {
  CANCELED: "CANCELED",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS"
};
var AuditNotificationType = {
  SNS: "SNS"
};
var AuditTaskStatus = {
  CANCELED: "CANCELED",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS"
};
var AuditTaskType = {
  ON_DEMAND_AUDIT_TASK: "ON_DEMAND_AUDIT_TASK",
  SCHEDULED_AUDIT_TASK: "SCHEDULED_AUDIT_TASK"
};
var AuthDecision = {
  ALLOWED: "ALLOWED",
  EXPLICIT_DENY: "EXPLICIT_DENY",
  IMPLICIT_DENY: "IMPLICIT_DENY"
};
var AuthorizerStatus = {
  ACTIVE: "ACTIVE",
  INACTIVE: "INACTIVE"
};
var AutoRegistrationStatus = {
  DISABLE: "DISABLE",
  ENABLE: "ENABLE"
};
var _InvalidStateTransitionException = class _InvalidStateTransitionException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidStateTransitionException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidStateTransitionException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidStateTransitionException.prototype);
  }
};
__name(_InvalidStateTransitionException, "InvalidStateTransitionException");
var InvalidStateTransitionException = _InvalidStateTransitionException;
var _ConflictingResourceUpdateException = class _ConflictingResourceUpdateException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictingResourceUpdateException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictingResourceUpdateException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictingResourceUpdateException.prototype);
  }
};
__name(_ConflictingResourceUpdateException, "ConflictingResourceUpdateException");
var ConflictingResourceUpdateException = _ConflictingResourceUpdateException;
var _InternalException = class _InternalException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalException.prototype);
  }
};
__name(_InternalException, "InternalException");
var InternalException = _InternalException;
var _ResourceAlreadyExistsException = class _ResourceAlreadyExistsException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceAlreadyExistsException.prototype);
    this.resourceId = opts.resourceId;
    this.resourceArn = opts.resourceArn;
  }
};
__name(_ResourceAlreadyExistsException, "ResourceAlreadyExistsException");
var ResourceAlreadyExistsException = _ResourceAlreadyExistsException;
var CertificateProviderOperation = {
  CreateCertificateFromCsr: "CreateCertificateFromCsr"
};
var CustomMetricType = {
  IP_ADDRESS_LIST: "ip-address-list",
  NUMBER: "number",
  NUMBER_LIST: "number-list",
  STRING_LIST: "string-list"
};
var DimensionType = {
  TOPIC_FILTER: "TOPIC_FILTER"
};
var _CertificateValidationException = class _CertificateValidationException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CertificateValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "CertificateValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CertificateValidationException.prototype);
  }
};
__name(_CertificateValidationException, "CertificateValidationException");
var CertificateValidationException = _CertificateValidationException;
var ServiceType = {
  CREDENTIAL_PROVIDER: "CREDENTIAL_PROVIDER",
  DATA: "DATA",
  JOBS: "JOBS"
};
var _InvalidQueryException = class _InvalidQueryException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidQueryException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidQueryException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidQueryException.prototype);
  }
};
__name(_InvalidQueryException, "InvalidQueryException");
var InvalidQueryException = _InvalidQueryException;
var FleetMetricUnit = {
  Bits: "Bits",
  BitsSecond: "Bits/Second",
  Bytes: "Bytes",
  BytesSecond: "Bytes/Second",
  Count: "Count",
  CountSecond: "Count/Second",
  Gigabits: "Gigabits",
  GigabitsSecond: "Gigabits/Second",
  Gigabytes: "Gigabytes",
  GigabytesSecond: "Gigabytes/Second",
  Kilobits: "Kilobits",
  KilobitsSecond: "Kilobits/Second",
  Kilobytes: "Kilobytes",
  KilobytesSecond: "Kilobytes/Second",
  Megabits: "Megabits",
  MegabitsSecond: "Megabits/Second",
  Megabytes: "Megabytes",
  MegabytesSecond: "Megabytes/Second",
  Microseconds: "Microseconds",
  Milliseconds: "Milliseconds",
  None: "None",
  Percent: "Percent",
  Seconds: "Seconds",
  Terabits: "Terabits",
  TerabitsSecond: "Terabits/Second",
  Terabytes: "Terabytes",
  TerabytesSecond: "Terabytes/Second"
};
var _IndexNotReadyException = class _IndexNotReadyException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "IndexNotReadyException",
      $fault: "client",
      ...opts
    });
    this.name = "IndexNotReadyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _IndexNotReadyException.prototype);
  }
};
__name(_IndexNotReadyException, "IndexNotReadyException");
var IndexNotReadyException = _IndexNotReadyException;
var _InvalidAggregationException = class _InvalidAggregationException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidAggregationException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidAggregationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidAggregationException.prototype);
  }
};
__name(_InvalidAggregationException, "InvalidAggregationException");
var InvalidAggregationException = _InvalidAggregationException;
var RetryableFailureType = {
  ALL: "ALL",
  FAILED: "FAILED",
  TIMED_OUT: "TIMED_OUT"
};
var JobEndBehavior = {
  CANCEL: "CANCEL",
  FORCE_CANCEL: "FORCE_CANCEL",
  STOP_ROLLOUT: "STOP_ROLLOUT"
};
var TargetSelection = {
  CONTINUOUS: "CONTINUOUS",
  SNAPSHOT: "SNAPSHOT"
};
var _ConflictException = class _ConflictException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.resourceId = opts.resourceId;
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var LogLevel = {
  DEBUG: "DEBUG",
  DISABLED: "DISABLED",
  ERROR: "ERROR",
  INFO: "INFO",
  WARN: "WARN"
};
var PolicyTemplateName = {
  BLANK_POLICY: "BLANK_POLICY"
};
var CACertificateUpdateAction = {
  DEACTIVATE: "DEACTIVATE"
};
var DeviceCertificateUpdateAction = {
  DEACTIVATE: "DEACTIVATE"
};
var AwsJobAbortCriteriaAbortAction = {
  CANCEL: "CANCEL"
};
var AwsJobAbortCriteriaFailureType = {
  ALL: "ALL",
  FAILED: "FAILED",
  REJECTED: "REJECTED",
  TIMED_OUT: "TIMED_OUT"
};
var Protocol = {
  HTTP: "HTTP",
  MQTT: "MQTT"
};
var OTAUpdateStatus = {
  CREATE_COMPLETE: "CREATE_COMPLETE",
  CREATE_FAILED: "CREATE_FAILED",
  CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
  CREATE_PENDING: "CREATE_PENDING",
  DELETE_FAILED: "DELETE_FAILED",
  DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS"
};
var _InternalServerException = class _InternalServerException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;
var _ValidationException = class _ValidationException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var PackageVersionStatus = {
  DEPRECATED: "DEPRECATED",
  DRAFT: "DRAFT",
  PUBLISHED: "PUBLISHED"
};
var _MalformedPolicyException = class _MalformedPolicyException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "MalformedPolicyException",
      $fault: "client",
      ...opts
    });
    this.name = "MalformedPolicyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _MalformedPolicyException.prototype);
  }
};
__name(_MalformedPolicyException, "MalformedPolicyException");
var MalformedPolicyException = _MalformedPolicyException;
var _VersionsLimitExceededException = class _VersionsLimitExceededException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "VersionsLimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "VersionsLimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _VersionsLimitExceededException.prototype);
  }
};
__name(_VersionsLimitExceededException, "VersionsLimitExceededException");
var VersionsLimitExceededException = _VersionsLimitExceededException;
var TemplateType = {
  FLEET_PROVISIONING: "FLEET_PROVISIONING",
  JITP: "JITP"
};
var DayOfWeek = {
  FRI: "FRI",
  MON: "MON",
  SAT: "SAT",
  SUN: "SUN",
  THU: "THU",
  TUE: "TUE",
  WED: "WED"
};
var _SqlParseException = class _SqlParseException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SqlParseException",
      $fault: "client",
      ...opts
    });
    this.name = "SqlParseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SqlParseException.prototype);
  }
};
__name(_SqlParseException, "SqlParseException");
var SqlParseException = _SqlParseException;
var TopicRuleDestinationStatus = {
  DELETING: "DELETING",
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  ERROR: "ERROR",
  IN_PROGRESS: "IN_PROGRESS"
};
var _DeleteConflictException = class _DeleteConflictException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DeleteConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "DeleteConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DeleteConflictException.prototype);
  }
};
__name(_DeleteConflictException, "DeleteConflictException");
var DeleteConflictException = _DeleteConflictException;
var _CertificateStateException = class _CertificateStateException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CertificateStateException",
      $fault: "client",
      ...opts
    });
    this.name = "CertificateStateException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CertificateStateException.prototype);
  }
};
__name(_CertificateStateException, "CertificateStateException");
var CertificateStateException = _CertificateStateException;
var KeyPairFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.PrivateKey && { PrivateKey: import_smithy_client.SENSITIVE_STRING }
}), "KeyPairFilterSensitiveLog");
var CreateKeysAndCertificateResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.keyPair && { keyPair: KeyPairFilterSensitiveLog(obj.keyPair) }
}), "CreateKeysAndCertificateResponseFilterSensitiveLog");
var CreatePackageRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING }
}), "CreatePackageRequestFilterSensitiveLog");
var CreatePackageResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING }
}), "CreatePackageResponseFilterSensitiveLog");
var CreatePackageVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING },
  ...obj.attributes && { attributes: import_smithy_client.SENSITIVE_STRING }
}), "CreatePackageVersionRequestFilterSensitiveLog");
var CreatePackageVersionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING },
  ...obj.attributes && { attributes: import_smithy_client.SENSITIVE_STRING }
}), "CreatePackageVersionResponseFilterSensitiveLog");
var CreateProvisioningClaimResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.keyPair && { keyPair: KeyPairFilterSensitiveLog(obj.keyPair) }
}), "CreateProvisioningClaimResponseFilterSensitiveLog");

// src/models/models_1.ts

var LogTargetType = {
  CLIENT_ID: "CLIENT_ID",
  DEFAULT: "DEFAULT",
  PRINCIPAL_ID: "PRINCIPAL_ID",
  SOURCE_IP: "SOURCE_IP",
  THING_GROUP: "THING_GROUP"
};
var CertificateMode = {
  DEFAULT: "DEFAULT",
  SNI_ONLY: "SNI_ONLY"
};
var CACertificateStatus = {
  ACTIVE: "ACTIVE",
  INACTIVE: "INACTIVE"
};
var CertificateStatus = {
  ACTIVE: "ACTIVE",
  INACTIVE: "INACTIVE",
  PENDING_ACTIVATION: "PENDING_ACTIVATION",
  PENDING_TRANSFER: "PENDING_TRANSFER",
  REGISTER_INACTIVE: "REGISTER_INACTIVE",
  REVOKED: "REVOKED"
};
var DetectMitigationActionsTaskStatus = {
  CANCELED: "CANCELED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  SUCCESSFUL: "SUCCESSFUL"
};
var DomainConfigurationStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DomainType = {
  AWS_MANAGED: "AWS_MANAGED",
  CUSTOMER_MANAGED: "CUSTOMER_MANAGED",
  ENDPOINT: "ENDPOINT"
};
var ServerCertificateStatus = {
  INVALID: "INVALID",
  VALID: "VALID"
};
var EventType = {
  CA_CERTIFICATE: "CA_CERTIFICATE",
  CERTIFICATE: "CERTIFICATE",
  JOB: "JOB",
  JOB_EXECUTION: "JOB_EXECUTION",
  POLICY: "POLICY",
  THING: "THING",
  THING_GROUP: "THING_GROUP",
  THING_GROUP_HIERARCHY: "THING_GROUP_HIERARCHY",
  THING_GROUP_MEMBERSHIP: "THING_GROUP_MEMBERSHIP",
  THING_TYPE: "THING_TYPE",
  THING_TYPE_ASSOCIATION: "THING_TYPE_ASSOCIATION"
};
var IndexStatus = {
  ACTIVE: "ACTIVE",
  BUILDING: "BUILDING",
  REBUILDING: "REBUILDING"
};
var JobStatus = {
  CANCELED: "CANCELED",
  COMPLETED: "COMPLETED",
  DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS",
  IN_PROGRESS: "IN_PROGRESS",
  SCHEDULED: "SCHEDULED"
};
var JobExecutionStatus = {
  CANCELED: "CANCELED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  QUEUED: "QUEUED",
  REJECTED: "REJECTED",
  REMOVED: "REMOVED",
  SUCCEEDED: "SUCCEEDED",
  TIMED_OUT: "TIMED_OUT"
};
var MitigationActionType = {
  ADD_THINGS_TO_THING_GROUP: "ADD_THINGS_TO_THING_GROUP",
  ENABLE_IOT_LOGGING: "ENABLE_IOT_LOGGING",
  PUBLISH_FINDING_TO_SNS: "PUBLISH_FINDING_TO_SNS",
  REPLACE_DEFAULT_POLICY_VERSION: "REPLACE_DEFAULT_POLICY_VERSION",
  UPDATE_CA_CERTIFICATE: "UPDATE_CA_CERTIFICATE",
  UPDATE_DEVICE_CERTIFICATE: "UPDATE_DEVICE_CERTIFICATE"
};
var DynamicGroupStatus = {
  ACTIVE: "ACTIVE",
  BUILDING: "BUILDING",
  REBUILDING: "REBUILDING"
};
var Status = {
  Cancelled: "Cancelled",
  Cancelling: "Cancelling",
  Completed: "Completed",
  Failed: "Failed",
  InProgress: "InProgress"
};
var ModelStatus = {
  ACTIVE: "ACTIVE",
  EXPIRED: "EXPIRED",
  PENDING_BUILD: "PENDING_BUILD"
};
var FieldType = {
  BOOLEAN: "Boolean",
  NUMBER: "Number",
  STRING: "String"
};
var ThingGroupIndexingMode = {
  OFF: "OFF",
  ON: "ON"
};
var DeviceDefenderIndexingMode = {
  OFF: "OFF",
  VIOLATIONS: "VIOLATIONS"
};
var TargetFieldOrder = {
  LatLon: "LatLon",
  LonLat: "LonLat"
};
var NamedShadowIndexingMode = {
  OFF: "OFF",
  ON: "ON"
};
var ThingConnectivityIndexingMode = {
  OFF: "OFF",
  STATUS: "STATUS"
};
var ThingIndexingMode = {
  OFF: "OFF",
  REGISTRY: "REGISTRY",
  REGISTRY_AND_SHADOW: "REGISTRY_AND_SHADOW"
};
var _NotConfiguredException = class _NotConfiguredException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotConfiguredException",
      $fault: "client",
      ...opts
    });
    this.name = "NotConfiguredException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotConfiguredException.prototype);
  }
};
__name(_NotConfiguredException, "NotConfiguredException");
var NotConfiguredException = _NotConfiguredException;
var BehaviorCriteriaType = {
  MACHINE_LEARNING: "MACHINE_LEARNING",
  STATIC: "STATIC",
  STATISTICAL: "STATISTICAL"
};
var DetectMitigationActionExecutionStatus = {
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  SKIPPED: "SKIPPED",
  SUCCESSFUL: "SUCCESSFUL"
};
var GetPackageResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING }
}), "GetPackageResponseFilterSensitiveLog");
var GetPackageVersionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING },
  ...obj.attributes && { attributes: import_smithy_client.SENSITIVE_STRING }
}), "GetPackageVersionResponseFilterSensitiveLog");

// src/models/models_2.ts

var ReportType = {
  ERRORS: "ERRORS",
  RESULTS: "RESULTS"
};
var ViolationEventType = {
  ALARM_CLEARED: "alarm-cleared",
  ALARM_INVALIDATED: "alarm-invalidated",
  IN_ALARM: "in-alarm"
};
var _RegistrationCodeValidationException = class _RegistrationCodeValidationException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RegistrationCodeValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "RegistrationCodeValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RegistrationCodeValidationException.prototype);
  }
};
__name(_RegistrationCodeValidationException, "RegistrationCodeValidationException");
var RegistrationCodeValidationException = _RegistrationCodeValidationException;
var _CertificateConflictException = class _CertificateConflictException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CertificateConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "CertificateConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CertificateConflictException.prototype);
  }
};
__name(_CertificateConflictException, "CertificateConflictException");
var CertificateConflictException = _CertificateConflictException;
var _ResourceRegistrationFailureException = class _ResourceRegistrationFailureException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceRegistrationFailureException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceRegistrationFailureException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceRegistrationFailureException.prototype);
  }
};
__name(_ResourceRegistrationFailureException, "ResourceRegistrationFailureException");
var ResourceRegistrationFailureException = _ResourceRegistrationFailureException;
var _TaskAlreadyExistsException = class _TaskAlreadyExistsException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TaskAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "TaskAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TaskAlreadyExistsException.prototype);
  }
};
__name(_TaskAlreadyExistsException, "TaskAlreadyExistsException");
var TaskAlreadyExistsException = _TaskAlreadyExistsException;
var _InvalidResponseException = class _InvalidResponseException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidResponseException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidResponseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidResponseException.prototype);
  }
};
__name(_InvalidResponseException, "InvalidResponseException");
var InvalidResponseException = _InvalidResponseException;
var _TransferConflictException = class _TransferConflictException extends IoTServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TransferConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "TransferConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TransferConflictException.prototype);
  }
};
__name(_TransferConflictException, "TransferConflictException");
var TransferConflictException = _TransferConflictException;
var PackageVersionAction = {
  DEPRECATE: "DEPRECATE",
  PUBLISH: "PUBLISH"
};
var UpdatePackageRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING }
}), "UpdatePackageRequestFilterSensitiveLog");
var UpdatePackageVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.description && { description: import_smithy_client.SENSITIVE_STRING },
  ...obj.attributes && { attributes: import_smithy_client.SENSITIVE_STRING }
}), "UpdatePackageVersionRequestFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var se_AcceptCertificateTransferCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/accept-certificate-transfer/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  const query = (0, import_smithy_client.map)({
    [_sAA]: [() => input.setAsActive !== void 0, () => input[_sAA].toString()]
  });
  let body;
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_AcceptCertificateTransferCommand");
var se_AddThingToBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/billing-groups/addThingToBillingGroup");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      billingGroupArn: [],
      billingGroupName: [],
      thingArn: [],
      thingName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_AddThingToBillingGroupCommand");
var se_AddThingToThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-groups/addThingToThingGroup");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      overrideDynamicGroups: [],
      thingArn: [],
      thingGroupArn: [],
      thingGroupName: [],
      thingName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_AddThingToThingGroupCommand");
var se_AssociateTargetsWithJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/jobs/{jobId}/targets");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  const query = (0, import_smithy_client.map)({
    [_nI]: [, input[_nI]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      comment: [],
      targets: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_AssociateTargetsWithJobCommand");
var se_AttachPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/target-policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      target: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_AttachPolicyCommand");
var se_AttachPrincipalPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaip]: input[_p]
  });
  b.bp("/principal-policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_AttachPrincipalPolicyCommand");
var se_AttachSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles/{securityProfileName}/targets");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  const query = (0, import_smithy_client.map)({
    [_sPTA]: [, (0, import_smithy_client.expectNonNull)(input[_sPTA], `securityProfileTargetArn`)]
  });
  let body;
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_AttachSecurityProfileCommand");
var se_AttachThingPrincipalCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xap]: input[_p]
  });
  b.bp("/things/{thingName}/principals");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_AttachThingPrincipalCommand");
var se_CancelAuditMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/mitigationactions/tasks/{taskId}/cancel");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CancelAuditMitigationActionsTaskCommand");
var se_CancelAuditTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/tasks/{taskId}/cancel");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CancelAuditTaskCommand");
var se_CancelCertificateTransferCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/cancel-certificate-transfer/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  let body;
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_CancelCertificateTransferCommand");
var se_CancelDetectMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/detect/mitigationactions/tasks/{taskId}/cancel");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CancelDetectMitigationActionsTaskCommand");
var se_CancelJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/jobs/{jobId}/cancel");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  const query = (0, import_smithy_client.map)({
    [_f]: [() => input.force !== void 0, () => input[_f].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      comment: [],
      reasonCode: []
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_CancelJobCommand");
var se_CancelJobExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/things/{thingName}/jobs/{jobId}/cancel");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  b.p("thingName", () => input.thingName, "{thingName}", false);
  const query = (0, import_smithy_client.map)({
    [_f]: [() => input.force !== void 0, () => input[_f].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      expectedVersion: [],
      statusDetails: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_CancelJobExecutionCommand");
var se_ClearDefaultAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/default-authorizer");
  let body;
  body = "";
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_ClearDefaultAuthorizerCommand");
var se_ConfirmTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/confirmdestination/{confirmationToken+}");
  b.p("confirmationToken", () => input.confirmationToken, "{confirmationToken+}", true);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ConfirmTopicRuleDestinationCommand");
var se_CreateAuditSuppressionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/suppressions/create");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      checkName: [],
      clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      description: [],
      expirationDate: (_) => Math.round(_.getTime() / 1e3),
      resourceIdentifier: (_) => (0, import_smithy_client._json)(_),
      suppressIndefinitely: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAuditSuppressionCommand");
var se_CreateAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/authorizer/{authorizerName}");
  b.p("authorizerName", () => input.authorizerName, "{authorizerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authorizerFunctionArn: [],
      enableCachingForHttp: [],
      signingDisabled: [],
      status: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      tokenKeyName: [],
      tokenSigningPublicKeys: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAuthorizerCommand");
var se_CreateBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/billing-groups/{billingGroupName}");
  b.p("billingGroupName", () => input.billingGroupName, "{billingGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      billingGroupProperties: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateBillingGroupCommand");
var se_CreateCertificateFromCsrCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/certificates");
  const query = (0, import_smithy_client.map)({
    [_sAA]: [() => input.setAsActive !== void 0, () => input[_sAA].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      certificateSigningRequest: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CreateCertificateFromCsrCommand");
var se_CreateCertificateProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/certificate-providers/{certificateProviderName}");
  b.p("certificateProviderName", () => input.certificateProviderName, "{certificateProviderName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accountDefaultForOperations: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      lambdaFunctionArn: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCertificateProviderCommand");
var se_CreateCustomMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/custom-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      displayName: [],
      metricType: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCustomMetricCommand");
var se_CreateDimensionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/dimensions/{name}");
  b.p("name", () => input.name, "{name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      stringValues: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_),
      type: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDimensionCommand");
var se_CreateDomainConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/domainConfigurations/{domainConfigurationName}");
  b.p("domainConfigurationName", () => input.domainConfigurationName, "{domainConfigurationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authorizerConfig: (_) => (0, import_smithy_client._json)(_),
      domainName: [],
      serverCertificateArns: (_) => (0, import_smithy_client._json)(_),
      serviceType: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      tlsConfig: (_) => (0, import_smithy_client._json)(_),
      validationCertificateArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDomainConfigurationCommand");
var se_CreateDynamicThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/dynamic-thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      indexName: [],
      queryString: [],
      queryVersion: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      thingGroupProperties: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDynamicThingGroupCommand");
var se_CreateFleetMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/fleet-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationField: [],
      aggregationType: (_) => (0, import_smithy_client._json)(_),
      description: [],
      indexName: [],
      period: [],
      queryString: [],
      queryVersion: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      unit: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateFleetMetricCommand");
var se_CreateJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/jobs/{jobId}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      abortConfig: (_) => se_AbortConfig(_, context),
      description: [],
      destinationPackageVersions: (_) => (0, import_smithy_client._json)(_),
      document: [],
      documentParameters: (_) => (0, import_smithy_client._json)(_),
      documentSource: [],
      jobExecutionsRetryConfig: (_) => (0, import_smithy_client._json)(_),
      jobExecutionsRolloutConfig: (_) => se_JobExecutionsRolloutConfig(_, context),
      jobTemplateArn: [],
      namespaceId: [],
      presignedUrlConfig: (_) => (0, import_smithy_client._json)(_),
      schedulingConfig: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_),
      targetSelection: [],
      targets: (_) => (0, import_smithy_client._json)(_),
      timeoutConfig: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateJobCommand");
var se_CreateJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/job-templates/{jobTemplateId}");
  b.p("jobTemplateId", () => input.jobTemplateId, "{jobTemplateId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      abortConfig: (_) => se_AbortConfig(_, context),
      description: [],
      destinationPackageVersions: (_) => (0, import_smithy_client._json)(_),
      document: [],
      documentSource: [],
      jobArn: [],
      jobExecutionsRetryConfig: (_) => (0, import_smithy_client._json)(_),
      jobExecutionsRolloutConfig: (_) => se_JobExecutionsRolloutConfig(_, context),
      maintenanceWindows: (_) => (0, import_smithy_client._json)(_),
      presignedUrlConfig: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_),
      timeoutConfig: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateJobTemplateCommand");
var se_CreateKeysAndCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/keys-and-certificate");
  const query = (0, import_smithy_client.map)({
    [_sAA]: [() => input.setAsActive !== void 0, () => input[_sAA].toString()]
  });
  let body;
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CreateKeysAndCertificateCommand");
var se_CreateMitigationActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/mitigationactions/actions/{actionName}");
  b.p("actionName", () => input.actionName, "{actionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      actionParams: (_) => (0, import_smithy_client._json)(_),
      roleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateMitigationActionCommand");
var se_CreateOTAUpdateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/otaUpdates/{otaUpdateId}");
  b.p("otaUpdateId", () => input.otaUpdateId, "{otaUpdateId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      additionalParameters: (_) => (0, import_smithy_client._json)(_),
      awsJobAbortConfig: (_) => se_AwsJobAbortConfig(_, context),
      awsJobExecutionsRolloutConfig: (_) => se_AwsJobExecutionsRolloutConfig(_, context),
      awsJobPresignedUrlConfig: (_) => (0, import_smithy_client._json)(_),
      awsJobTimeoutConfig: (_) => (0, import_smithy_client._json)(_),
      description: [],
      files: (_) => se_OTAUpdateFiles(_, context),
      protocols: (_) => (0, import_smithy_client._json)(_),
      roleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      targetSelection: [],
      targets: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateOTAUpdateCommand");
var se_CreatePackageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/packages/{packageName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_CreatePackageCommand");
var se_CreatePackageVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/packages/{packageName}/versions/{versionName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  b.p("versionName", () => input.versionName, "{versionName}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      attributes: (_) => (0, import_smithy_client._json)(_),
      description: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_CreatePackageVersionCommand");
var se_CreatePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      policyDocument: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePolicyCommand");
var se_CreatePolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/policies/{policyName}/version");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  const query = (0, import_smithy_client.map)({
    [_sAD]: [() => input.setAsDefault !== void 0, () => input[_sAD].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      policyDocument: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CreatePolicyVersionCommand");
var se_CreateProvisioningClaimCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates/{templateName}/provisioning-claim");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateProvisioningClaimCommand");
var se_CreateProvisioningTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/provisioning-templates");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      enabled: [],
      preProvisioningHook: (_) => (0, import_smithy_client._json)(_),
      provisioningRoleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      templateBody: [],
      templateName: [],
      type: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateProvisioningTemplateCommand");
var se_CreateProvisioningTemplateVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/provisioning-templates/{templateName}/versions");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  const query = (0, import_smithy_client.map)({
    [_sAD]: [() => input.setAsDefault !== void 0, () => input[_sAD].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      templateBody: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CreateProvisioningTemplateVersionCommand");
var se_CreateRoleAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/role-aliases/{roleAlias}");
  b.p("roleAlias", () => input.roleAlias, "{roleAlias}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      credentialDurationSeconds: [],
      roleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateRoleAliasCommand");
var se_CreateScheduledAuditCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/scheduledaudits/{scheduledAuditName}");
  b.p("scheduledAuditName", () => input.scheduledAuditName, "{scheduledAuditName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      dayOfMonth: [],
      dayOfWeek: [],
      frequency: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      targetCheckNames: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateScheduledAuditCommand");
var se_CreateSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/security-profiles/{securityProfileName}");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      additionalMetricsToRetain: (_) => (0, import_smithy_client._json)(_),
      additionalMetricsToRetainV2: (_) => (0, import_smithy_client._json)(_),
      alertTargets: (_) => (0, import_smithy_client._json)(_),
      behaviors: (_) => se_Behaviors(_, context),
      metricsExportConfig: (_) => (0, import_smithy_client._json)(_),
      securityProfileDescription: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSecurityProfileCommand");
var se_CreateStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/streams/{streamId}");
  b.p("streamId", () => input.streamId, "{streamId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      files: (_) => (0, import_smithy_client._json)(_),
      roleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateStreamCommand");
var se_CreateThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/things/{thingName}");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      attributePayload: (_) => (0, import_smithy_client._json)(_),
      billingGroupName: [],
      thingTypeName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateThingCommand");
var se_CreateThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      parentGroupName: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      thingGroupProperties: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateThingGroupCommand");
var se_CreateThingTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-types/{thingTypeName}");
  b.p("thingTypeName", () => input.thingTypeName, "{thingTypeName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: (_) => (0, import_smithy_client._json)(_),
      thingTypeProperties: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateThingTypeCommand");
var se_CreateTopicRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_xat]: input[_t]
  });
  b.bp("/rules/{ruleName}");
  b.p("ruleName", () => input.ruleName, "{ruleName}", false);
  let body;
  if (input.topicRulePayload !== void 0) {
    body = (0, import_smithy_client._json)(input.topicRulePayload);
  }
  if (body === void 0) {
    body = {};
  }
  body = JSON.stringify(body);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTopicRuleCommand");
var se_CreateTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/destinations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinationConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTopicRuleDestinationCommand");
var se_DeleteAccountAuditConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/configuration");
  const query = (0, import_smithy_client.map)({
    [_dSA]: [() => input.deleteScheduledAudits !== void 0, () => input[_dSA].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteAccountAuditConfigurationCommand");
var se_DeleteAuditSuppressionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/suppressions/delete");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      checkName: [],
      resourceIdentifier: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeleteAuditSuppressionCommand");
var se_DeleteAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/authorizer/{authorizerName}");
  b.p("authorizerName", () => input.authorizerName, "{authorizerName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAuthorizerCommand");
var se_DeleteBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/billing-groups/{billingGroupName}");
  b.p("billingGroupName", () => input.billingGroupName, "{billingGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteBillingGroupCommand");
var se_DeleteCACertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/cacertificate/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCACertificateCommand");
var se_DeleteCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificates/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  const query = (0, import_smithy_client.map)({
    [_fD]: [() => input.forceDelete !== void 0, () => input[_fD].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteCertificateCommand");
var se_DeleteCertificateProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificate-providers/{certificateProviderName}");
  b.p("certificateProviderName", () => input.certificateProviderName, "{certificateProviderName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCertificateProviderCommand");
var se_DeleteCustomMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/custom-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCustomMetricCommand");
var se_DeleteDimensionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dimensions/{name}");
  b.p("name", () => input.name, "{name}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteDimensionCommand");
var se_DeleteDomainConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/domainConfigurations/{domainConfigurationName}");
  b.p("domainConfigurationName", () => input.domainConfigurationName, "{domainConfigurationName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteDomainConfigurationCommand");
var se_DeleteDynamicThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dynamic-thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteDynamicThingGroupCommand");
var se_DeleteFleetMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/fleet-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteFleetMetricCommand");
var se_DeleteJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs/{jobId}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  const query = (0, import_smithy_client.map)({
    [_f]: [() => input.force !== void 0, () => input[_f].toString()],
    [_nI]: [, input[_nI]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteJobCommand");
var se_DeleteJobExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  b.p("thingName", () => input.thingName, "{thingName}", false);
  b.p("executionNumber", () => input.executionNumber.toString(), "{executionNumber}", false);
  const query = (0, import_smithy_client.map)({
    [_f]: [() => input.force !== void 0, () => input[_f].toString()],
    [_nI]: [, input[_nI]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteJobExecutionCommand");
var se_DeleteJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/job-templates/{jobTemplateId}");
  b.p("jobTemplateId", () => input.jobTemplateId, "{jobTemplateId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteJobTemplateCommand");
var se_DeleteMitigationActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/mitigationactions/actions/{actionName}");
  b.p("actionName", () => input.actionName, "{actionName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteMitigationActionCommand");
var se_DeleteOTAUpdateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/otaUpdates/{otaUpdateId}");
  b.p("otaUpdateId", () => input.otaUpdateId, "{otaUpdateId}", false);
  const query = (0, import_smithy_client.map)({
    [_dS]: [() => input.deleteStream !== void 0, () => input[_dS].toString()],
    [_fDAWSJ]: [() => input.forceDeleteAWSJob !== void 0, () => input[_fDAWSJ].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteOTAUpdateCommand");
var se_DeletePackageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/packages/{packageName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeletePackageCommand");
var se_DeletePackageVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/packages/{packageName}/versions/{versionName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  b.p("versionName", () => input.versionName, "{versionName}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeletePackageVersionCommand");
var se_DeletePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePolicyCommand");
var se_DeletePolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies/{policyName}/version/{policyVersionId}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  b.p("policyVersionId", () => input.policyVersionId, "{policyVersionId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePolicyVersionCommand");
var se_DeleteProvisioningTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates/{templateName}");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteProvisioningTemplateCommand");
var se_DeleteProvisioningTemplateVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates/{templateName}/versions/{versionId}");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  b.p("versionId", () => input.versionId.toString(), "{versionId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteProvisioningTemplateVersionCommand");
var se_DeleteRegistrationCodeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/registrationcode");
  let body;
  body = "";
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteRegistrationCodeCommand");
var se_DeleteRoleAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/role-aliases/{roleAlias}");
  b.p("roleAlias", () => input.roleAlias, "{roleAlias}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteRoleAliasCommand");
var se_DeleteScheduledAuditCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/scheduledaudits/{scheduledAuditName}");
  b.p("scheduledAuditName", () => input.scheduledAuditName, "{scheduledAuditName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteScheduledAuditCommand");
var se_DeleteSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles/{securityProfileName}");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteSecurityProfileCommand");
var se_DeleteStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/streams/{streamId}");
  b.p("streamId", () => input.streamId, "{streamId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteStreamCommand");
var se_DeleteThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteThingCommand");
var se_DeleteThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteThingGroupCommand");
var se_DeleteThingTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-types/{thingTypeName}");
  b.p("thingTypeName", () => input.thingTypeName, "{thingTypeName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteThingTypeCommand");
var se_DeleteTopicRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/rules/{ruleName}");
  b.p("ruleName", () => input.ruleName, "{ruleName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteTopicRuleCommand");
var se_DeleteTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/destinations/{arn+}");
  b.p("arn", () => input.arn, "{arn+}", true);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteTopicRuleDestinationCommand");
var se_DeleteV2LoggingLevelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v2LoggingLevel");
  const query = (0, import_smithy_client.map)({
    [_tT]: [, (0, import_smithy_client.expectNonNull)(input[_tT], `targetType`)],
    [_tN]: [, (0, import_smithy_client.expectNonNull)(input[_tN], `targetName`)]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteV2LoggingLevelCommand");
var se_DeprecateThingTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-types/{thingTypeName}/deprecate");
  b.p("thingTypeName", () => input.thingTypeName, "{thingTypeName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      undoDeprecate: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeprecateThingTypeCommand");
var se_DescribeAccountAuditConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/configuration");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAccountAuditConfigurationCommand");
var se_DescribeAuditFindingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/findings/{findingId}");
  b.p("findingId", () => input.findingId, "{findingId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAuditFindingCommand");
var se_DescribeAuditMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/mitigationactions/tasks/{taskId}");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAuditMitigationActionsTaskCommand");
var se_DescribeAuditSuppressionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/suppressions/describe");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      checkName: [],
      resourceIdentifier: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DescribeAuditSuppressionCommand");
var se_DescribeAuditTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/tasks/{taskId}");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAuditTaskCommand");
var se_DescribeAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/authorizer/{authorizerName}");
  b.p("authorizerName", () => input.authorizerName, "{authorizerName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAuthorizerCommand");
var se_DescribeBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/billing-groups/{billingGroupName}");
  b.p("billingGroupName", () => input.billingGroupName, "{billingGroupName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBillingGroupCommand");
var se_DescribeCACertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/cacertificate/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeCACertificateCommand");
var se_DescribeCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificates/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeCertificateCommand");
var se_DescribeCertificateProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificate-providers/{certificateProviderName}");
  b.p("certificateProviderName", () => input.certificateProviderName, "{certificateProviderName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeCertificateProviderCommand");
var se_DescribeCustomMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/custom-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeCustomMetricCommand");
var se_DescribeDefaultAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/default-authorizer");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDefaultAuthorizerCommand");
var se_DescribeDetectMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/detect/mitigationactions/tasks/{taskId}");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDetectMitigationActionsTaskCommand");
var se_DescribeDimensionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dimensions/{name}");
  b.p("name", () => input.name, "{name}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDimensionCommand");
var se_DescribeDomainConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/domainConfigurations/{domainConfigurationName}");
  b.p("domainConfigurationName", () => input.domainConfigurationName, "{domainConfigurationName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDomainConfigurationCommand");
var se_DescribeEndpointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/endpoint");
  const query = (0, import_smithy_client.map)({
    [_eT]: [, input[_eT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeEndpointCommand");
var se_DescribeEventConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/event-configurations");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeEventConfigurationsCommand");
var se_DescribeFleetMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/fleet-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeFleetMetricCommand");
var se_DescribeIndexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/indices/{indexName}");
  b.p("indexName", () => input.indexName, "{indexName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeIndexCommand");
var se_DescribeJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs/{jobId}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeJobCommand");
var se_DescribeJobExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}/jobs/{jobId}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  b.p("thingName", () => input.thingName, "{thingName}", false);
  const query = (0, import_smithy_client.map)({
    [_eN]: [() => input.executionNumber !== void 0, () => input[_eN].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeJobExecutionCommand");
var se_DescribeJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/job-templates/{jobTemplateId}");
  b.p("jobTemplateId", () => input.jobTemplateId, "{jobTemplateId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeJobTemplateCommand");
var se_DescribeManagedJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/managed-job-templates/{templateName}");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  const query = (0, import_smithy_client.map)({
    [_tV]: [, input[_tV]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeManagedJobTemplateCommand");
var se_DescribeMitigationActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/mitigationactions/actions/{actionName}");
  b.p("actionName", () => input.actionName, "{actionName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeMitigationActionCommand");
var se_DescribeProvisioningTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates/{templateName}");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeProvisioningTemplateCommand");
var se_DescribeProvisioningTemplateVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates/{templateName}/versions/{versionId}");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  b.p("versionId", () => input.versionId.toString(), "{versionId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeProvisioningTemplateVersionCommand");
var se_DescribeRoleAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/role-aliases/{roleAlias}");
  b.p("roleAlias", () => input.roleAlias, "{roleAlias}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeRoleAliasCommand");
var se_DescribeScheduledAuditCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/scheduledaudits/{scheduledAuditName}");
  b.p("scheduledAuditName", () => input.scheduledAuditName, "{scheduledAuditName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeScheduledAuditCommand");
var se_DescribeSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles/{securityProfileName}");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeSecurityProfileCommand");
var se_DescribeStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/streams/{streamId}");
  b.p("streamId", () => input.streamId, "{streamId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeStreamCommand");
var se_DescribeThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeThingCommand");
var se_DescribeThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeThingGroupCommand");
var se_DescribeThingRegistrationTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-registration-tasks/{taskId}");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeThingRegistrationTaskCommand");
var se_DescribeThingTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-types/{thingTypeName}");
  b.p("thingTypeName", () => input.thingTypeName, "{thingTypeName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeThingTypeCommand");
var se_DetachPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/target-policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      target: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DetachPolicyCommand");
var se_DetachPrincipalPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaip]: input[_p]
  });
  b.bp("/principal-policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DetachPrincipalPolicyCommand");
var se_DetachSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles/{securityProfileName}/targets");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  const query = (0, import_smithy_client.map)({
    [_sPTA]: [, (0, import_smithy_client.expectNonNull)(input[_sPTA], `securityProfileTargetArn`)]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DetachSecurityProfileCommand");
var se_DetachThingPrincipalCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xap]: input[_p]
  });
  b.bp("/things/{thingName}/principals");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DetachThingPrincipalCommand");
var se_DisableTopicRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/rules/{ruleName}/disable");
  b.p("ruleName", () => input.ruleName, "{ruleName}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DisableTopicRuleCommand");
var se_EnableTopicRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/rules/{ruleName}/enable");
  b.p("ruleName", () => input.ruleName, "{ruleName}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_EnableTopicRuleCommand");
var se_GetBehaviorModelTrainingSummariesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/behavior-model-training/summaries");
  const query = (0, import_smithy_client.map)({
    [_sPN]: [, input[_sPN]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetBehaviorModelTrainingSummariesCommand");
var se_GetBucketsAggregationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indices/buckets");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationField: [],
      bucketsAggregationType: (_) => (0, import_smithy_client._json)(_),
      indexName: [],
      queryString: [],
      queryVersion: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetBucketsAggregationCommand");
var se_GetCardinalityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indices/cardinality");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationField: [],
      indexName: [],
      queryString: [],
      queryVersion: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetCardinalityCommand");
var se_GetEffectivePoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/effective-policies");
  const query = (0, import_smithy_client.map)({
    [_tNh]: [, input[_tNh]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      cognitoIdentityPoolId: [],
      principal: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_GetEffectivePoliciesCommand");
var se_GetIndexingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indexing/config");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetIndexingConfigurationCommand");
var se_GetJobDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs/{jobId}/job-document");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetJobDocumentCommand");
var se_GetLoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/loggingOptions");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetLoggingOptionsCommand");
var se_GetOTAUpdateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/otaUpdates/{otaUpdateId}");
  b.p("otaUpdateId", () => input.otaUpdateId, "{otaUpdateId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetOTAUpdateCommand");
var se_GetPackageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/packages/{packageName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPackageCommand");
var se_GetPackageConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/package-configuration");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPackageConfigurationCommand");
var se_GetPackageVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/packages/{packageName}/versions/{versionName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  b.p("versionName", () => input.versionName, "{versionName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPackageVersionCommand");
var se_GetPercentilesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indices/percentiles");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationField: [],
      indexName: [],
      percents: (_) => se_PercentList(_, context),
      queryString: [],
      queryVersion: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetPercentilesCommand");
var se_GetPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPolicyCommand");
var se_GetPolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies/{policyName}/version/{policyVersionId}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  b.p("policyVersionId", () => input.policyVersionId, "{policyVersionId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPolicyVersionCommand");
var se_GetRegistrationCodeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/registrationcode");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetRegistrationCodeCommand");
var se_GetStatisticsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indices/statistics");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationField: [],
      indexName: [],
      queryString: [],
      queryVersion: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetStatisticsCommand");
var se_GetTopicRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/rules/{ruleName}");
  b.p("ruleName", () => input.ruleName, "{ruleName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetTopicRuleCommand");
var se_GetTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/destinations/{arn+}");
  b.p("arn", () => input.arn, "{arn+}", true);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetTopicRuleDestinationCommand");
var se_GetV2LoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v2LoggingOptions");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetV2LoggingOptionsCommand");
var se_ListActiveViolationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/active-violations");
  const query = (0, import_smithy_client.map)({
    [_tNh]: [, input[_tNh]],
    [_sPN]: [, input[_sPN]],
    [_bCT]: [, input[_bCT]],
    [_lSA]: [() => input.listSuppressedAlerts !== void 0, () => input[_lSA].toString()],
    [_vS]: [, input[_vS]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListActiveViolationsCommand");
var se_ListAttachedPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/attached-policies/{target}");
  b.p("target", () => input.target, "{target}", false);
  const query = (0, import_smithy_client.map)({
    [_r]: [() => input.recursive !== void 0, () => input[_r].toString()],
    [_m]: [, input[_m]],
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()]
  });
  let body;
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAttachedPoliciesCommand");
var se_ListAuditFindingsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/findings");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      checkName: [],
      endTime: (_) => Math.round(_.getTime() / 1e3),
      listSuppressedFindings: [],
      maxResults: [],
      nextToken: [],
      resourceIdentifier: (_) => (0, import_smithy_client._json)(_),
      startTime: (_) => Math.round(_.getTime() / 1e3),
      taskId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListAuditFindingsCommand");
var se_ListAuditMitigationActionsExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/mitigationactions/executions");
  const query = (0, import_smithy_client.map)({
    [_tI]: [, (0, import_smithy_client.expectNonNull)(input[_tI], `taskId`)],
    [_aS]: [, input[_aS]],
    [_fI]: [, (0, import_smithy_client.expectNonNull)(input[_fI], `findingId`)],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAuditMitigationActionsExecutionsCommand");
var se_ListAuditMitigationActionsTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/mitigationactions/tasks");
  const query = (0, import_smithy_client.map)({
    [_aTI]: [, input[_aTI]],
    [_fI]: [, input[_fI]],
    [_tS]: [, input[_tS]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_sT]: [
      (0, import_smithy_client.expectNonNull)(input.startTime, `startTime`) != null,
      () => (input[_sT].toISOString().split(".")[0] + "Z").toString()
    ],
    [_eTn]: [
      (0, import_smithy_client.expectNonNull)(input.endTime, `endTime`) != null,
      () => (input[_eTn].toISOString().split(".")[0] + "Z").toString()
    ]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAuditMitigationActionsTasksCommand");
var se_ListAuditSuppressionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/suppressions/list");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ascendingOrder: [],
      checkName: [],
      maxResults: [],
      nextToken: [],
      resourceIdentifier: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListAuditSuppressionsCommand");
var se_ListAuditTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/tasks");
  const query = (0, import_smithy_client.map)({
    [_sT]: [
      (0, import_smithy_client.expectNonNull)(input.startTime, `startTime`) != null,
      () => (input[_sT].toISOString().split(".")[0] + "Z").toString()
    ],
    [_eTn]: [
      (0, import_smithy_client.expectNonNull)(input.endTime, `endTime`) != null,
      () => (input[_eTn].toISOString().split(".")[0] + "Z").toString()
    ],
    [_tTa]: [, input[_tTa]],
    [_tS]: [, input[_tS]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAuditTasksCommand");
var se_ListAuthorizersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/authorizers");
  const query = (0, import_smithy_client.map)({
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_m]: [, input[_m]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()],
    [_s]: [, input[_s]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAuthorizersCommand");
var se_ListBillingGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/billing-groups");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nPF]: [, input[_nPF]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListBillingGroupsCommand");
var se_ListCACertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/cacertificates");
  const query = (0, import_smithy_client.map)({
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_m]: [, input[_m]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()],
    [_tNe]: [, input[_tNe]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCACertificatesCommand");
var se_ListCertificateProvidersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificate-providers");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCertificateProvidersCommand");
var se_ListCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificates");
  const query = (0, import_smithy_client.map)({
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_m]: [, input[_m]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCertificatesCommand");
var se_ListCertificatesByCACommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificates-by-ca/{caCertificateId}");
  b.p("caCertificateId", () => input.caCertificateId, "{caCertificateId}", false);
  const query = (0, import_smithy_client.map)({
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_m]: [, input[_m]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCertificatesByCACommand");
var se_ListCustomMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/custom-metrics");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCustomMetricsCommand");
var se_ListDetectMitigationActionsExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/detect/mitigationactions/executions");
  const query = (0, import_smithy_client.map)({
    [_tI]: [, input[_tI]],
    [_vI]: [, input[_vI]],
    [_tNh]: [, input[_tNh]],
    [_sT]: [() => input.startTime !== void 0, () => (input[_sT].toISOString().split(".")[0] + "Z").toString()],
    [_eTn]: [() => input.endTime !== void 0, () => (input[_eTn].toISOString().split(".")[0] + "Z").toString()],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDetectMitigationActionsExecutionsCommand");
var se_ListDetectMitigationActionsTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/detect/mitigationactions/tasks");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_sT]: [
      (0, import_smithy_client.expectNonNull)(input.startTime, `startTime`) != null,
      () => (input[_sT].toISOString().split(".")[0] + "Z").toString()
    ],
    [_eTn]: [
      (0, import_smithy_client.expectNonNull)(input.endTime, `endTime`) != null,
      () => (input[_eTn].toISOString().split(".")[0] + "Z").toString()
    ]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDetectMitigationActionsTasksCommand");
var se_ListDimensionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dimensions");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDimensionsCommand");
var se_ListDomainConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/domainConfigurations");
  const query = (0, import_smithy_client.map)({
    [_m]: [, input[_m]],
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_sTe]: [, input[_sTe]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDomainConfigurationsCommand");
var se_ListFleetMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/fleet-metrics");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListFleetMetricsCommand");
var se_ListIndicesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/indices");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListIndicesCommand");
var se_ListJobExecutionsForJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs/{jobId}/things");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  const query = (0, import_smithy_client.map)({
    [_s]: [, input[_s]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobExecutionsForJobCommand");
var se_ListJobExecutionsForThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}/jobs");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  const query = (0, import_smithy_client.map)({
    [_s]: [, input[_s]],
    [_nI]: [, input[_nI]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_jI]: [, input[_jI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobExecutionsForThingCommand");
var se_ListJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs");
  const query = (0, import_smithy_client.map)({
    [_s]: [, input[_s]],
    [_tSa]: [, input[_tSa]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_tGN]: [, input[_tGN]],
    [_tGI]: [, input[_tGI]],
    [_nI]: [, input[_nI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobsCommand");
var se_ListJobTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/job-templates");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobTemplatesCommand");
var se_ListManagedJobTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/managed-job-templates");
  const query = (0, import_smithy_client.map)({
    [_tNe]: [, input[_tNe]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListManagedJobTemplatesCommand");
var se_ListMetricValuesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/metric-values");
  const query = (0, import_smithy_client.map)({
    [_tNh]: [, (0, import_smithy_client.expectNonNull)(input[_tNh], `thingName`)],
    [_mN]: [, (0, import_smithy_client.expectNonNull)(input[_mN], `metricName`)],
    [_dN]: [, input[_dN]],
    [_dVO]: [, input[_dVO]],
    [_sT]: [
      (0, import_smithy_client.expectNonNull)(input.startTime, `startTime`) != null,
      () => (input[_sT].toISOString().split(".")[0] + "Z").toString()
    ],
    [_eTn]: [
      (0, import_smithy_client.expectNonNull)(input.endTime, `endTime`) != null,
      () => (input[_eTn].toISOString().split(".")[0] + "Z").toString()
    ],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListMetricValuesCommand");
var se_ListMitigationActionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/mitigationactions/actions");
  const query = (0, import_smithy_client.map)({
    [_aT]: [, input[_aT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListMitigationActionsCommand");
var se_ListOTAUpdatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/otaUpdates");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_oUS]: [, input[_oUS]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListOTAUpdatesCommand");
var se_ListOutgoingCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificates-out-going");
  const query = (0, import_smithy_client.map)({
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_m]: [, input[_m]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListOutgoingCertificatesCommand");
var se_ListPackagesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/packages");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPackagesCommand");
var se_ListPackageVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/packages/{packageName}/versions");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  const query = (0, import_smithy_client.map)({
    [_s]: [, input[_s]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPackageVersionsCommand");
var se_ListPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies");
  const query = (0, import_smithy_client.map)({
    [_m]: [, input[_m]],
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPoliciesCommand");
var se_ListPolicyPrincipalsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaip_]: input[_pN]
  });
  b.bp("/policy-principals");
  const query = (0, import_smithy_client.map)({
    [_m]: [, input[_m]],
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPolicyPrincipalsCommand");
var se_ListPolicyVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies/{policyName}/version");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListPolicyVersionsCommand");
var se_ListPrincipalPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaip]: input[_p]
  });
  b.bp("/principal-policies");
  const query = (0, import_smithy_client.map)({
    [_m]: [, input[_m]],
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPrincipalPoliciesCommand");
var se_ListPrincipalThingsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xap]: input[_p]
  });
  b.bp("/principals/things");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPrincipalThingsCommand");
var se_ListProvisioningTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListProvisioningTemplatesCommand");
var se_ListProvisioningTemplateVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/provisioning-templates/{templateName}/versions");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListProvisioningTemplateVersionsCommand");
var se_ListRelatedResourcesForAuditFindingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/relatedResources");
  const query = (0, import_smithy_client.map)({
    [_fI]: [, (0, import_smithy_client.expectNonNull)(input[_fI], `findingId`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListRelatedResourcesForAuditFindingCommand");
var se_ListRoleAliasesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/role-aliases");
  const query = (0, import_smithy_client.map)({
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()],
    [_m]: [, input[_m]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListRoleAliasesCommand");
var se_ListScheduledAuditsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/audit/scheduledaudits");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListScheduledAuditsCommand");
var se_ListSecurityProfilesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_dN]: [, input[_dN]],
    [_mN]: [, input[_mN]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListSecurityProfilesCommand");
var se_ListSecurityProfilesForTargetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles-for-target");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_r]: [() => input.recursive !== void 0, () => input[_r].toString()],
    [_sPTA]: [, (0, import_smithy_client.expectNonNull)(input[_sPTA], `securityProfileTargetArn`)]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListSecurityProfilesForTargetCommand");
var se_ListStreamsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/streams");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_iAO]: [() => input.ascendingOrder !== void 0, () => input[_aO].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListStreamsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListTargetsForPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policy-targets/{policyName}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  const query = (0, import_smithy_client.map)({
    [_m]: [, input[_m]],
    [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()]
  });
  let body;
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTargetsForPolicyCommand");
var se_ListTargetsForSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/security-profiles/{securityProfileName}/targets");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTargetsForSecurityProfileCommand");
var se_ListThingGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-groups");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_pG]: [, input[_pG]],
    [_nPF]: [, input[_nPF]],
    [_r]: [() => input.recursive !== void 0, () => input[_r].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingGroupsCommand");
var se_ListThingGroupsForThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}/thing-groups");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingGroupsForThingCommand");
var se_ListThingPrincipalsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things/{thingName}/principals");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingPrincipalsCommand");
var se_ListThingRegistrationTaskReportsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-registration-tasks/{taskId}/reports");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  const query = (0, import_smithy_client.map)({
    [_rT]: [, (0, import_smithy_client.expectNonNull)(input[_rT], `reportType`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingRegistrationTaskReportsCommand");
var se_ListThingRegistrationTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-registration-tasks");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_s]: [, input[_s]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingRegistrationTasksCommand");
var se_ListThingsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/things");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_aN]: [, input[_aN]],
    [_aV]: [, input[_aV]],
    [_tTN]: [, input[_tTN]],
    [_uPAV]: [() => input.usePrefixAttributeValue !== void 0, () => input[_uPAV].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingsCommand");
var se_ListThingsInBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/billing-groups/{billingGroupName}/things");
  b.p("billingGroupName", () => input.billingGroupName, "{billingGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingsInBillingGroupCommand");
var se_ListThingsInThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-groups/{thingGroupName}/things");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_r]: [() => input.recursive !== void 0, () => input[_r].toString()],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingsInThingGroupCommand");
var se_ListThingTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-types");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_tTN]: [, input[_tTN]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListThingTypesCommand");
var se_ListTopicRuleDestinationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/destinations");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTopicRuleDestinationsCommand");
var se_ListTopicRulesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/rules");
  const query = (0, import_smithy_client.map)({
    [_to]: [, input[_to]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_rD]: [() => input.ruleDisabled !== void 0, () => input[_rD].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTopicRulesCommand");
var se_ListV2LoggingLevelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v2LoggingLevel");
  const query = (0, import_smithy_client.map)({
    [_tT]: [, input[_tT]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListV2LoggingLevelsCommand");
var se_ListViolationEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/violation-events");
  const query = (0, import_smithy_client.map)({
    [_sT]: [
      (0, import_smithy_client.expectNonNull)(input.startTime, `startTime`) != null,
      () => (input[_sT].toISOString().split(".")[0] + "Z").toString()
    ],
    [_eTn]: [
      (0, import_smithy_client.expectNonNull)(input.endTime, `endTime`) != null,
      () => (input[_eTn].toISOString().split(".")[0] + "Z").toString()
    ],
    [_tNh]: [, input[_tNh]],
    [_sPN]: [, input[_sPN]],
    [_bCT]: [, input[_bCT]],
    [_lSA]: [() => input.listSuppressedAlerts !== void 0, () => input[_lSA].toString()],
    [_vS]: [, input[_vS]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListViolationEventsCommand");
var se_PutVerificationStateOnViolationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/violations/verification-state/{violationId}");
  b.p("violationId", () => input.violationId, "{violationId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      verificationState: [],
      verificationStateDescription: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutVerificationStateOnViolationCommand");
var se_RegisterCACertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/cacertificate");
  const query = (0, import_smithy_client.map)({
    [_sAA]: [() => input.setAsActive !== void 0, () => input[_sAA].toString()],
    [_aAR]: [() => input.allowAutoRegistration !== void 0, () => input[_aAR].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      caCertificate: [],
      certificateMode: [],
      registrationConfig: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_),
      verificationCertificate: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_RegisterCACertificateCommand");
var se_RegisterCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/certificate/register");
  const query = (0, import_smithy_client.map)({
    [_sAA]: [() => input.setAsActive !== void 0, () => input[_sAA].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      caCertificatePem: [],
      certificatePem: [],
      status: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_RegisterCertificateCommand");
var se_RegisterCertificateWithoutCACommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/certificate/register-no-ca");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      certificatePem: [],
      status: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RegisterCertificateWithoutCACommand");
var se_RegisterThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/things");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      parameters: (_) => (0, import_smithy_client._json)(_),
      templateBody: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RegisterThingCommand");
var se_RejectCertificateTransferCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/reject-certificate-transfer/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      rejectReason: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_RejectCertificateTransferCommand");
var se_RemoveThingFromBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/billing-groups/removeThingFromBillingGroup");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      billingGroupArn: [],
      billingGroupName: [],
      thingArn: [],
      thingName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_RemoveThingFromBillingGroupCommand");
var se_RemoveThingFromThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-groups/removeThingFromThingGroup");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      thingArn: [],
      thingGroupArn: [],
      thingGroupName: [],
      thingName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_RemoveThingFromThingGroupCommand");
var se_ReplaceTopicRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/rules/{ruleName}");
  b.p("ruleName", () => input.ruleName, "{ruleName}", false);
  let body;
  if (input.topicRulePayload !== void 0) {
    body = (0, import_smithy_client._json)(input.topicRulePayload);
  }
  if (body === void 0) {
    body = {};
  }
  body = JSON.stringify(body);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_ReplaceTopicRuleCommand");
var se_SearchIndexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indices/search");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      indexName: [],
      maxResults: [],
      nextToken: [],
      queryString: [],
      queryVersion: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SearchIndexCommand");
var se_SetDefaultAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/default-authorizer");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authorizerName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SetDefaultAuthorizerCommand");
var se_SetDefaultPolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policies/{policyName}/version/{policyVersionId}");
  b.p("policyName", () => input.policyName, "{policyName}", false);
  b.p("policyVersionId", () => input.policyVersionId, "{policyVersionId}", false);
  let body;
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_SetDefaultPolicyVersionCommand");
var se_SetLoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/loggingOptions");
  let body;
  if (input.loggingOptionsPayload !== void 0) {
    body = (0, import_smithy_client._json)(input.loggingOptionsPayload);
  }
  if (body === void 0) {
    body = {};
  }
  body = JSON.stringify(body);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SetLoggingOptionsCommand");
var se_SetV2LoggingLevelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v2LoggingLevel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      logLevel: [],
      logTarget: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SetV2LoggingLevelCommand");
var se_SetV2LoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v2LoggingOptions");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      defaultLogLevel: [],
      disableAllLogs: [],
      roleArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SetV2LoggingOptionsCommand");
var se_StartAuditMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/mitigationactions/tasks/{taskId}");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      auditCheckToActionsMapping: (_) => (0, import_smithy_client._json)(_),
      clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      target: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartAuditMitigationActionsTaskCommand");
var se_StartDetectMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/detect/mitigationactions/tasks/{taskId}");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      actions: (_) => (0, import_smithy_client._json)(_),
      clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      includeOnlyActiveViolations: [],
      includeSuppressedAlerts: [],
      target: (_) => (0, import_smithy_client._json)(_),
      violationEventOccurrenceRange: (_) => se_ViolationEventOccurrenceRange(_, context)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StartDetectMitigationActionsTaskCommand");
var se_StartOnDemandAuditTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/tasks");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      targetCheckNames: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartOnDemandAuditTaskCommand");
var se_StartThingRegistrationTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-registration-tasks");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      inputFileBucket: [],
      inputFileKey: [],
      roleArn: [],
      templateBody: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartThingRegistrationTaskCommand");
var se_StopThingRegistrationTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/thing-registration-tasks/{taskId}/cancel");
  b.p("taskId", () => input.taskId, "{taskId}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StopThingRegistrationTaskCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      resourceArn: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_TestAuthorizationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/test-authorization");
  const query = (0, import_smithy_client.map)({
    [_cI]: [, input[_cI]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authInfos: (_) => (0, import_smithy_client._json)(_),
      cognitoIdentityPoolId: [],
      policyNamesToAdd: (_) => (0, import_smithy_client._json)(_),
      policyNamesToSkip: (_) => (0, import_smithy_client._json)(_),
      principal: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_TestAuthorizationCommand");
var se_TestInvokeAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/authorizer/{authorizerName}/test");
  b.p("authorizerName", () => input.authorizerName, "{authorizerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      httpContext: (_) => (0, import_smithy_client._json)(_),
      mqttContext: (_) => se_MqttContext(_, context),
      tlsContext: (_) => (0, import_smithy_client._json)(_),
      token: [],
      tokenSignature: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TestInvokeAuthorizerCommand");
var se_TransferCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/transfer-certificate/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  const query = (0, import_smithy_client.map)({
    [_tAA]: [, (0, import_smithy_client.expectNonNull)(input[_tAA], `targetAwsAccount`)]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      transferMessage: []
    })
  );
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_TransferCertificateCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/untag");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      resourceArn: [],
      tagKeys: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateAccountAuditConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/configuration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      auditCheckConfigurations: (_) => (0, import_smithy_client._json)(_),
      auditNotificationTargetConfigurations: (_) => (0, import_smithy_client._json)(_),
      roleArn: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateAccountAuditConfigurationCommand");
var se_UpdateAuditSuppressionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/suppressions/update");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      checkName: [],
      description: [],
      expirationDate: (_) => Math.round(_.getTime() / 1e3),
      resourceIdentifier: (_) => (0, import_smithy_client._json)(_),
      suppressIndefinitely: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateAuditSuppressionCommand");
var se_UpdateAuthorizerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/authorizer/{authorizerName}");
  b.p("authorizerName", () => input.authorizerName, "{authorizerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authorizerFunctionArn: [],
      enableCachingForHttp: [],
      status: [],
      tokenKeyName: [],
      tokenSigningPublicKeys: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAuthorizerCommand");
var se_UpdateBillingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/billing-groups/{billingGroupName}");
  b.p("billingGroupName", () => input.billingGroupName, "{billingGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      billingGroupProperties: (_) => (0, import_smithy_client._json)(_),
      expectedVersion: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateBillingGroupCommand");
var se_UpdateCACertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/cacertificate/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  const query = (0, import_smithy_client.map)({
    [_nS]: [, input[_nS]],
    [_nARS]: [, input[_nARS]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      registrationConfig: (_) => (0, import_smithy_client._json)(_),
      removeAutoRegistration: []
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateCACertificateCommand");
var se_UpdateCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/certificates/{certificateId}");
  b.p("certificateId", () => input.certificateId, "{certificateId}", false);
  const query = (0, import_smithy_client.map)({
    [_nS]: [, (0, import_smithy_client.expectNonNull)(input[_nS], `newStatus`)]
  });
  let body;
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateCertificateCommand");
var se_UpdateCertificateProviderCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/certificate-providers/{certificateProviderName}");
  b.p("certificateProviderName", () => input.certificateProviderName, "{certificateProviderName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accountDefaultForOperations: (_) => (0, import_smithy_client._json)(_),
      lambdaFunctionArn: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateCertificateProviderCommand");
var se_UpdateCustomMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/custom-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      displayName: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateCustomMetricCommand");
var se_UpdateDimensionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/dimensions/{name}");
  b.p("name", () => input.name, "{name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      stringValues: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateDimensionCommand");
var se_UpdateDomainConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/domainConfigurations/{domainConfigurationName}");
  b.p("domainConfigurationName", () => input.domainConfigurationName, "{domainConfigurationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authorizerConfig: (_) => (0, import_smithy_client._json)(_),
      domainConfigurationStatus: [],
      removeAuthorizerConfig: [],
      tlsConfig: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateDomainConfigurationCommand");
var se_UpdateDynamicThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/dynamic-thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      expectedVersion: [],
      indexName: [],
      queryString: [],
      queryVersion: [],
      thingGroupProperties: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateDynamicThingGroupCommand");
var se_UpdateEventConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/event-configurations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      eventConfigurations: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateEventConfigurationsCommand");
var se_UpdateFleetMetricCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/fleet-metric/{metricName}");
  b.p("metricName", () => input.metricName, "{metricName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationField: [],
      aggregationType: (_) => (0, import_smithy_client._json)(_),
      description: [],
      expectedVersion: [],
      indexName: [],
      period: [],
      queryString: [],
      queryVersion: [],
      unit: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateFleetMetricCommand");
var se_UpdateIndexingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/indexing/config");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      thingGroupIndexingConfiguration: (_) => (0, import_smithy_client._json)(_),
      thingIndexingConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_UpdateIndexingConfigurationCommand");
var se_UpdateJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/jobs/{jobId}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  const query = (0, import_smithy_client.map)({
    [_nI]: [, input[_nI]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      abortConfig: (_) => se_AbortConfig(_, context),
      description: [],
      jobExecutionsRetryConfig: (_) => (0, import_smithy_client._json)(_),
      jobExecutionsRolloutConfig: (_) => se_JobExecutionsRolloutConfig(_, context),
      presignedUrlConfig: (_) => (0, import_smithy_client._json)(_),
      timeoutConfig: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateJobCommand");
var se_UpdateMitigationActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/mitigationactions/actions/{actionName}");
  b.p("actionName", () => input.actionName, "{actionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      actionParams: (_) => (0, import_smithy_client._json)(_),
      roleArn: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateMitigationActionCommand");
var se_UpdatePackageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/packages/{packageName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      defaultVersionName: [],
      description: [],
      unsetDefaultVersion: []
    })
  );
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdatePackageCommand");
var se_UpdatePackageConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/package-configuration");
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      versionUpdateByJobsConfig: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdatePackageConfigurationCommand");
var se_UpdatePackageVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/packages/{packageName}/versions/{versionName}");
  b.p("packageName", () => input.packageName, "{packageName}", false);
  b.p("versionName", () => input.versionName, "{versionName}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      action: [],
      attributes: (_) => (0, import_smithy_client._json)(_),
      description: []
    })
  );
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdatePackageVersionCommand");
var se_UpdateProvisioningTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/provisioning-templates/{templateName}");
  b.p("templateName", () => input.templateName, "{templateName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      defaultVersionId: [],
      description: [],
      enabled: [],
      preProvisioningHook: (_) => (0, import_smithy_client._json)(_),
      provisioningRoleArn: [],
      removePreProvisioningHook: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateProvisioningTemplateCommand");
var se_UpdateRoleAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/role-aliases/{roleAlias}");
  b.p("roleAlias", () => input.roleAlias, "{roleAlias}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      credentialDurationSeconds: [],
      roleArn: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateRoleAliasCommand");
var se_UpdateScheduledAuditCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/audit/scheduledaudits/{scheduledAuditName}");
  b.p("scheduledAuditName", () => input.scheduledAuditName, "{scheduledAuditName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      dayOfMonth: [],
      dayOfWeek: [],
      frequency: [],
      targetCheckNames: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateScheduledAuditCommand");
var se_UpdateSecurityProfileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/security-profiles/{securityProfileName}");
  b.p("securityProfileName", () => input.securityProfileName, "{securityProfileName}", false);
  const query = (0, import_smithy_client.map)({
    [_eV]: [() => input.expectedVersion !== void 0, () => input[_eV].toString()]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      additionalMetricsToRetain: (_) => (0, import_smithy_client._json)(_),
      additionalMetricsToRetainV2: (_) => (0, import_smithy_client._json)(_),
      alertTargets: (_) => (0, import_smithy_client._json)(_),
      behaviors: (_) => se_Behaviors(_, context),
      deleteAdditionalMetricsToRetain: [],
      deleteAlertTargets: [],
      deleteBehaviors: [],
      deleteMetricsExportConfig: [],
      metricsExportConfig: (_) => (0, import_smithy_client._json)(_),
      securityProfileDescription: []
    })
  );
  b.m("PATCH").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateSecurityProfileCommand");
var se_UpdateStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/streams/{streamId}");
  b.p("streamId", () => input.streamId, "{streamId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      files: (_) => (0, import_smithy_client._json)(_),
      roleArn: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateStreamCommand");
var se_UpdateThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/things/{thingName}");
  b.p("thingName", () => input.thingName, "{thingName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      attributePayload: (_) => (0, import_smithy_client._json)(_),
      expectedVersion: [],
      removeThingType: [],
      thingTypeName: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateThingCommand");
var se_UpdateThingGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-groups/{thingGroupName}");
  b.p("thingGroupName", () => input.thingGroupName, "{thingGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      expectedVersion: [],
      thingGroupProperties: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateThingGroupCommand");
var se_UpdateThingGroupsForThingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/thing-groups/updateThingGroupsForThing");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      overrideDynamicGroups: [],
      thingGroupsToAdd: (_) => (0, import_smithy_client._json)(_),
      thingGroupsToRemove: (_) => (0, import_smithy_client._json)(_),
      thingName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateThingGroupsForThingCommand");
var se_UpdateTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/destinations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: [],
      status: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateTopicRuleDestinationCommand");
var se_ValidateSecurityProfileBehaviorsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/security-profile-behaviors/validate");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      behaviors: (_) => se_Behaviors(_, context)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ValidateSecurityProfileBehaviorsCommand");
var de_AcceptCertificateTransferCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AcceptCertificateTransferCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AcceptCertificateTransferCommand");
var de_AcceptCertificateTransferCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "TransferAlreadyCompletedException":
    case "com.amazonaws.iot#TransferAlreadyCompletedException":
      throw await de_TransferAlreadyCompletedExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AcceptCertificateTransferCommandError");
var de_AddThingToBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AddThingToBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AddThingToBillingGroupCommand");
var de_AddThingToBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AddThingToBillingGroupCommandError");
var de_AddThingToThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AddThingToThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AddThingToThingGroupCommand");
var de_AddThingToThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AddThingToThingGroupCommandError");
var de_AssociateTargetsWithJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AssociateTargetsWithJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    jobArn: import_smithy_client.expectString,
    jobId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AssociateTargetsWithJobCommand");
var de_AssociateTargetsWithJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AssociateTargetsWithJobCommandError");
var de_AttachPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AttachPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AttachPolicyCommand");
var de_AttachPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AttachPolicyCommandError");
var de_AttachPrincipalPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AttachPrincipalPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AttachPrincipalPolicyCommand");
var de_AttachPrincipalPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AttachPrincipalPolicyCommandError");
var de_AttachSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AttachSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AttachSecurityProfileCommand");
var de_AttachSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AttachSecurityProfileCommandError");
var de_AttachThingPrincipalCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AttachThingPrincipalCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AttachThingPrincipalCommand");
var de_AttachThingPrincipalCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_AttachThingPrincipalCommandError");
var de_CancelAuditMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelAuditMitigationActionsTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelAuditMitigationActionsTaskCommand");
var de_CancelAuditMitigationActionsTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CancelAuditMitigationActionsTaskCommandError");
var de_CancelAuditTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelAuditTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelAuditTaskCommand");
var de_CancelAuditTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CancelAuditTaskCommandError");
var de_CancelCertificateTransferCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelCertificateTransferCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelCertificateTransferCommand");
var de_CancelCertificateTransferCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "TransferAlreadyCompletedException":
    case "com.amazonaws.iot#TransferAlreadyCompletedException":
      throw await de_TransferAlreadyCompletedExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CancelCertificateTransferCommandError");
var de_CancelDetectMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelDetectMitigationActionsTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelDetectMitigationActionsTaskCommand");
var de_CancelDetectMitigationActionsTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CancelDetectMitigationActionsTaskCommandError");
var de_CancelJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    jobArn: import_smithy_client.expectString,
    jobId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CancelJobCommand");
var de_CancelJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CancelJobCommandError");
var de_CancelJobExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelJobExecutionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelJobExecutionCommand");
var de_CancelJobExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "InvalidStateTransitionException":
    case "com.amazonaws.iot#InvalidStateTransitionException":
      throw await de_InvalidStateTransitionExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CancelJobExecutionCommandError");
var de_ClearDefaultAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ClearDefaultAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_ClearDefaultAuthorizerCommand");
var de_ClearDefaultAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ClearDefaultAuthorizerCommandError");
var de_ConfirmTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ConfirmTopicRuleDestinationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_ConfirmTopicRuleDestinationCommand");
var de_ConfirmTopicRuleDestinationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ConfirmTopicRuleDestinationCommandError");
var de_CreateAuditSuppressionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAuditSuppressionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CreateAuditSuppressionCommand");
var de_CreateAuditSuppressionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateAuditSuppressionCommandError");
var de_CreateAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizerArn: import_smithy_client.expectString,
    authorizerName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateAuthorizerCommand");
var de_CreateAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateAuthorizerCommandError");
var de_CreateBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    billingGroupArn: import_smithy_client.expectString,
    billingGroupId: import_smithy_client.expectString,
    billingGroupName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBillingGroupCommand");
var de_CreateBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateBillingGroupCommandError");
var de_CreateCertificateFromCsrCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateCertificateFromCsrCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    certificatePem: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCertificateFromCsrCommand");
var de_CreateCertificateFromCsrCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateCertificateFromCsrCommandError");
var de_CreateCertificateProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateCertificateProviderCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateProviderArn: import_smithy_client.expectString,
    certificateProviderName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCertificateProviderCommand");
var de_CreateCertificateProviderCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateCertificateProviderCommandError");
var de_CreateCustomMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateCustomMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    metricArn: import_smithy_client.expectString,
    metricName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCustomMetricCommand");
var de_CreateCustomMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateCustomMetricCommandError");
var de_CreateDimensionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateDimensionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    name: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDimensionCommand");
var de_CreateDimensionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateDimensionCommandError");
var de_CreateDomainConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateDomainConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    domainConfigurationArn: import_smithy_client.expectString,
    domainConfigurationName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDomainConfigurationCommand");
var de_CreateDomainConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateValidationException":
    case "com.amazonaws.iot#CertificateValidationException":
      throw await de_CertificateValidationExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateDomainConfigurationCommandError");
var de_CreateDynamicThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateDynamicThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    indexName: import_smithy_client.expectString,
    queryString: import_smithy_client.expectString,
    queryVersion: import_smithy_client.expectString,
    thingGroupArn: import_smithy_client.expectString,
    thingGroupId: import_smithy_client.expectString,
    thingGroupName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDynamicThingGroupCommand");
var de_CreateDynamicThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateDynamicThingGroupCommandError");
var de_CreateFleetMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateFleetMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    metricArn: import_smithy_client.expectString,
    metricName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateFleetMetricCommand");
var de_CreateFleetMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidAggregationException":
    case "com.amazonaws.iot#InvalidAggregationException":
      throw await de_InvalidAggregationExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateFleetMetricCommandError");
var de_CreateJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    jobArn: import_smithy_client.expectString,
    jobId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateJobCommand");
var de_CreateJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateJobCommandError");
var de_CreateJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateJobTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    jobTemplateArn: import_smithy_client.expectString,
    jobTemplateId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateJobTemplateCommand");
var de_CreateJobTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.iot#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateJobTemplateCommandError");
var de_CreateKeysAndCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateKeysAndCertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    certificatePem: import_smithy_client.expectString,
    keyPair: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateKeysAndCertificateCommand");
var de_CreateKeysAndCertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateKeysAndCertificateCommandError");
var de_CreateMitigationActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateMitigationActionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionArn: import_smithy_client.expectString,
    actionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateMitigationActionCommand");
var de_CreateMitigationActionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateMitigationActionCommandError");
var de_CreateOTAUpdateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateOTAUpdateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    awsIotJobArn: import_smithy_client.expectString,
    awsIotJobId: import_smithy_client.expectString,
    otaUpdateArn: import_smithy_client.expectString,
    otaUpdateId: import_smithy_client.expectString,
    otaUpdateStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateOTAUpdateCommand");
var de_CreateOTAUpdateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateOTAUpdateCommandError");
var de_CreatePackageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreatePackageCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    packageArn: import_smithy_client.expectString,
    packageName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePackageCommand");
var de_CreatePackageCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.iot#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.iot#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreatePackageCommandError");
var de_CreatePackageVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreatePackageVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    attributes: import_smithy_client._json,
    description: import_smithy_client.expectString,
    errorReason: import_smithy_client.expectString,
    packageName: import_smithy_client.expectString,
    packageVersionArn: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    versionName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePackageVersionCommand");
var de_CreatePackageVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.iot#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.iot#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreatePackageVersionCommandError");
var de_CreatePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreatePolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    policyArn: import_smithy_client.expectString,
    policyDocument: import_smithy_client.expectString,
    policyName: import_smithy_client.expectString,
    policyVersionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePolicyCommand");
var de_CreatePolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "MalformedPolicyException":
    case "com.amazonaws.iot#MalformedPolicyException":
      throw await de_MalformedPolicyExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreatePolicyCommandError");
var de_CreatePolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreatePolicyVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    isDefaultVersion: import_smithy_client.expectBoolean,
    policyArn: import_smithy_client.expectString,
    policyDocument: import_smithy_client.expectString,
    policyVersionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePolicyVersionCommand");
var de_CreatePolicyVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "MalformedPolicyException":
    case "com.amazonaws.iot#MalformedPolicyException":
      throw await de_MalformedPolicyExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionsLimitExceededException":
    case "com.amazonaws.iot#VersionsLimitExceededException":
      throw await de_VersionsLimitExceededExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreatePolicyVersionCommandError");
var de_CreateProvisioningClaimCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateProvisioningClaimCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateId: import_smithy_client.expectString,
    certificatePem: import_smithy_client.expectString,
    expiration: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    keyPair: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateProvisioningClaimCommand");
var de_CreateProvisioningClaimCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateProvisioningClaimCommandError");
var de_CreateProvisioningTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateProvisioningTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    defaultVersionId: import_smithy_client.expectInt32,
    templateArn: import_smithy_client.expectString,
    templateName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateProvisioningTemplateCommand");
var de_CreateProvisioningTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateProvisioningTemplateCommandError");
var de_CreateProvisioningTemplateVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateProvisioningTemplateVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    isDefaultVersion: import_smithy_client.expectBoolean,
    templateArn: import_smithy_client.expectString,
    templateName: import_smithy_client.expectString,
    versionId: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateProvisioningTemplateVersionCommand");
var de_CreateProvisioningTemplateVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionsLimitExceededException":
    case "com.amazonaws.iot#VersionsLimitExceededException":
      throw await de_VersionsLimitExceededExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateProvisioningTemplateVersionCommandError");
var de_CreateRoleAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateRoleAliasCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    roleAlias: import_smithy_client.expectString,
    roleAliasArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateRoleAliasCommand");
var de_CreateRoleAliasCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateRoleAliasCommandError");
var de_CreateScheduledAuditCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateScheduledAuditCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    scheduledAuditArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateScheduledAuditCommand");
var de_CreateScheduledAuditCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateScheduledAuditCommandError");
var de_CreateSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    securityProfileArn: import_smithy_client.expectString,
    securityProfileName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSecurityProfileCommand");
var de_CreateSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateSecurityProfileCommandError");
var de_CreateStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateStreamCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    streamArn: import_smithy_client.expectString,
    streamId: import_smithy_client.expectString,
    streamVersion: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateStreamCommand");
var de_CreateStreamCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateStreamCommandError");
var de_CreateThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    thingArn: import_smithy_client.expectString,
    thingId: import_smithy_client.expectString,
    thingName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateThingCommand");
var de_CreateThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateThingCommandError");
var de_CreateThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    thingGroupArn: import_smithy_client.expectString,
    thingGroupId: import_smithy_client.expectString,
    thingGroupName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateThingGroupCommand");
var de_CreateThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateThingGroupCommandError");
var de_CreateThingTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateThingTypeCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    thingTypeArn: import_smithy_client.expectString,
    thingTypeId: import_smithy_client.expectString,
    thingTypeName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateThingTypeCommand");
var de_CreateThingTypeCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateThingTypeCommandError");
var de_CreateTopicRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateTopicRuleCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CreateTopicRuleCommand");
var de_CreateTopicRuleCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "SqlParseException":
    case "com.amazonaws.iot#SqlParseException":
      throw await de_SqlParseExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateTopicRuleCommandError");
var de_CreateTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateTopicRuleDestinationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    topicRuleDestination: (_) => de_TopicRuleDestination(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateTopicRuleDestinationCommand");
var de_CreateTopicRuleDestinationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CreateTopicRuleDestinationCommandError");
var de_DeleteAccountAuditConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccountAuditConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccountAuditConfigurationCommand");
var de_DeleteAccountAuditConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteAccountAuditConfigurationCommandError");
var de_DeleteAuditSuppressionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAuditSuppressionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAuditSuppressionCommand");
var de_DeleteAuditSuppressionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteAuditSuppressionCommandError");
var de_DeleteAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAuthorizerCommand");
var de_DeleteAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteAuthorizerCommandError");
var de_DeleteBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteBillingGroupCommand");
var de_DeleteBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteBillingGroupCommandError");
var de_DeleteCACertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteCACertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteCACertificateCommand");
var de_DeleteCACertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot#CertificateStateException":
      throw await de_CertificateStateExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteCACertificateCommandError");
var de_DeleteCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteCertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteCertificateCommand");
var de_DeleteCertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot#CertificateStateException":
      throw await de_CertificateStateExceptionRes(parsedOutput, context);
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteCertificateCommandError");
var de_DeleteCertificateProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteCertificateProviderCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteCertificateProviderCommand");
var de_DeleteCertificateProviderCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteCertificateProviderCommandError");
var de_DeleteCustomMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteCustomMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteCustomMetricCommand");
var de_DeleteCustomMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteCustomMetricCommandError");
var de_DeleteDimensionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteDimensionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDimensionCommand");
var de_DeleteDimensionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteDimensionCommandError");
var de_DeleteDomainConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteDomainConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDomainConfigurationCommand");
var de_DeleteDomainConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteDomainConfigurationCommandError");
var de_DeleteDynamicThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteDynamicThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDynamicThingGroupCommand");
var de_DeleteDynamicThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteDynamicThingGroupCommandError");
var de_DeleteFleetMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteFleetMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteFleetMetricCommand");
var de_DeleteFleetMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteFleetMetricCommandError");
var de_DeleteJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteJobCommand");
var de_DeleteJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "InvalidStateTransitionException":
    case "com.amazonaws.iot#InvalidStateTransitionException":
      throw await de_InvalidStateTransitionExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteJobCommandError");
var de_DeleteJobExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteJobExecutionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteJobExecutionCommand");
var de_DeleteJobExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "InvalidStateTransitionException":
    case "com.amazonaws.iot#InvalidStateTransitionException":
      throw await de_InvalidStateTransitionExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteJobExecutionCommandError");
var de_DeleteJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteJobTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteJobTemplateCommand");
var de_DeleteJobTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteJobTemplateCommandError");
var de_DeleteMitigationActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteMitigationActionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteMitigationActionCommand");
var de_DeleteMitigationActionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteMitigationActionCommandError");
var de_DeleteOTAUpdateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteOTAUpdateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteOTAUpdateCommand");
var de_DeleteOTAUpdateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteOTAUpdateCommandError");
var de_DeletePackageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeletePackageCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePackageCommand");
var de_DeletePackageCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeletePackageCommandError");
var de_DeletePackageVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeletePackageVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePackageVersionCommand");
var de_DeletePackageVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeletePackageVersionCommandError");
var de_DeletePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeletePolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePolicyCommand");
var de_DeletePolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeletePolicyCommandError");
var de_DeletePolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeletePolicyVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePolicyVersionCommand");
var de_DeletePolicyVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeletePolicyVersionCommandError");
var de_DeleteProvisioningTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteProvisioningTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteProvisioningTemplateCommand");
var de_DeleteProvisioningTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteProvisioningTemplateCommandError");
var de_DeleteProvisioningTemplateVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteProvisioningTemplateVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteProvisioningTemplateVersionCommand");
var de_DeleteProvisioningTemplateVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteProvisioningTemplateVersionCommandError");
var de_DeleteRegistrationCodeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteRegistrationCodeCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteRegistrationCodeCommand");
var de_DeleteRegistrationCodeCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteRegistrationCodeCommandError");
var de_DeleteRoleAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteRoleAliasCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteRoleAliasCommand");
var de_DeleteRoleAliasCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteRoleAliasCommandError");
var de_DeleteScheduledAuditCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteScheduledAuditCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteScheduledAuditCommand");
var de_DeleteScheduledAuditCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteScheduledAuditCommandError");
var de_DeleteSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteSecurityProfileCommand");
var de_DeleteSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteSecurityProfileCommandError");
var de_DeleteStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteStreamCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteStreamCommand");
var de_DeleteStreamCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteStreamCommandError");
var de_DeleteThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteThingCommand");
var de_DeleteThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteThingCommandError");
var de_DeleteThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteThingGroupCommand");
var de_DeleteThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteThingGroupCommandError");
var de_DeleteThingTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteThingTypeCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteThingTypeCommand");
var de_DeleteThingTypeCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteThingTypeCommandError");
var de_DeleteTopicRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteTopicRuleCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteTopicRuleCommand");
var de_DeleteTopicRuleCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteTopicRuleCommandError");
var de_DeleteTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteTopicRuleDestinationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteTopicRuleDestinationCommand");
var de_DeleteTopicRuleDestinationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteTopicRuleDestinationCommandError");
var de_DeleteV2LoggingLevelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteV2LoggingLevelCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteV2LoggingLevelCommand");
var de_DeleteV2LoggingLevelCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeleteV2LoggingLevelCommandError");
var de_DeprecateThingTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeprecateThingTypeCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeprecateThingTypeCommand");
var de_DeprecateThingTypeCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DeprecateThingTypeCommandError");
var de_DescribeAccountAuditConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAccountAuditConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    auditCheckConfigurations: import_smithy_client._json,
    auditNotificationTargetConfigurations: import_smithy_client._json,
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAccountAuditConfigurationCommand");
var de_DescribeAccountAuditConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeAccountAuditConfigurationCommandError");
var de_DescribeAuditFindingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAuditFindingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    finding: (_) => de_AuditFinding(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAuditFindingCommand");
var de_DescribeAuditFindingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeAuditFindingCommandError");
var de_DescribeAuditMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAuditMitigationActionsTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionsDefinition: import_smithy_client._json,
    auditCheckToActionsMapping: import_smithy_client._json,
    endTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    startTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    target: import_smithy_client._json,
    taskStatistics: import_smithy_client._json,
    taskStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAuditMitigationActionsTaskCommand");
var de_DescribeAuditMitigationActionsTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeAuditMitigationActionsTaskCommandError");
var de_DescribeAuditSuppressionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAuditSuppressionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    checkName: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    expirationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    resourceIdentifier: import_smithy_client._json,
    suppressIndefinitely: import_smithy_client.expectBoolean
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAuditSuppressionCommand");
var de_DescribeAuditSuppressionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeAuditSuppressionCommandError");
var de_DescribeAuditTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAuditTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    auditDetails: import_smithy_client._json,
    scheduledAuditName: import_smithy_client.expectString,
    taskStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    taskStatistics: import_smithy_client._json,
    taskStatus: import_smithy_client.expectString,
    taskType: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAuditTaskCommand");
var de_DescribeAuditTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeAuditTaskCommandError");
var de_DescribeAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizerDescription: (_) => de_AuthorizerDescription(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAuthorizerCommand");
var de_DescribeAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeAuthorizerCommandError");
var de_DescribeBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    billingGroupArn: import_smithy_client.expectString,
    billingGroupId: import_smithy_client.expectString,
    billingGroupMetadata: (_) => de_BillingGroupMetadata(_, context),
    billingGroupName: import_smithy_client.expectString,
    billingGroupProperties: import_smithy_client._json,
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBillingGroupCommand");
var de_DescribeBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeBillingGroupCommandError");
var de_DescribeCACertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeCACertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateDescription: (_) => de_CACertificateDescription(_, context),
    registrationConfig: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeCACertificateCommand");
var de_DescribeCACertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeCACertificateCommandError");
var de_DescribeCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeCertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateDescription: (_) => de_CertificateDescription(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeCertificateCommand");
var de_DescribeCertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeCertificateCommandError");
var de_DescribeCertificateProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeCertificateProviderCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    accountDefaultForOperations: import_smithy_client._json,
    certificateProviderArn: import_smithy_client.expectString,
    certificateProviderName: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lambdaFunctionArn: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeCertificateProviderCommand");
var de_DescribeCertificateProviderCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeCertificateProviderCommandError");
var de_DescribeCustomMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeCustomMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    displayName: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metricArn: import_smithy_client.expectString,
    metricName: import_smithy_client.expectString,
    metricType: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeCustomMetricCommand");
var de_DescribeCustomMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeCustomMetricCommandError");
var de_DescribeDefaultAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDefaultAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizerDescription: (_) => de_AuthorizerDescription(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDefaultAuthorizerCommand");
var de_DescribeDefaultAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeDefaultAuthorizerCommandError");
var de_DescribeDetectMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDetectMitigationActionsTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    taskSummary: (_) => de_DetectMitigationActionsTaskSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDetectMitigationActionsTaskCommand");
var de_DescribeDetectMitigationActionsTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeDetectMitigationActionsTaskCommandError");
var de_DescribeDimensionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDimensionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    stringValues: import_smithy_client._json,
    type: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDimensionCommand");
var de_DescribeDimensionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeDimensionCommandError");
var de_DescribeDomainConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDomainConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizerConfig: import_smithy_client._json,
    domainConfigurationArn: import_smithy_client.expectString,
    domainConfigurationName: import_smithy_client.expectString,
    domainConfigurationStatus: import_smithy_client.expectString,
    domainName: import_smithy_client.expectString,
    domainType: import_smithy_client.expectString,
    lastStatusChangeDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    serverCertificates: import_smithy_client._json,
    serviceType: import_smithy_client.expectString,
    tlsConfig: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDomainConfigurationCommand");
var de_DescribeDomainConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeDomainConfigurationCommandError");
var de_DescribeEndpointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeEndpointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    endpointAddress: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeEndpointCommand");
var de_DescribeEndpointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeEndpointCommandError");
var de_DescribeEventConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeEventConfigurationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    eventConfigurations: import_smithy_client._json,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeEventConfigurationsCommand");
var de_DescribeEventConfigurationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeEventConfigurationsCommandError");
var de_DescribeFleetMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeFleetMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    aggregationField: import_smithy_client.expectString,
    aggregationType: import_smithy_client._json,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    indexName: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metricArn: import_smithy_client.expectString,
    metricName: import_smithy_client.expectString,
    period: import_smithy_client.expectInt32,
    queryString: import_smithy_client.expectString,
    queryVersion: import_smithy_client.expectString,
    unit: import_smithy_client.expectString,
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeFleetMetricCommand");
var de_DescribeFleetMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeFleetMetricCommandError");
var de_DescribeIndexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeIndexCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    indexName: import_smithy_client.expectString,
    indexStatus: import_smithy_client.expectString,
    schema: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeIndexCommand");
var de_DescribeIndexCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeIndexCommandError");
var de_DescribeJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    documentSource: import_smithy_client.expectString,
    job: (_) => de_Job(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeJobCommand");
var de_DescribeJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeJobCommandError");
var de_DescribeJobExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeJobExecutionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    execution: (_) => de_JobExecution(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeJobExecutionCommand");
var de_DescribeJobExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeJobExecutionCommandError");
var de_DescribeJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeJobTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    abortConfig: (_) => de_AbortConfig(_, context),
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    destinationPackageVersions: import_smithy_client._json,
    document: import_smithy_client.expectString,
    documentSource: import_smithy_client.expectString,
    jobExecutionsRetryConfig: import_smithy_client._json,
    jobExecutionsRolloutConfig: (_) => de_JobExecutionsRolloutConfig(_, context),
    jobTemplateArn: import_smithy_client.expectString,
    jobTemplateId: import_smithy_client.expectString,
    maintenanceWindows: import_smithy_client._json,
    presignedUrlConfig: import_smithy_client._json,
    timeoutConfig: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeJobTemplateCommand");
var de_DescribeJobTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeJobTemplateCommandError");
var de_DescribeManagedJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeManagedJobTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    document: import_smithy_client.expectString,
    documentParameters: import_smithy_client._json,
    environments: import_smithy_client._json,
    templateArn: import_smithy_client.expectString,
    templateName: import_smithy_client.expectString,
    templateVersion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeManagedJobTemplateCommand");
var de_DescribeManagedJobTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeManagedJobTemplateCommandError");
var de_DescribeMitigationActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeMitigationActionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionArn: import_smithy_client.expectString,
    actionId: import_smithy_client.expectString,
    actionName: import_smithy_client.expectString,
    actionParams: import_smithy_client._json,
    actionType: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeMitigationActionCommand");
var de_DescribeMitigationActionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeMitigationActionCommandError");
var de_DescribeProvisioningTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeProvisioningTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    defaultVersionId: import_smithy_client.expectInt32,
    description: import_smithy_client.expectString,
    enabled: import_smithy_client.expectBoolean,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    preProvisioningHook: import_smithy_client._json,
    provisioningRoleArn: import_smithy_client.expectString,
    templateArn: import_smithy_client.expectString,
    templateBody: import_smithy_client.expectString,
    templateName: import_smithy_client.expectString,
    type: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeProvisioningTemplateCommand");
var de_DescribeProvisioningTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeProvisioningTemplateCommandError");
var de_DescribeProvisioningTemplateVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeProvisioningTemplateVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    isDefaultVersion: import_smithy_client.expectBoolean,
    templateBody: import_smithy_client.expectString,
    versionId: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeProvisioningTemplateVersionCommand");
var de_DescribeProvisioningTemplateVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeProvisioningTemplateVersionCommandError");
var de_DescribeRoleAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeRoleAliasCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    roleAliasDescription: (_) => de_RoleAliasDescription(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeRoleAliasCommand");
var de_DescribeRoleAliasCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeRoleAliasCommandError");
var de_DescribeScheduledAuditCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeScheduledAuditCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    dayOfMonth: import_smithy_client.expectString,
    dayOfWeek: import_smithy_client.expectString,
    frequency: import_smithy_client.expectString,
    scheduledAuditArn: import_smithy_client.expectString,
    scheduledAuditName: import_smithy_client.expectString,
    targetCheckNames: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeScheduledAuditCommand");
var de_DescribeScheduledAuditCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeScheduledAuditCommandError");
var de_DescribeSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    additionalMetricsToRetain: import_smithy_client._json,
    additionalMetricsToRetainV2: import_smithy_client._json,
    alertTargets: import_smithy_client._json,
    behaviors: (_) => de_Behaviors(_, context),
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metricsExportConfig: import_smithy_client._json,
    securityProfileArn: import_smithy_client.expectString,
    securityProfileDescription: import_smithy_client.expectString,
    securityProfileName: import_smithy_client.expectString,
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeSecurityProfileCommand");
var de_DescribeSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeSecurityProfileCommandError");
var de_DescribeStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeStreamCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    streamInfo: (_) => de_StreamInfo(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeStreamCommand");
var de_DescribeStreamCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeStreamCommandError");
var de_DescribeThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    attributes: import_smithy_client._json,
    billingGroupName: import_smithy_client.expectString,
    defaultClientId: import_smithy_client.expectString,
    thingArn: import_smithy_client.expectString,
    thingId: import_smithy_client.expectString,
    thingName: import_smithy_client.expectString,
    thingTypeName: import_smithy_client.expectString,
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeThingCommand");
var de_DescribeThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeThingCommandError");
var de_DescribeThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    indexName: import_smithy_client.expectString,
    queryString: import_smithy_client.expectString,
    queryVersion: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    thingGroupArn: import_smithy_client.expectString,
    thingGroupId: import_smithy_client.expectString,
    thingGroupMetadata: (_) => de_ThingGroupMetadata(_, context),
    thingGroupName: import_smithy_client.expectString,
    thingGroupProperties: import_smithy_client._json,
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeThingGroupCommand");
var de_DescribeThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeThingGroupCommandError");
var de_DescribeThingRegistrationTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThingRegistrationTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureCount: import_smithy_client.expectInt32,
    inputFileBucket: import_smithy_client.expectString,
    inputFileKey: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    message: import_smithy_client.expectString,
    percentageProgress: import_smithy_client.expectInt32,
    roleArn: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    successCount: import_smithy_client.expectInt32,
    taskId: import_smithy_client.expectString,
    templateBody: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeThingRegistrationTaskCommand");
var de_DescribeThingRegistrationTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeThingRegistrationTaskCommandError");
var de_DescribeThingTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThingTypeCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    thingTypeArn: import_smithy_client.expectString,
    thingTypeId: import_smithy_client.expectString,
    thingTypeMetadata: (_) => de_ThingTypeMetadata(_, context),
    thingTypeName: import_smithy_client.expectString,
    thingTypeProperties: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeThingTypeCommand");
var de_DescribeThingTypeCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DescribeThingTypeCommandError");
var de_DetachPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DetachPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DetachPolicyCommand");
var de_DetachPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DetachPolicyCommandError");
var de_DetachPrincipalPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DetachPrincipalPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DetachPrincipalPolicyCommand");
var de_DetachPrincipalPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DetachPrincipalPolicyCommandError");
var de_DetachSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DetachSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DetachSecurityProfileCommand");
var de_DetachSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DetachSecurityProfileCommandError");
var de_DetachThingPrincipalCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DetachThingPrincipalCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DetachThingPrincipalCommand");
var de_DetachThingPrincipalCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DetachThingPrincipalCommandError");
var de_DisableTopicRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DisableTopicRuleCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DisableTopicRuleCommand");
var de_DisableTopicRuleCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_DisableTopicRuleCommandError");
var de_EnableTopicRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_EnableTopicRuleCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_EnableTopicRuleCommand");
var de_EnableTopicRuleCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_EnableTopicRuleCommandError");
var de_GetBehaviorModelTrainingSummariesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBehaviorModelTrainingSummariesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    summaries: (_) => de_BehaviorModelTrainingSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetBehaviorModelTrainingSummariesCommand");
var de_GetBehaviorModelTrainingSummariesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetBehaviorModelTrainingSummariesCommandError");
var de_GetBucketsAggregationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketsAggregationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    buckets: import_smithy_client._json,
    totalCount: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetBucketsAggregationCommand");
var de_GetBucketsAggregationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidAggregationException":
    case "com.amazonaws.iot#InvalidAggregationException":
      throw await de_InvalidAggregationExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetBucketsAggregationCommandError");
var de_GetCardinalityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetCardinalityCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    cardinality: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCardinalityCommand");
var de_GetCardinalityCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidAggregationException":
    case "com.amazonaws.iot#InvalidAggregationException":
      throw await de_InvalidAggregationExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetCardinalityCommandError");
var de_GetEffectivePoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetEffectivePoliciesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    effectivePolicies: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetEffectivePoliciesCommand");
var de_GetEffectivePoliciesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetEffectivePoliciesCommandError");
var de_GetIndexingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetIndexingConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    thingGroupIndexingConfiguration: import_smithy_client._json,
    thingIndexingConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetIndexingConfigurationCommand");
var de_GetIndexingConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetIndexingConfigurationCommandError");
var de_GetJobDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetJobDocumentCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    document: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetJobDocumentCommand");
var de_GetJobDocumentCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetJobDocumentCommandError");
var de_GetLoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetLoggingOptionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    logLevel: import_smithy_client.expectString,
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetLoggingOptionsCommand");
var de_GetLoggingOptionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetLoggingOptionsCommandError");
var de_GetOTAUpdateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetOTAUpdateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    otaUpdateInfo: (_) => de_OTAUpdateInfo(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetOTAUpdateCommand");
var de_GetOTAUpdateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetOTAUpdateCommandError");
var de_GetPackageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPackageCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    defaultVersionName: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    packageArn: import_smithy_client.expectString,
    packageName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPackageCommand");
var de_GetPackageCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetPackageCommandError");
var de_GetPackageConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPackageConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    versionUpdateByJobsConfig: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPackageConfigurationCommand");
var de_GetPackageConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetPackageConfigurationCommandError");
var de_GetPackageVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPackageVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    attributes: import_smithy_client._json,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    errorReason: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    packageName: import_smithy_client.expectString,
    packageVersionArn: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    versionName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPackageVersionCommand");
var de_GetPackageVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetPackageVersionCommandError");
var de_GetPercentilesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPercentilesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    percentiles: (_) => de_Percentiles(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPercentilesCommand");
var de_GetPercentilesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidAggregationException":
    case "com.amazonaws.iot#InvalidAggregationException":
      throw await de_InvalidAggregationExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetPercentilesCommandError");
var de_GetPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    defaultVersionId: import_smithy_client.expectString,
    generationId: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    policyArn: import_smithy_client.expectString,
    policyDocument: import_smithy_client.expectString,
    policyName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPolicyCommand");
var de_GetPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetPolicyCommandError");
var de_GetPolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPolicyVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    generationId: import_smithy_client.expectString,
    isDefaultVersion: import_smithy_client.expectBoolean,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    policyArn: import_smithy_client.expectString,
    policyDocument: import_smithy_client.expectString,
    policyName: import_smithy_client.expectString,
    policyVersionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPolicyVersionCommand");
var de_GetPolicyVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetPolicyVersionCommandError");
var de_GetRegistrationCodeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetRegistrationCodeCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    registrationCode: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetRegistrationCodeCommand");
var de_GetRegistrationCodeCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetRegistrationCodeCommandError");
var de_GetStatisticsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetStatisticsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    statistics: (_) => de_Statistics(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetStatisticsCommand");
var de_GetStatisticsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidAggregationException":
    case "com.amazonaws.iot#InvalidAggregationException":
      throw await de_InvalidAggregationExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetStatisticsCommandError");
var de_GetTopicRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetTopicRuleCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    rule: (_) => de_TopicRule(_, context),
    ruleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTopicRuleCommand");
var de_GetTopicRuleCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetTopicRuleCommandError");
var de_GetTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetTopicRuleDestinationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    topicRuleDestination: (_) => de_TopicRuleDestination(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTopicRuleDestinationCommand");
var de_GetTopicRuleDestinationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetTopicRuleDestinationCommandError");
var de_GetV2LoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetV2LoggingOptionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    defaultLogLevel: import_smithy_client.expectString,
    disableAllLogs: import_smithy_client.expectBoolean,
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetV2LoggingOptionsCommand");
var de_GetV2LoggingOptionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "NotConfiguredException":
    case "com.amazonaws.iot#NotConfiguredException":
      throw await de_NotConfiguredExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_GetV2LoggingOptionsCommandError");
var de_ListActiveViolationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListActiveViolationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    activeViolations: (_) => de_ActiveViolations(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListActiveViolationsCommand");
var de_ListActiveViolationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListActiveViolationsCommandError");
var de_ListAttachedPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAttachedPoliciesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    policies: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAttachedPoliciesCommand");
var de_ListAttachedPoliciesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAttachedPoliciesCommandError");
var de_ListAuditFindingsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAuditFindingsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    findings: (_) => de_AuditFindings(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAuditFindingsCommand");
var de_ListAuditFindingsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAuditFindingsCommandError");
var de_ListAuditMitigationActionsExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAuditMitigationActionsExecutionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionsExecutions: (_) => de_AuditMitigationActionExecutionMetadataList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAuditMitigationActionsExecutionsCommand");
var de_ListAuditMitigationActionsExecutionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAuditMitigationActionsExecutionsCommandError");
var de_ListAuditMitigationActionsTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAuditMitigationActionsTasksCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tasks: (_) => de_AuditMitigationActionsTaskMetadataList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAuditMitigationActionsTasksCommand");
var de_ListAuditMitigationActionsTasksCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAuditMitigationActionsTasksCommandError");
var de_ListAuditSuppressionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAuditSuppressionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    suppressions: (_) => de_AuditSuppressionList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAuditSuppressionsCommand");
var de_ListAuditSuppressionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAuditSuppressionsCommandError");
var de_ListAuditTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAuditTasksCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tasks: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAuditTasksCommand");
var de_ListAuditTasksCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAuditTasksCommandError");
var de_ListAuthorizersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAuthorizersCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizers: import_smithy_client._json,
    nextMarker: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAuthorizersCommand");
var de_ListAuthorizersCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListAuthorizersCommandError");
var de_ListBillingGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListBillingGroupsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    billingGroups: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBillingGroupsCommand");
var de_ListBillingGroupsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListBillingGroupsCommandError");
var de_ListCACertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListCACertificatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificates: (_) => de_CACertificates(_, context),
    nextMarker: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCACertificatesCommand");
var de_ListCACertificatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListCACertificatesCommandError");
var de_ListCertificateProvidersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListCertificateProvidersCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateProviders: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCertificateProvidersCommand");
var de_ListCertificateProvidersCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListCertificateProvidersCommandError");
var de_ListCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListCertificatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificates: (_) => de_Certificates(_, context),
    nextMarker: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCertificatesCommand");
var de_ListCertificatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListCertificatesCommandError");
var de_ListCertificatesByCACommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListCertificatesByCACommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificates: (_) => de_Certificates(_, context),
    nextMarker: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCertificatesByCACommand");
var de_ListCertificatesByCACommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListCertificatesByCACommandError");
var de_ListCustomMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListCustomMetricsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    metricNames: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCustomMetricsCommand");
var de_ListCustomMetricsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListCustomMetricsCommandError");
var de_ListDetectMitigationActionsExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDetectMitigationActionsExecutionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionsExecutions: (_) => de_DetectMitigationActionExecutionList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDetectMitigationActionsExecutionsCommand");
var de_ListDetectMitigationActionsExecutionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListDetectMitigationActionsExecutionsCommandError");
var de_ListDetectMitigationActionsTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDetectMitigationActionsTasksCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tasks: (_) => de_DetectMitigationActionsTaskSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDetectMitigationActionsTasksCommand");
var de_ListDetectMitigationActionsTasksCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListDetectMitigationActionsTasksCommandError");
var de_ListDimensionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDimensionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    dimensionNames: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDimensionsCommand");
var de_ListDimensionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListDimensionsCommandError");
var de_ListDomainConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDomainConfigurationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    domainConfigurations: import_smithy_client._json,
    nextMarker: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDomainConfigurationsCommand");
var de_ListDomainConfigurationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListDomainConfigurationsCommandError");
var de_ListFleetMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListFleetMetricsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    fleetMetrics: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListFleetMetricsCommand");
var de_ListFleetMetricsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListFleetMetricsCommandError");
var de_ListIndicesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListIndicesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    indexNames: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListIndicesCommand");
var de_ListIndicesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListIndicesCommandError");
var de_ListJobExecutionsForJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListJobExecutionsForJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    executionSummaries: (_) => de_JobExecutionSummaryForJobList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListJobExecutionsForJobCommand");
var de_ListJobExecutionsForJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListJobExecutionsForJobCommandError");
var de_ListJobExecutionsForThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListJobExecutionsForThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    executionSummaries: (_) => de_JobExecutionSummaryForThingList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListJobExecutionsForThingCommand");
var de_ListJobExecutionsForThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListJobExecutionsForThingCommandError");
var de_ListJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListJobsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    jobs: (_) => de_JobSummaryList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListJobsCommand");
var de_ListJobsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListJobsCommandError");
var de_ListJobTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListJobTemplatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    jobTemplates: (_) => de_JobTemplateSummaryList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListJobTemplatesCommand");
var de_ListJobTemplatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListJobTemplatesCommandError");
var de_ListManagedJobTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListManagedJobTemplatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    managedJobTemplates: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListManagedJobTemplatesCommand");
var de_ListManagedJobTemplatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListManagedJobTemplatesCommandError");
var de_ListMetricValuesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListMetricValuesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    metricDatumList: (_) => de_MetricDatumList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListMetricValuesCommand");
var de_ListMetricValuesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListMetricValuesCommandError");
var de_ListMitigationActionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListMitigationActionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionIdentifiers: (_) => de_MitigationActionIdentifierList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListMitigationActionsCommand");
var de_ListMitigationActionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListMitigationActionsCommandError");
var de_ListOTAUpdatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListOTAUpdatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    otaUpdates: (_) => de_OTAUpdatesSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListOTAUpdatesCommand");
var de_ListOTAUpdatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListOTAUpdatesCommandError");
var de_ListOutgoingCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListOutgoingCertificatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    outgoingCertificates: (_) => de_OutgoingCertificates(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListOutgoingCertificatesCommand");
var de_ListOutgoingCertificatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListOutgoingCertificatesCommandError");
var de_ListPackagesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPackagesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    packageSummaries: (_) => de_PackageSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPackagesCommand");
var de_ListPackagesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPackagesCommandError");
var de_ListPackageVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPackageVersionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    packageVersionSummaries: (_) => de_PackageVersionSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPackageVersionsCommand");
var de_ListPackageVersionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPackageVersionsCommandError");
var de_ListPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPoliciesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    policies: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPoliciesCommand");
var de_ListPoliciesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPoliciesCommandError");
var de_ListPolicyPrincipalsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPolicyPrincipalsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    principals: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPolicyPrincipalsCommand");
var de_ListPolicyPrincipalsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPolicyPrincipalsCommandError");
var de_ListPolicyVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPolicyVersionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    policyVersions: (_) => de_PolicyVersions(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPolicyVersionsCommand");
var de_ListPolicyVersionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPolicyVersionsCommandError");
var de_ListPrincipalPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPrincipalPoliciesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    policies: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPrincipalPoliciesCommand");
var de_ListPrincipalPoliciesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPrincipalPoliciesCommandError");
var de_ListPrincipalThingsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListPrincipalThingsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    things: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPrincipalThingsCommand");
var de_ListPrincipalThingsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListPrincipalThingsCommandError");
var de_ListProvisioningTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListProvisioningTemplatesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    templates: (_) => de_ProvisioningTemplateListing(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListProvisioningTemplatesCommand");
var de_ListProvisioningTemplatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListProvisioningTemplatesCommandError");
var de_ListProvisioningTemplateVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListProvisioningTemplateVersionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    versions: (_) => de_ProvisioningTemplateVersionListing(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListProvisioningTemplateVersionsCommand");
var de_ListProvisioningTemplateVersionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListProvisioningTemplateVersionsCommandError");
var de_ListRelatedResourcesForAuditFindingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListRelatedResourcesForAuditFindingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    relatedResources: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListRelatedResourcesForAuditFindingCommand");
var de_ListRelatedResourcesForAuditFindingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListRelatedResourcesForAuditFindingCommandError");
var de_ListRoleAliasesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListRoleAliasesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    roleAliases: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListRoleAliasesCommand");
var de_ListRoleAliasesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListRoleAliasesCommandError");
var de_ListScheduledAuditsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListScheduledAuditsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    scheduledAudits: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListScheduledAuditsCommand");
var de_ListScheduledAuditsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListScheduledAuditsCommandError");
var de_ListSecurityProfilesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListSecurityProfilesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    securityProfileIdentifiers: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSecurityProfilesCommand");
var de_ListSecurityProfilesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListSecurityProfilesCommandError");
var de_ListSecurityProfilesForTargetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListSecurityProfilesForTargetCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    securityProfileTargetMappings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSecurityProfilesForTargetCommand");
var de_ListSecurityProfilesForTargetCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListSecurityProfilesForTargetCommandError");
var de_ListStreamsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListStreamsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    streams: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListStreamsCommand");
var de_ListStreamsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListStreamsCommandError");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTagsForResourceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListTagsForResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListTagsForResourceCommandError");
var de_ListTargetsForPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTargetsForPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextMarker: import_smithy_client.expectString,
    targets: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTargetsForPolicyCommand");
var de_ListTargetsForPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListTargetsForPolicyCommandError");
var de_ListTargetsForSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTargetsForSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    securityProfileTargets: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTargetsForSecurityProfileCommand");
var de_ListTargetsForSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListTargetsForSecurityProfileCommandError");
var de_ListThingGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingGroupsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    thingGroups: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingGroupsCommand");
var de_ListThingGroupsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingGroupsCommandError");
var de_ListThingGroupsForThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingGroupsForThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    thingGroups: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingGroupsForThingCommand");
var de_ListThingGroupsForThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingGroupsForThingCommandError");
var de_ListThingPrincipalsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingPrincipalsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    principals: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingPrincipalsCommand");
var de_ListThingPrincipalsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingPrincipalsCommandError");
var de_ListThingRegistrationTaskReportsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingRegistrationTaskReportsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    reportType: import_smithy_client.expectString,
    resourceLinks: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingRegistrationTaskReportsCommand");
var de_ListThingRegistrationTaskReportsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingRegistrationTaskReportsCommandError");
var de_ListThingRegistrationTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingRegistrationTasksCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    taskIds: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingRegistrationTasksCommand");
var de_ListThingRegistrationTasksCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingRegistrationTasksCommandError");
var de_ListThingsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    things: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingsCommand");
var de_ListThingsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingsCommandError");
var de_ListThingsInBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingsInBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    things: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingsInBillingGroupCommand");
var de_ListThingsInBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingsInBillingGroupCommandError");
var de_ListThingsInThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingsInThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    things: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingsInThingGroupCommand");
var de_ListThingsInThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingsInThingGroupCommandError");
var de_ListThingTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThingTypesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    thingTypes: (_) => de_ThingTypeList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListThingTypesCommand");
var de_ListThingTypesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListThingTypesCommandError");
var de_ListTopicRuleDestinationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTopicRuleDestinationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    destinationSummaries: (_) => de_TopicRuleDestinationSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTopicRuleDestinationsCommand");
var de_ListTopicRuleDestinationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListTopicRuleDestinationsCommandError");
var de_ListTopicRulesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTopicRulesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    rules: (_) => de_TopicRuleList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTopicRulesCommand");
var de_ListTopicRulesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListTopicRulesCommandError");
var de_ListV2LoggingLevelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListV2LoggingLevelsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    logTargetConfigurations: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListV2LoggingLevelsCommand");
var de_ListV2LoggingLevelsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "NotConfiguredException":
    case "com.amazonaws.iot#NotConfiguredException":
      throw await de_NotConfiguredExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListV2LoggingLevelsCommandError");
var de_ListViolationEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListViolationEventsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    violationEvents: (_) => de_ViolationEvents(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListViolationEventsCommand");
var de_ListViolationEventsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ListViolationEventsCommandError");
var de_PutVerificationStateOnViolationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutVerificationStateOnViolationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutVerificationStateOnViolationCommand");
var de_PutVerificationStateOnViolationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_PutVerificationStateOnViolationCommandError");
var de_RegisterCACertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RegisterCACertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RegisterCACertificateCommand");
var de_RegisterCACertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateValidationException":
    case "com.amazonaws.iot#CertificateValidationException":
      throw await de_CertificateValidationExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "RegistrationCodeValidationException":
    case "com.amazonaws.iot#RegistrationCodeValidationException":
      throw await de_RegistrationCodeValidationExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RegisterCACertificateCommandError");
var de_RegisterCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RegisterCertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RegisterCertificateCommand");
var de_RegisterCertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateConflictException":
    case "com.amazonaws.iot#CertificateConflictException":
      throw await de_CertificateConflictExceptionRes(parsedOutput, context);
    case "CertificateStateException":
    case "com.amazonaws.iot#CertificateStateException":
      throw await de_CertificateStateExceptionRes(parsedOutput, context);
    case "CertificateValidationException":
    case "com.amazonaws.iot#CertificateValidationException":
      throw await de_CertificateValidationExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RegisterCertificateCommandError");
var de_RegisterCertificateWithoutCACommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RegisterCertificateWithoutCACommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RegisterCertificateWithoutCACommand");
var de_RegisterCertificateWithoutCACommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot#CertificateStateException":
      throw await de_CertificateStateExceptionRes(parsedOutput, context);
    case "CertificateValidationException":
    case "com.amazonaws.iot#CertificateValidationException":
      throw await de_CertificateValidationExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RegisterCertificateWithoutCACommandError");
var de_RegisterThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RegisterThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificatePem: import_smithy_client.expectString,
    resourceArns: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RegisterThingCommand");
var de_RegisterThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceRegistrationFailureException":
    case "com.amazonaws.iot#ResourceRegistrationFailureException":
      throw await de_ResourceRegistrationFailureExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RegisterThingCommandError");
var de_RejectCertificateTransferCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RejectCertificateTransferCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_RejectCertificateTransferCommand");
var de_RejectCertificateTransferCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "TransferAlreadyCompletedException":
    case "com.amazonaws.iot#TransferAlreadyCompletedException":
      throw await de_TransferAlreadyCompletedExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RejectCertificateTransferCommandError");
var de_RemoveThingFromBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RemoveThingFromBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_RemoveThingFromBillingGroupCommand");
var de_RemoveThingFromBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RemoveThingFromBillingGroupCommandError");
var de_RemoveThingFromThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RemoveThingFromThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_RemoveThingFromThingGroupCommand");
var de_RemoveThingFromThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_RemoveThingFromThingGroupCommandError");
var de_ReplaceTopicRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ReplaceTopicRuleCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_ReplaceTopicRuleCommand");
var de_ReplaceTopicRuleCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "SqlParseException":
    case "com.amazonaws.iot#SqlParseException":
      throw await de_SqlParseExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ReplaceTopicRuleCommandError");
var de_SearchIndexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchIndexCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    thingGroups: import_smithy_client._json,
    things: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchIndexCommand");
var de_SearchIndexCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_SearchIndexCommandError");
var de_SetDefaultAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SetDefaultAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizerArn: import_smithy_client.expectString,
    authorizerName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SetDefaultAuthorizerCommand");
var de_SetDefaultAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_SetDefaultAuthorizerCommandError");
var de_SetDefaultPolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SetDefaultPolicyVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_SetDefaultPolicyVersionCommand");
var de_SetDefaultPolicyVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_SetDefaultPolicyVersionCommandError");
var de_SetLoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SetLoggingOptionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_SetLoggingOptionsCommand");
var de_SetLoggingOptionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_SetLoggingOptionsCommandError");
var de_SetV2LoggingLevelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SetV2LoggingLevelCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_SetV2LoggingLevelCommand");
var de_SetV2LoggingLevelCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "NotConfiguredException":
    case "com.amazonaws.iot#NotConfiguredException":
      throw await de_NotConfiguredExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_SetV2LoggingLevelCommandError");
var de_SetV2LoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SetV2LoggingOptionsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_SetV2LoggingOptionsCommand");
var de_SetV2LoggingOptionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_SetV2LoggingOptionsCommandError");
var de_StartAuditMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_StartAuditMitigationActionsTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    taskId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartAuditMitigationActionsTaskCommand");
var de_StartAuditMitigationActionsTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "TaskAlreadyExistsException":
    case "com.amazonaws.iot#TaskAlreadyExistsException":
      throw await de_TaskAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_StartAuditMitigationActionsTaskCommandError");
var de_StartDetectMitigationActionsTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_StartDetectMitigationActionsTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    taskId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartDetectMitigationActionsTaskCommand");
var de_StartDetectMitigationActionsTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "TaskAlreadyExistsException":
    case "com.amazonaws.iot#TaskAlreadyExistsException":
      throw await de_TaskAlreadyExistsExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_StartDetectMitigationActionsTaskCommandError");
var de_StartOnDemandAuditTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_StartOnDemandAuditTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    taskId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartOnDemandAuditTaskCommand");
var de_StartOnDemandAuditTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_StartOnDemandAuditTaskCommandError");
var de_StartThingRegistrationTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_StartThingRegistrationTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    taskId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartThingRegistrationTaskCommand");
var de_StartThingRegistrationTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_StartThingRegistrationTaskCommandError");
var de_StopThingRegistrationTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_StopThingRegistrationTaskCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StopThingRegistrationTaskCommand");
var de_StopThingRegistrationTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_StopThingRegistrationTaskCommandError");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_TagResourceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_TagResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_TagResourceCommandError");
var de_TestAuthorizationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_TestAuthorizationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authResults: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_TestAuthorizationCommand");
var de_TestAuthorizationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_TestAuthorizationCommandError");
var de_TestInvokeAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_TestInvokeAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    disconnectAfterInSeconds: import_smithy_client.expectInt32,
    isAuthenticated: import_smithy_client.expectBoolean,
    policyDocuments: import_smithy_client._json,
    principalId: import_smithy_client.expectString,
    refreshAfterInSeconds: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_TestInvokeAuthorizerCommand");
var de_TestInvokeAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "InvalidResponseException":
    case "com.amazonaws.iot#InvalidResponseException":
      throw await de_InvalidResponseExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_TestInvokeAuthorizerCommandError");
var de_TransferCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_TransferCertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    transferredCertificateArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_TransferCertificateCommand");
var de_TransferCertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot#CertificateStateException":
      throw await de_CertificateStateExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "TransferConflictException":
    case "com.amazonaws.iot#TransferConflictException":
      throw await de_TransferConflictExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_TransferCertificateCommandError");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UntagResourceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UntagResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UntagResourceCommandError");
var de_UpdateAccountAuditConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAccountAuditConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateAccountAuditConfigurationCommand");
var de_UpdateAccountAuditConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateAccountAuditConfigurationCommandError");
var de_UpdateAuditSuppressionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAuditSuppressionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateAuditSuppressionCommand");
var de_UpdateAuditSuppressionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateAuditSuppressionCommandError");
var de_UpdateAuthorizerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAuthorizerCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    authorizerArn: import_smithy_client.expectString,
    authorizerName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateAuthorizerCommand");
var de_UpdateAuthorizerCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iot#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateAuthorizerCommandError");
var de_UpdateBillingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateBillingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBillingGroupCommand");
var de_UpdateBillingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateBillingGroupCommandError");
var de_UpdateCACertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateCACertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateCACertificateCommand");
var de_UpdateCACertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateCACertificateCommandError");
var de_UpdateCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateCertificateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateCertificateCommand");
var de_UpdateCertificateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot#CertificateStateException":
      throw await de_CertificateStateExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateCertificateCommandError");
var de_UpdateCertificateProviderCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateCertificateProviderCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    certificateProviderArn: import_smithy_client.expectString,
    certificateProviderName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateCertificateProviderCommand");
var de_UpdateCertificateProviderCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateCertificateProviderCommandError");
var de_UpdateCustomMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateCustomMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    displayName: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metricArn: import_smithy_client.expectString,
    metricName: import_smithy_client.expectString,
    metricType: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateCustomMetricCommand");
var de_UpdateCustomMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateCustomMetricCommandError");
var de_UpdateDimensionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDimensionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    stringValues: import_smithy_client._json,
    type: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateDimensionCommand");
var de_UpdateDimensionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateDimensionCommandError");
var de_UpdateDomainConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDomainConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    domainConfigurationArn: import_smithy_client.expectString,
    domainConfigurationName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateDomainConfigurationCommand");
var de_UpdateDomainConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateValidationException":
    case "com.amazonaws.iot#CertificateValidationException":
      throw await de_CertificateValidationExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateDomainConfigurationCommandError");
var de_UpdateDynamicThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDynamicThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateDynamicThingGroupCommand");
var de_UpdateDynamicThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateDynamicThingGroupCommandError");
var de_UpdateEventConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateEventConfigurationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateEventConfigurationsCommand");
var de_UpdateEventConfigurationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateEventConfigurationsCommandError");
var de_UpdateFleetMetricCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateFleetMetricCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateFleetMetricCommand");
var de_UpdateFleetMetricCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "IndexNotReadyException":
    case "com.amazonaws.iot#IndexNotReadyException":
      throw await de_IndexNotReadyExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidAggregationException":
    case "com.amazonaws.iot#InvalidAggregationException":
      throw await de_InvalidAggregationExceptionRes(parsedOutput, context);
    case "InvalidQueryException":
    case "com.amazonaws.iot#InvalidQueryException":
      throw await de_InvalidQueryExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateFleetMetricCommandError");
var de_UpdateIndexingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateIndexingConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateIndexingConfigurationCommand");
var de_UpdateIndexingConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateIndexingConfigurationCommandError");
var de_UpdateJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateJobCommand");
var de_UpdateJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateJobCommandError");
var de_UpdateMitigationActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateMitigationActionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionArn: import_smithy_client.expectString,
    actionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateMitigationActionCommand");
var de_UpdateMitigationActionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateMitigationActionCommandError");
var de_UpdatePackageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdatePackageCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdatePackageCommand");
var de_UpdatePackageCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.iot#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdatePackageCommandError");
var de_UpdatePackageConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdatePackageConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdatePackageConfigurationCommand");
var de_UpdatePackageConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.iot#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdatePackageConfigurationCommandError");
var de_UpdatePackageVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdatePackageVersionCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdatePackageVersionCommand");
var de_UpdatePackageVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.iot#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.iot#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iot#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdatePackageVersionCommandError");
var de_UpdateProvisioningTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateProvisioningTemplateCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateProvisioningTemplateCommand");
var de_UpdateProvisioningTemplateCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateProvisioningTemplateCommandError");
var de_UpdateRoleAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateRoleAliasCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    roleAlias: import_smithy_client.expectString,
    roleAliasArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateRoleAliasCommand");
var de_UpdateRoleAliasCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateRoleAliasCommandError");
var de_UpdateScheduledAuditCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateScheduledAuditCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    scheduledAuditArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateScheduledAuditCommand");
var de_UpdateScheduledAuditCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateScheduledAuditCommandError");
var de_UpdateSecurityProfileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateSecurityProfileCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    additionalMetricsToRetain: import_smithy_client._json,
    additionalMetricsToRetainV2: import_smithy_client._json,
    alertTargets: import_smithy_client._json,
    behaviors: (_) => de_Behaviors(_, context),
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metricsExportConfig: import_smithy_client._json,
    securityProfileArn: import_smithy_client.expectString,
    securityProfileDescription: import_smithy_client.expectString,
    securityProfileName: import_smithy_client.expectString,
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSecurityProfileCommand");
var de_UpdateSecurityProfileCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateSecurityProfileCommandError");
var de_UpdateStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateStreamCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    description: import_smithy_client.expectString,
    streamArn: import_smithy_client.expectString,
    streamId: import_smithy_client.expectString,
    streamVersion: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateStreamCommand");
var de_UpdateStreamCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateStreamCommandError");
var de_UpdateThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateThingCommand");
var de_UpdateThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateThingCommandError");
var de_UpdateThingGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateThingGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    version: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateThingGroupCommand");
var de_UpdateThingGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "VersionConflictException":
    case "com.amazonaws.iot#VersionConflictException":
      throw await de_VersionConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateThingGroupCommandError");
var de_UpdateThingGroupsForThingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateThingGroupsForThingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateThingGroupsForThingCommand");
var de_UpdateThingGroupsForThingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iot#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateThingGroupsForThingCommandError");
var de_UpdateTopicRuleDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateTopicRuleDestinationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateTopicRuleDestinationCommand");
var de_UpdateTopicRuleDestinationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot#ConflictingResourceUpdateException":
      throw await de_ConflictingResourceUpdateExceptionRes(parsedOutput, context);
    case "InternalException":
    case "com.amazonaws.iot#InternalException":
      throw await de_InternalExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iot#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iot#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_UpdateTopicRuleDestinationCommandError");
var de_ValidateSecurityProfileBehaviorsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ValidateSecurityProfileBehaviorsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    valid: import_smithy_client.expectBoolean,
    validationErrors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ValidateSecurityProfileBehaviorsCommand");
var de_ValidateSecurityProfileBehaviorsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iot#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iot#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_ValidateSecurityProfileBehaviorsCommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(IoTServiceException);
var de_CertificateConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new CertificateConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CertificateConflictExceptionRes");
var de_CertificateStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new CertificateStateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CertificateStateExceptionRes");
var de_CertificateValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new CertificateValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CertificateValidationExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_ConflictingResourceUpdateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictingResourceUpdateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictingResourceUpdateExceptionRes");
var de_DeleteConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new DeleteConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_DeleteConflictExceptionRes");
var de_IndexNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new IndexNotReadyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_IndexNotReadyExceptionRes");
var de_InternalExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalExceptionRes");
var de_InternalFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalFailureExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_InvalidAggregationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidAggregationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidAggregationExceptionRes");
var de_InvalidQueryExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidQueryException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidQueryExceptionRes");
var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidRequestExceptionRes");
var de_InvalidResponseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidResponseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidResponseExceptionRes");
var de_InvalidStateTransitionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidStateTransitionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidStateTransitionExceptionRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_LimitExceededExceptionRes");
var de_MalformedPolicyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new MalformedPolicyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_MalformedPolicyExceptionRes");
var de_NotConfiguredExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new NotConfiguredException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotConfiguredExceptionRes");
var de_RegistrationCodeValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new RegistrationCodeValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_RegistrationCodeValidationExceptionRes");
var de_ResourceAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceArn: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceAlreadyExistsExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ResourceRegistrationFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceRegistrationFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceRegistrationFailureExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_SqlParseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new SqlParseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_SqlParseExceptionRes");
var de_TaskAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TaskAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TaskAlreadyExistsExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_TransferAlreadyCompletedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TransferAlreadyCompletedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TransferAlreadyCompletedExceptionRes");
var de_TransferConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TransferConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TransferConflictExceptionRes");
var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnauthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnauthorizedExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var de_VersionConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new VersionConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_VersionConflictExceptionRes");
var de_VersionsLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new VersionsLimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_VersionsLimitExceededExceptionRes");
var se_AbortConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    criteriaList: (_) => se_AbortCriteriaList(_, context)
  });
}, "se_AbortConfig");
var se_AbortCriteria = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    action: [],
    failureType: [],
    minNumberOfExecutedThings: [],
    thresholdPercentage: import_smithy_client.serializeFloat
  });
}, "se_AbortCriteria");
var se_AbortCriteriaList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AbortCriteria(entry, context);
  });
}, "se_AbortCriteriaList");
var se_AwsJobAbortConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    abortCriteriaList: (_) => se_AwsJobAbortCriteriaList(_, context)
  });
}, "se_AwsJobAbortConfig");
var se_AwsJobAbortCriteria = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    action: [],
    failureType: [],
    minNumberOfExecutedThings: [],
    thresholdPercentage: import_smithy_client.serializeFloat
  });
}, "se_AwsJobAbortCriteria");
var se_AwsJobAbortCriteriaList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AwsJobAbortCriteria(entry, context);
  });
}, "se_AwsJobAbortCriteriaList");
var se_AwsJobExecutionsRolloutConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    exponentialRate: (_) => se_AwsJobExponentialRolloutRate(_, context),
    maximumPerMinute: []
  });
}, "se_AwsJobExecutionsRolloutConfig");
var se_AwsJobExponentialRolloutRate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    baseRatePerMinute: [],
    incrementFactor: import_smithy_client.serializeFloat,
    rateIncreaseCriteria: import_smithy_client._json
  });
}, "se_AwsJobExponentialRolloutRate");
var se_Behavior = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    criteria: (_) => se_BehaviorCriteria(_, context),
    exportMetric: [],
    metric: [],
    metricDimension: import_smithy_client._json,
    name: [],
    suppressAlerts: []
  });
}, "se_Behavior");
var se_BehaviorCriteria = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    comparisonOperator: [],
    consecutiveDatapointsToAlarm: [],
    consecutiveDatapointsToClear: [],
    durationSeconds: [],
    mlDetectionConfig: import_smithy_client._json,
    statisticalThreshold: import_smithy_client._json,
    value: (_) => se_MetricValue(_, context)
  });
}, "se_BehaviorCriteria");
var se_Behaviors = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Behavior(entry, context);
  });
}, "se_Behaviors");
var se_CodeSigning = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    awsSignerJobId: [],
    customCodeSigning: (_) => se_CustomCodeSigning(_, context),
    startSigningJobParameter: import_smithy_client._json
  });
}, "se_CodeSigning");
var se_CodeSigningSignature = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inlineDocument: context.base64Encoder
  });
}, "se_CodeSigningSignature");
var se_CustomCodeSigning = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    certificateChain: import_smithy_client._json,
    hashAlgorithm: [],
    signature: (_) => se_CodeSigningSignature(_, context),
    signatureAlgorithm: []
  });
}, "se_CustomCodeSigning");
var se_ExponentialRolloutRate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    baseRatePerMinute: [],
    incrementFactor: import_smithy_client.serializeFloat,
    rateIncreaseCriteria: import_smithy_client._json
  });
}, "se_ExponentialRolloutRate");
var se_JobExecutionsRolloutConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    exponentialRate: (_) => se_ExponentialRolloutRate(_, context),
    maximumPerMinute: []
  });
}, "se_JobExecutionsRolloutConfig");
var se_MetricValue = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cidrs: import_smithy_client._json,
    count: [],
    number: import_smithy_client.serializeFloat,
    numbers: (_) => se_NumberList(_, context),
    ports: import_smithy_client._json,
    strings: import_smithy_client._json
  });
}, "se_MetricValue");
var se_MqttContext = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    clientId: [],
    password: context.base64Encoder,
    username: []
  });
}, "se_MqttContext");
var se_NumberList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.serializeFloat)(entry);
  });
}, "se_NumberList");
var se_OTAUpdateFile = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    attributes: import_smithy_client._json,
    codeSigning: (_) => se_CodeSigning(_, context),
    fileLocation: import_smithy_client._json,
    fileName: [],
    fileType: [],
    fileVersion: []
  });
}, "se_OTAUpdateFile");
var se_OTAUpdateFiles = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_OTAUpdateFile(entry, context);
  });
}, "se_OTAUpdateFiles");
var se_PercentList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.serializeFloat)(entry);
  });
}, "se_PercentList");
var se_ViolationEventOccurrenceRange = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    endTime: (_) => Math.round(_.getTime() / 1e3),
    startTime: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_ViolationEventOccurrenceRange");
var de_AbortConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    criteriaList: (_) => de_AbortCriteriaList(_, context)
  });
}, "de_AbortConfig");
var de_AbortCriteria = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    action: import_smithy_client.expectString,
    failureType: import_smithy_client.expectString,
    minNumberOfExecutedThings: import_smithy_client.expectInt32,
    thresholdPercentage: import_smithy_client.limitedParseDouble
  });
}, "de_AbortCriteria");
var de_AbortCriteriaList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AbortCriteria(entry, context);
  });
  return retVal;
}, "de_AbortCriteriaList");
var de_ActiveViolation = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    behavior: (_) => de_Behavior(_, context),
    lastViolationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastViolationValue: (_) => de_MetricValue(_, context),
    securityProfileName: import_smithy_client.expectString,
    thingName: import_smithy_client.expectString,
    verificationState: import_smithy_client.expectString,
    verificationStateDescription: import_smithy_client.expectString,
    violationEventAdditionalInfo: import_smithy_client._json,
    violationId: import_smithy_client.expectString,
    violationStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_ActiveViolation");
var de_ActiveViolations = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ActiveViolation(entry, context);
  });
  return retVal;
}, "de_ActiveViolations");
var de_AuditFinding = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    checkName: import_smithy_client.expectString,
    findingId: import_smithy_client.expectString,
    findingTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    isSuppressed: import_smithy_client.expectBoolean,
    nonCompliantResource: import_smithy_client._json,
    reasonForNonCompliance: import_smithy_client.expectString,
    reasonForNonComplianceCode: import_smithy_client.expectString,
    relatedResources: import_smithy_client._json,
    severity: import_smithy_client.expectString,
    taskId: import_smithy_client.expectString,
    taskStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_AuditFinding");
var de_AuditFindings = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AuditFinding(entry, context);
  });
  return retVal;
}, "de_AuditFindings");
var de_AuditMitigationActionExecutionMetadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actionId: import_smithy_client.expectString,
    actionName: import_smithy_client.expectString,
    endTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    errorCode: import_smithy_client.expectString,
    findingId: import_smithy_client.expectString,
    message: import_smithy_client.expectString,
    startTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString,
    taskId: import_smithy_client.expectString
  });
}, "de_AuditMitigationActionExecutionMetadata");
var de_AuditMitigationActionExecutionMetadataList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AuditMitigationActionExecutionMetadata(entry, context);
  });
  return retVal;
}, "de_AuditMitigationActionExecutionMetadataList");
var de_AuditMitigationActionsTaskMetadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    startTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    taskId: import_smithy_client.expectString,
    taskStatus: import_smithy_client.expectString
  });
}, "de_AuditMitigationActionsTaskMetadata");
var de_AuditMitigationActionsTaskMetadataList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AuditMitigationActionsTaskMetadata(entry, context);
  });
  return retVal;
}, "de_AuditMitigationActionsTaskMetadataList");
var de_AuditSuppression = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    checkName: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    expirationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    resourceIdentifier: import_smithy_client._json,
    suppressIndefinitely: import_smithy_client.expectBoolean
  });
}, "de_AuditSuppression");
var de_AuditSuppressionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AuditSuppression(entry, context);
  });
  return retVal;
}, "de_AuditSuppressionList");
var de_AuthorizerDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    authorizerArn: import_smithy_client.expectString,
    authorizerFunctionArn: import_smithy_client.expectString,
    authorizerName: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    enableCachingForHttp: import_smithy_client.expectBoolean,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    signingDisabled: import_smithy_client.expectBoolean,
    status: import_smithy_client.expectString,
    tokenKeyName: import_smithy_client.expectString,
    tokenSigningPublicKeys: import_smithy_client._json
  });
}, "de_AuthorizerDescription");
var de_AwsJobExecutionsRolloutConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    exponentialRate: (_) => de_AwsJobExponentialRolloutRate(_, context),
    maximumPerMinute: import_smithy_client.expectInt32
  });
}, "de_AwsJobExecutionsRolloutConfig");
var de_AwsJobExponentialRolloutRate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    baseRatePerMinute: import_smithy_client.expectInt32,
    incrementFactor: import_smithy_client.limitedParseDouble,
    rateIncreaseCriteria: import_smithy_client._json
  });
}, "de_AwsJobExponentialRolloutRate");
var de_Behavior = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    criteria: (_) => de_BehaviorCriteria(_, context),
    exportMetric: import_smithy_client.expectBoolean,
    metric: import_smithy_client.expectString,
    metricDimension: import_smithy_client._json,
    name: import_smithy_client.expectString,
    suppressAlerts: import_smithy_client.expectBoolean
  });
}, "de_Behavior");
var de_BehaviorCriteria = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    comparisonOperator: import_smithy_client.expectString,
    consecutiveDatapointsToAlarm: import_smithy_client.expectInt32,
    consecutiveDatapointsToClear: import_smithy_client.expectInt32,
    durationSeconds: import_smithy_client.expectInt32,
    mlDetectionConfig: import_smithy_client._json,
    statisticalThreshold: import_smithy_client._json,
    value: (_) => de_MetricValue(_, context)
  });
}, "de_BehaviorCriteria");
var de_BehaviorModelTrainingSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BehaviorModelTrainingSummary(entry, context);
  });
  return retVal;
}, "de_BehaviorModelTrainingSummaries");
var de_BehaviorModelTrainingSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    behaviorName: import_smithy_client.expectString,
    datapointsCollectionPercentage: import_smithy_client.limitedParseDouble,
    lastModelRefreshDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    modelStatus: import_smithy_client.expectString,
    securityProfileName: import_smithy_client.expectString,
    trainingDataCollectionStartDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BehaviorModelTrainingSummary");
var de_Behaviors = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Behavior(entry, context);
  });
  return retVal;
}, "de_Behaviors");
var de_BillingGroupMetadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BillingGroupMetadata");
var de_CACertificate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString
  });
}, "de_CACertificate");
var de_CACertificateDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    autoRegistrationStatus: import_smithy_client.expectString,
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    certificateMode: import_smithy_client.expectString,
    certificatePem: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    customerVersion: import_smithy_client.expectInt32,
    generationId: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    ownedBy: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    validity: (_) => de_CertificateValidity(_, context)
  });
}, "de_CACertificateDescription");
var de_CACertificates = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CACertificate(entry, context);
  });
  return retVal;
}, "de_CACertificates");
var de_Certificate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    certificateMode: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString
  });
}, "de_Certificate");
var de_CertificateDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    caCertificateId: import_smithy_client.expectString,
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    certificateMode: import_smithy_client.expectString,
    certificatePem: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    customerVersion: import_smithy_client.expectInt32,
    generationId: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    ownedBy: import_smithy_client.expectString,
    previousOwnedBy: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    transferData: (_) => de_TransferData(_, context),
    validity: (_) => de_CertificateValidity(_, context)
  });
}, "de_CertificateDescription");
var de_Certificates = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Certificate(entry, context);
  });
  return retVal;
}, "de_Certificates");
var de_CertificateValidity = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    notAfter: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    notBefore: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_CertificateValidity");
var de_CodeSigning = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    awsSignerJobId: import_smithy_client.expectString,
    customCodeSigning: (_) => de_CustomCodeSigning(_, context),
    startSigningJobParameter: import_smithy_client._json
  });
}, "de_CodeSigning");
var de_CodeSigningSignature = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    inlineDocument: context.base64Decoder
  });
}, "de_CodeSigningSignature");
var de_CustomCodeSigning = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    certificateChain: import_smithy_client._json,
    hashAlgorithm: import_smithy_client.expectString,
    signature: (_) => de_CodeSigningSignature(_, context),
    signatureAlgorithm: import_smithy_client.expectString
  });
}, "de_CustomCodeSigning");
var de_DetectMitigationActionExecution = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actionName: import_smithy_client.expectString,
    errorCode: import_smithy_client.expectString,
    executionEndDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    executionStartDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    message: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    taskId: import_smithy_client.expectString,
    thingName: import_smithy_client.expectString,
    violationId: import_smithy_client.expectString
  });
}, "de_DetectMitigationActionExecution");
var de_DetectMitigationActionExecutionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DetectMitigationActionExecution(entry, context);
  });
  return retVal;
}, "de_DetectMitigationActionExecutionList");
var de_DetectMitigationActionsTaskSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actionsDefinition: import_smithy_client._json,
    onlyActiveViolationsIncluded: import_smithy_client.expectBoolean,
    suppressedAlertsIncluded: import_smithy_client.expectBoolean,
    target: import_smithy_client._json,
    taskEndTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    taskId: import_smithy_client.expectString,
    taskStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    taskStatistics: import_smithy_client._json,
    taskStatus: import_smithy_client.expectString,
    violationEventOccurrenceRange: (_) => de_ViolationEventOccurrenceRange(_, context)
  });
}, "de_DetectMitigationActionsTaskSummary");
var de_DetectMitigationActionsTaskSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DetectMitigationActionsTaskSummary(entry, context);
  });
  return retVal;
}, "de_DetectMitigationActionsTaskSummaryList");
var de_ExponentialRolloutRate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    baseRatePerMinute: import_smithy_client.expectInt32,
    incrementFactor: import_smithy_client.limitedParseDouble,
    rateIncreaseCriteria: import_smithy_client._json
  });
}, "de_ExponentialRolloutRate");
var de_Job = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    abortConfig: (_) => de_AbortConfig(_, context),
    comment: import_smithy_client.expectString,
    completedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    destinationPackageVersions: import_smithy_client._json,
    documentParameters: import_smithy_client._json,
    forceCanceled: import_smithy_client.expectBoolean,
    isConcurrent: import_smithy_client.expectBoolean,
    jobArn: import_smithy_client.expectString,
    jobExecutionsRetryConfig: import_smithy_client._json,
    jobExecutionsRolloutConfig: (_) => de_JobExecutionsRolloutConfig(_, context),
    jobId: import_smithy_client.expectString,
    jobProcessDetails: import_smithy_client._json,
    jobTemplateArn: import_smithy_client.expectString,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    namespaceId: import_smithy_client.expectString,
    presignedUrlConfig: import_smithy_client._json,
    reasonCode: import_smithy_client.expectString,
    scheduledJobRollouts: import_smithy_client._json,
    schedulingConfig: import_smithy_client._json,
    status: import_smithy_client.expectString,
    targetSelection: import_smithy_client.expectString,
    targets: import_smithy_client._json,
    timeoutConfig: import_smithy_client._json
  });
}, "de_Job");
var de_JobExecution = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    approximateSecondsBeforeTimedOut: import_smithy_client.expectLong,
    executionNumber: import_smithy_client.expectLong,
    forceCanceled: import_smithy_client.expectBoolean,
    jobId: import_smithy_client.expectString,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    queuedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    startedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString,
    statusDetails: import_smithy_client._json,
    thingArn: import_smithy_client.expectString,
    versionNumber: import_smithy_client.expectLong
  });
}, "de_JobExecution");
var de_JobExecutionsRolloutConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    exponentialRate: (_) => de_ExponentialRolloutRate(_, context),
    maximumPerMinute: import_smithy_client.expectInt32
  });
}, "de_JobExecutionsRolloutConfig");
var de_JobExecutionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    executionNumber: import_smithy_client.expectLong,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    queuedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    retryAttempt: import_smithy_client.expectInt32,
    startedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString
  });
}, "de_JobExecutionSummary");
var de_JobExecutionSummaryForJob = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    jobExecutionSummary: (_) => de_JobExecutionSummary(_, context),
    thingArn: import_smithy_client.expectString
  });
}, "de_JobExecutionSummaryForJob");
var de_JobExecutionSummaryForJobList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_JobExecutionSummaryForJob(entry, context);
  });
  return retVal;
}, "de_JobExecutionSummaryForJobList");
var de_JobExecutionSummaryForThing = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    jobExecutionSummary: (_) => de_JobExecutionSummary(_, context),
    jobId: import_smithy_client.expectString
  });
}, "de_JobExecutionSummaryForThing");
var de_JobExecutionSummaryForThingList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_JobExecutionSummaryForThing(entry, context);
  });
  return retVal;
}, "de_JobExecutionSummaryForThingList");
var de_JobSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    completedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    isConcurrent: import_smithy_client.expectBoolean,
    jobArn: import_smithy_client.expectString,
    jobId: import_smithy_client.expectString,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString,
    targetSelection: import_smithy_client.expectString,
    thingGroupId: import_smithy_client.expectString
  });
}, "de_JobSummary");
var de_JobSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_JobSummary(entry, context);
  });
  return retVal;
}, "de_JobSummaryList");
var de_JobTemplateSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    jobTemplateArn: import_smithy_client.expectString,
    jobTemplateId: import_smithy_client.expectString
  });
}, "de_JobTemplateSummary");
var de_JobTemplateSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_JobTemplateSummary(entry, context);
  });
  return retVal;
}, "de_JobTemplateSummaryList");
var de_MetricDatum = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    timestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    value: (_) => de_MetricValue(_, context)
  });
}, "de_MetricDatum");
var de_MetricDatumList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MetricDatum(entry, context);
  });
  return retVal;
}, "de_MetricDatumList");
var de_MetricValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    cidrs: import_smithy_client._json,
    count: import_smithy_client.expectLong,
    number: import_smithy_client.limitedParseDouble,
    numbers: (_) => de_NumberList(_, context),
    ports: import_smithy_client._json,
    strings: import_smithy_client._json
  });
}, "de_MetricValue");
var de_MitigationActionIdentifier = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actionArn: import_smithy_client.expectString,
    actionName: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_MitigationActionIdentifier");
var de_MitigationActionIdentifierList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MitigationActionIdentifier(entry, context);
  });
  return retVal;
}, "de_MitigationActionIdentifierList");
var de_NumberList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.limitedParseDouble)(entry);
  });
  return retVal;
}, "de_NumberList");
var de_OTAUpdateFile = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    attributes: import_smithy_client._json,
    codeSigning: (_) => de_CodeSigning(_, context),
    fileLocation: import_smithy_client._json,
    fileName: import_smithy_client.expectString,
    fileType: import_smithy_client.expectInt32,
    fileVersion: import_smithy_client.expectString
  });
}, "de_OTAUpdateFile");
var de_OTAUpdateFiles = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OTAUpdateFile(entry, context);
  });
  return retVal;
}, "de_OTAUpdateFiles");
var de_OTAUpdateInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    additionalParameters: import_smithy_client._json,
    awsIotJobArn: import_smithy_client.expectString,
    awsIotJobId: import_smithy_client.expectString,
    awsJobExecutionsRolloutConfig: (_) => de_AwsJobExecutionsRolloutConfig(_, context),
    awsJobPresignedUrlConfig: import_smithy_client._json,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    errorInfo: import_smithy_client._json,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    otaUpdateArn: import_smithy_client.expectString,
    otaUpdateFiles: (_) => de_OTAUpdateFiles(_, context),
    otaUpdateId: import_smithy_client.expectString,
    otaUpdateStatus: import_smithy_client.expectString,
    protocols: import_smithy_client._json,
    targetSelection: import_smithy_client.expectString,
    targets: import_smithy_client._json
  });
}, "de_OTAUpdateInfo");
var de_OTAUpdatesSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OTAUpdateSummary(entry, context);
  });
  return retVal;
}, "de_OTAUpdatesSummary");
var de_OTAUpdateSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    otaUpdateArn: import_smithy_client.expectString,
    otaUpdateId: import_smithy_client.expectString
  });
}, "de_OTAUpdateSummary");
var de_OutgoingCertificate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    certificateArn: import_smithy_client.expectString,
    certificateId: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    transferDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    transferMessage: import_smithy_client.expectString,
    transferredTo: import_smithy_client.expectString
  });
}, "de_OutgoingCertificate");
var de_OutgoingCertificates = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutgoingCertificate(entry, context);
  });
  return retVal;
}, "de_OutgoingCertificates");
var de_PackageSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    defaultVersionName: import_smithy_client.expectString,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    packageName: import_smithy_client.expectString
  });
}, "de_PackageSummary");
var de_PackageSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PackageSummary(entry, context);
  });
  return retVal;
}, "de_PackageSummaryList");
var de_PackageVersionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    packageName: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    versionName: import_smithy_client.expectString
  });
}, "de_PackageVersionSummary");
var de_PackageVersionSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PackageVersionSummary(entry, context);
  });
  return retVal;
}, "de_PackageVersionSummaryList");
var de_Percentiles = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PercentPair(entry, context);
  });
  return retVal;
}, "de_Percentiles");
var de_PercentPair = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    percent: import_smithy_client.limitedParseDouble,
    value: import_smithy_client.limitedParseDouble
  });
}, "de_PercentPair");
var de_PolicyVersion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    isDefaultVersion: import_smithy_client.expectBoolean,
    versionId: import_smithy_client.expectString
  });
}, "de_PolicyVersion");
var de_PolicyVersions = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PolicyVersion(entry, context);
  });
  return retVal;
}, "de_PolicyVersions");
var de_ProvisioningTemplateListing = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ProvisioningTemplateSummary(entry, context);
  });
  return retVal;
}, "de_ProvisioningTemplateListing");
var de_ProvisioningTemplateSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    enabled: import_smithy_client.expectBoolean,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    templateArn: import_smithy_client.expectString,
    templateName: import_smithy_client.expectString,
    type: import_smithy_client.expectString
  });
}, "de_ProvisioningTemplateSummary");
var de_ProvisioningTemplateVersionListing = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ProvisioningTemplateVersionSummary(entry, context);
  });
  return retVal;
}, "de_ProvisioningTemplateVersionListing");
var de_ProvisioningTemplateVersionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    isDefaultVersion: import_smithy_client.expectBoolean,
    versionId: import_smithy_client.expectInt32
  });
}, "de_ProvisioningTemplateVersionSummary");
var de_RoleAliasDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    credentialDurationSeconds: import_smithy_client.expectInt32,
    lastModifiedDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    owner: import_smithy_client.expectString,
    roleAlias: import_smithy_client.expectString,
    roleAliasArn: import_smithy_client.expectString,
    roleArn: import_smithy_client.expectString
  });
}, "de_RoleAliasDescription");
var de_Statistics = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    average: import_smithy_client.limitedParseDouble,
    count: import_smithy_client.expectInt32,
    maximum: import_smithy_client.limitedParseDouble,
    minimum: import_smithy_client.limitedParseDouble,
    stdDeviation: import_smithy_client.limitedParseDouble,
    sum: import_smithy_client.limitedParseDouble,
    sumOfSquares: import_smithy_client.limitedParseDouble,
    variance: import_smithy_client.limitedParseDouble
  });
}, "de_Statistics");
var de_StreamInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    files: import_smithy_client._json,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    roleArn: import_smithy_client.expectString,
    streamArn: import_smithy_client.expectString,
    streamId: import_smithy_client.expectString,
    streamVersion: import_smithy_client.expectInt32
  });
}, "de_StreamInfo");
var de_ThingGroupMetadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    parentGroupName: import_smithy_client.expectString,
    rootToParentThingGroups: import_smithy_client._json
  });
}, "de_ThingGroupMetadata");
var de_ThingTypeDefinition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    thingTypeArn: import_smithy_client.expectString,
    thingTypeMetadata: (_) => de_ThingTypeMetadata(_, context),
    thingTypeName: import_smithy_client.expectString,
    thingTypeProperties: import_smithy_client._json
  });
}, "de_ThingTypeDefinition");
var de_ThingTypeList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ThingTypeDefinition(entry, context);
  });
  return retVal;
}, "de_ThingTypeList");
var de_ThingTypeMetadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    deprecated: import_smithy_client.expectBoolean,
    deprecationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_ThingTypeMetadata");
var de_TopicRule = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actions: import_smithy_client._json,
    awsIotSqlVersion: import_smithy_client.expectString,
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    errorAction: import_smithy_client._json,
    ruleDisabled: import_smithy_client.expectBoolean,
    ruleName: import_smithy_client.expectString,
    sql: import_smithy_client.expectString
  });
}, "de_TopicRule");
var de_TopicRuleDestination = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    httpUrlProperties: import_smithy_client._json,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString,
    statusReason: import_smithy_client.expectString,
    vpcProperties: import_smithy_client._json
  });
}, "de_TopicRuleDestination");
var de_TopicRuleDestinationSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TopicRuleDestinationSummary(entry, context);
  });
  return retVal;
}, "de_TopicRuleDestinationSummaries");
var de_TopicRuleDestinationSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    httpUrlSummary: import_smithy_client._json,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString,
    statusReason: import_smithy_client.expectString,
    vpcDestinationSummary: import_smithy_client._json
  });
}, "de_TopicRuleDestinationSummary");
var de_TopicRuleList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TopicRuleListItem(entry, context);
  });
  return retVal;
}, "de_TopicRuleList");
var de_TopicRuleListItem = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    ruleArn: import_smithy_client.expectString,
    ruleDisabled: import_smithy_client.expectBoolean,
    ruleName: import_smithy_client.expectString,
    topicPattern: import_smithy_client.expectString
  });
}, "de_TopicRuleListItem");
var de_TransferData = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    acceptDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    rejectDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    rejectReason: import_smithy_client.expectString,
    transferDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    transferMessage: import_smithy_client.expectString
  });
}, "de_TransferData");
var de_ViolationEvent = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    behavior: (_) => de_Behavior(_, context),
    metricValue: (_) => de_MetricValue(_, context),
    securityProfileName: import_smithy_client.expectString,
    thingName: import_smithy_client.expectString,
    verificationState: import_smithy_client.expectString,
    verificationStateDescription: import_smithy_client.expectString,
    violationEventAdditionalInfo: import_smithy_client._json,
    violationEventTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    violationEventType: import_smithy_client.expectString,
    violationId: import_smithy_client.expectString
  });
}, "de_ViolationEvent");
var de_ViolationEventOccurrenceRange = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    endTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    startTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_ViolationEventOccurrenceRange");
var de_ViolationEvents = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ViolationEvent(entry, context);
  });
  return retVal;
}, "de_ViolationEvents");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
var _aAR = "allowAutoRegistration";
var _aN = "attributeName";
var _aO = "ascendingOrder";
var _aS = "actionStatus";
var _aT = "actionType";
var _aTI = "auditTaskId";
var _aV = "attributeValue";
var _bCT = "behaviorCriteriaType";
var _cI = "clientId";
var _cT = "clientToken";
var _dN = "dimensionName";
var _dS = "deleteStream";
var _dSA = "deleteScheduledAudits";
var _dVO = "dimensionValueOperator";
var _eN = "executionNumber";
var _eT = "endpointType";
var _eTn = "endTime";
var _eV = "expectedVersion";
var _f = "force";
var _fD = "forceDelete";
var _fDAWSJ = "forceDeleteAWSJob";
var _fI = "findingId";
var _iAO = "isAscendingOrder";
var _jI = "jobId";
var _lSA = "listSuppressedAlerts";
var _m = "marker";
var _mN = "metricName";
var _mR = "maxResults";
var _nARS = "newAutoRegistrationStatus";
var _nI = "namespaceId";
var _nPF = "namePrefixFilter";
var _nS = "newStatus";
var _nT = "nextToken";
var _oUS = "otaUpdateStatus";
var _p = "principal";
var _pG = "parentGroup";
var _pN = "policyName";
var _pS = "pageSize";
var _r = "recursive";
var _rA = "resourceArn";
var _rD = "ruleDisabled";
var _rT = "reportType";
var _s = "status";
var _sAA = "setAsActive";
var _sAD = "setAsDefault";
var _sPN = "securityProfileName";
var _sPTA = "securityProfileTargetArn";
var _sT = "startTime";
var _sTe = "serviceType";
var _t = "tags";
var _tAA = "targetAwsAccount";
var _tGI = "thingGroupId";
var _tGN = "thingGroupName";
var _tI = "taskId";
var _tN = "targetName";
var _tNe = "templateName";
var _tNh = "thingName";
var _tS = "taskStatus";
var _tSa = "targetSelection";
var _tT = "targetType";
var _tTN = "thingTypeName";
var _tTa = "taskType";
var _tV = "templateVersion";
var _to = "topic";
var _uPAV = "usePrefixAttributeValue";
var _vI = "violationId";
var _vS = "verificationState";
var _xaip = "x-amzn-iot-principal";
var _xaip_ = "x-amzn-iot-policy";
var _xap = "x-amzn-principal";
var _xat = "x-amz-tagging";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/AcceptCertificateTransferCommand.ts
var _AcceptCertificateTransferCommand = class _AcceptCertificateTransferCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AcceptCertificateTransfer", {}).n("IoTClient", "AcceptCertificateTransferCommand").f(void 0, void 0).ser(se_AcceptCertificateTransferCommand).de(de_AcceptCertificateTransferCommand).build() {
};
__name(_AcceptCertificateTransferCommand, "AcceptCertificateTransferCommand");
var AcceptCertificateTransferCommand = _AcceptCertificateTransferCommand;

// src/commands/AddThingToBillingGroupCommand.ts




var _AddThingToBillingGroupCommand = class _AddThingToBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AddThingToBillingGroup", {}).n("IoTClient", "AddThingToBillingGroupCommand").f(void 0, void 0).ser(se_AddThingToBillingGroupCommand).de(de_AddThingToBillingGroupCommand).build() {
};
__name(_AddThingToBillingGroupCommand, "AddThingToBillingGroupCommand");
var AddThingToBillingGroupCommand = _AddThingToBillingGroupCommand;

// src/commands/AddThingToThingGroupCommand.ts




var _AddThingToThingGroupCommand = class _AddThingToThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AddThingToThingGroup", {}).n("IoTClient", "AddThingToThingGroupCommand").f(void 0, void 0).ser(se_AddThingToThingGroupCommand).de(de_AddThingToThingGroupCommand).build() {
};
__name(_AddThingToThingGroupCommand, "AddThingToThingGroupCommand");
var AddThingToThingGroupCommand = _AddThingToThingGroupCommand;

// src/commands/AssociateTargetsWithJobCommand.ts




var _AssociateTargetsWithJobCommand = class _AssociateTargetsWithJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AssociateTargetsWithJob", {}).n("IoTClient", "AssociateTargetsWithJobCommand").f(void 0, void 0).ser(se_AssociateTargetsWithJobCommand).de(de_AssociateTargetsWithJobCommand).build() {
};
__name(_AssociateTargetsWithJobCommand, "AssociateTargetsWithJobCommand");
var AssociateTargetsWithJobCommand = _AssociateTargetsWithJobCommand;

// src/commands/AttachPolicyCommand.ts




var _AttachPolicyCommand = class _AttachPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AttachPolicy", {}).n("IoTClient", "AttachPolicyCommand").f(void 0, void 0).ser(se_AttachPolicyCommand).de(de_AttachPolicyCommand).build() {
};
__name(_AttachPolicyCommand, "AttachPolicyCommand");
var AttachPolicyCommand = _AttachPolicyCommand;

// src/commands/AttachPrincipalPolicyCommand.ts




var _AttachPrincipalPolicyCommand = class _AttachPrincipalPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AttachPrincipalPolicy", {}).n("IoTClient", "AttachPrincipalPolicyCommand").f(void 0, void 0).ser(se_AttachPrincipalPolicyCommand).de(de_AttachPrincipalPolicyCommand).build() {
};
__name(_AttachPrincipalPolicyCommand, "AttachPrincipalPolicyCommand");
var AttachPrincipalPolicyCommand = _AttachPrincipalPolicyCommand;

// src/commands/AttachSecurityProfileCommand.ts




var _AttachSecurityProfileCommand = class _AttachSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AttachSecurityProfile", {}).n("IoTClient", "AttachSecurityProfileCommand").f(void 0, void 0).ser(se_AttachSecurityProfileCommand).de(de_AttachSecurityProfileCommand).build() {
};
__name(_AttachSecurityProfileCommand, "AttachSecurityProfileCommand");
var AttachSecurityProfileCommand = _AttachSecurityProfileCommand;

// src/commands/AttachThingPrincipalCommand.ts




var _AttachThingPrincipalCommand = class _AttachThingPrincipalCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "AttachThingPrincipal", {}).n("IoTClient", "AttachThingPrincipalCommand").f(void 0, void 0).ser(se_AttachThingPrincipalCommand).de(de_AttachThingPrincipalCommand).build() {
};
__name(_AttachThingPrincipalCommand, "AttachThingPrincipalCommand");
var AttachThingPrincipalCommand = _AttachThingPrincipalCommand;

// src/commands/CancelAuditMitigationActionsTaskCommand.ts




var _CancelAuditMitigationActionsTaskCommand = class _CancelAuditMitigationActionsTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CancelAuditMitigationActionsTask", {}).n("IoTClient", "CancelAuditMitigationActionsTaskCommand").f(void 0, void 0).ser(se_CancelAuditMitigationActionsTaskCommand).de(de_CancelAuditMitigationActionsTaskCommand).build() {
};
__name(_CancelAuditMitigationActionsTaskCommand, "CancelAuditMitigationActionsTaskCommand");
var CancelAuditMitigationActionsTaskCommand = _CancelAuditMitigationActionsTaskCommand;

// src/commands/CancelAuditTaskCommand.ts




var _CancelAuditTaskCommand = class _CancelAuditTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CancelAuditTask", {}).n("IoTClient", "CancelAuditTaskCommand").f(void 0, void 0).ser(se_CancelAuditTaskCommand).de(de_CancelAuditTaskCommand).build() {
};
__name(_CancelAuditTaskCommand, "CancelAuditTaskCommand");
var CancelAuditTaskCommand = _CancelAuditTaskCommand;

// src/commands/CancelCertificateTransferCommand.ts




var _CancelCertificateTransferCommand = class _CancelCertificateTransferCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CancelCertificateTransfer", {}).n("IoTClient", "CancelCertificateTransferCommand").f(void 0, void 0).ser(se_CancelCertificateTransferCommand).de(de_CancelCertificateTransferCommand).build() {
};
__name(_CancelCertificateTransferCommand, "CancelCertificateTransferCommand");
var CancelCertificateTransferCommand = _CancelCertificateTransferCommand;

// src/commands/CancelDetectMitigationActionsTaskCommand.ts




var _CancelDetectMitigationActionsTaskCommand = class _CancelDetectMitigationActionsTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CancelDetectMitigationActionsTask", {}).n("IoTClient", "CancelDetectMitigationActionsTaskCommand").f(void 0, void 0).ser(se_CancelDetectMitigationActionsTaskCommand).de(de_CancelDetectMitigationActionsTaskCommand).build() {
};
__name(_CancelDetectMitigationActionsTaskCommand, "CancelDetectMitigationActionsTaskCommand");
var CancelDetectMitigationActionsTaskCommand = _CancelDetectMitigationActionsTaskCommand;

// src/commands/CancelJobCommand.ts




var _CancelJobCommand = class _CancelJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CancelJob", {}).n("IoTClient", "CancelJobCommand").f(void 0, void 0).ser(se_CancelJobCommand).de(de_CancelJobCommand).build() {
};
__name(_CancelJobCommand, "CancelJobCommand");
var CancelJobCommand = _CancelJobCommand;

// src/commands/CancelJobExecutionCommand.ts




var _CancelJobExecutionCommand = class _CancelJobExecutionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CancelJobExecution", {}).n("IoTClient", "CancelJobExecutionCommand").f(void 0, void 0).ser(se_CancelJobExecutionCommand).de(de_CancelJobExecutionCommand).build() {
};
__name(_CancelJobExecutionCommand, "CancelJobExecutionCommand");
var CancelJobExecutionCommand = _CancelJobExecutionCommand;

// src/commands/ClearDefaultAuthorizerCommand.ts




var _ClearDefaultAuthorizerCommand = class _ClearDefaultAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ClearDefaultAuthorizer", {}).n("IoTClient", "ClearDefaultAuthorizerCommand").f(void 0, void 0).ser(se_ClearDefaultAuthorizerCommand).de(de_ClearDefaultAuthorizerCommand).build() {
};
__name(_ClearDefaultAuthorizerCommand, "ClearDefaultAuthorizerCommand");
var ClearDefaultAuthorizerCommand = _ClearDefaultAuthorizerCommand;

// src/commands/ConfirmTopicRuleDestinationCommand.ts




var _ConfirmTopicRuleDestinationCommand = class _ConfirmTopicRuleDestinationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ConfirmTopicRuleDestination", {}).n("IoTClient", "ConfirmTopicRuleDestinationCommand").f(void 0, void 0).ser(se_ConfirmTopicRuleDestinationCommand).de(de_ConfirmTopicRuleDestinationCommand).build() {
};
__name(_ConfirmTopicRuleDestinationCommand, "ConfirmTopicRuleDestinationCommand");
var ConfirmTopicRuleDestinationCommand = _ConfirmTopicRuleDestinationCommand;

// src/commands/CreateAuditSuppressionCommand.ts




var _CreateAuditSuppressionCommand = class _CreateAuditSuppressionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateAuditSuppression", {}).n("IoTClient", "CreateAuditSuppressionCommand").f(void 0, void 0).ser(se_CreateAuditSuppressionCommand).de(de_CreateAuditSuppressionCommand).build() {
};
__name(_CreateAuditSuppressionCommand, "CreateAuditSuppressionCommand");
var CreateAuditSuppressionCommand = _CreateAuditSuppressionCommand;

// src/commands/CreateAuthorizerCommand.ts




var _CreateAuthorizerCommand = class _CreateAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateAuthorizer", {}).n("IoTClient", "CreateAuthorizerCommand").f(void 0, void 0).ser(se_CreateAuthorizerCommand).de(de_CreateAuthorizerCommand).build() {
};
__name(_CreateAuthorizerCommand, "CreateAuthorizerCommand");
var CreateAuthorizerCommand = _CreateAuthorizerCommand;

// src/commands/CreateBillingGroupCommand.ts




var _CreateBillingGroupCommand = class _CreateBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateBillingGroup", {}).n("IoTClient", "CreateBillingGroupCommand").f(void 0, void 0).ser(se_CreateBillingGroupCommand).de(de_CreateBillingGroupCommand).build() {
};
__name(_CreateBillingGroupCommand, "CreateBillingGroupCommand");
var CreateBillingGroupCommand = _CreateBillingGroupCommand;

// src/commands/CreateCertificateFromCsrCommand.ts




var _CreateCertificateFromCsrCommand = class _CreateCertificateFromCsrCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateCertificateFromCsr", {}).n("IoTClient", "CreateCertificateFromCsrCommand").f(void 0, void 0).ser(se_CreateCertificateFromCsrCommand).de(de_CreateCertificateFromCsrCommand).build() {
};
__name(_CreateCertificateFromCsrCommand, "CreateCertificateFromCsrCommand");
var CreateCertificateFromCsrCommand = _CreateCertificateFromCsrCommand;

// src/commands/CreateCertificateProviderCommand.ts




var _CreateCertificateProviderCommand = class _CreateCertificateProviderCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateCertificateProvider", {}).n("IoTClient", "CreateCertificateProviderCommand").f(void 0, void 0).ser(se_CreateCertificateProviderCommand).de(de_CreateCertificateProviderCommand).build() {
};
__name(_CreateCertificateProviderCommand, "CreateCertificateProviderCommand");
var CreateCertificateProviderCommand = _CreateCertificateProviderCommand;

// src/commands/CreateCustomMetricCommand.ts




var _CreateCustomMetricCommand = class _CreateCustomMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateCustomMetric", {}).n("IoTClient", "CreateCustomMetricCommand").f(void 0, void 0).ser(se_CreateCustomMetricCommand).de(de_CreateCustomMetricCommand).build() {
};
__name(_CreateCustomMetricCommand, "CreateCustomMetricCommand");
var CreateCustomMetricCommand = _CreateCustomMetricCommand;

// src/commands/CreateDimensionCommand.ts




var _CreateDimensionCommand = class _CreateDimensionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateDimension", {}).n("IoTClient", "CreateDimensionCommand").f(void 0, void 0).ser(se_CreateDimensionCommand).de(de_CreateDimensionCommand).build() {
};
__name(_CreateDimensionCommand, "CreateDimensionCommand");
var CreateDimensionCommand = _CreateDimensionCommand;

// src/commands/CreateDomainConfigurationCommand.ts




var _CreateDomainConfigurationCommand = class _CreateDomainConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateDomainConfiguration", {}).n("IoTClient", "CreateDomainConfigurationCommand").f(void 0, void 0).ser(se_CreateDomainConfigurationCommand).de(de_CreateDomainConfigurationCommand).build() {
};
__name(_CreateDomainConfigurationCommand, "CreateDomainConfigurationCommand");
var CreateDomainConfigurationCommand = _CreateDomainConfigurationCommand;

// src/commands/CreateDynamicThingGroupCommand.ts




var _CreateDynamicThingGroupCommand = class _CreateDynamicThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateDynamicThingGroup", {}).n("IoTClient", "CreateDynamicThingGroupCommand").f(void 0, void 0).ser(se_CreateDynamicThingGroupCommand).de(de_CreateDynamicThingGroupCommand).build() {
};
__name(_CreateDynamicThingGroupCommand, "CreateDynamicThingGroupCommand");
var CreateDynamicThingGroupCommand = _CreateDynamicThingGroupCommand;

// src/commands/CreateFleetMetricCommand.ts




var _CreateFleetMetricCommand = class _CreateFleetMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateFleetMetric", {}).n("IoTClient", "CreateFleetMetricCommand").f(void 0, void 0).ser(se_CreateFleetMetricCommand).de(de_CreateFleetMetricCommand).build() {
};
__name(_CreateFleetMetricCommand, "CreateFleetMetricCommand");
var CreateFleetMetricCommand = _CreateFleetMetricCommand;

// src/commands/CreateJobCommand.ts




var _CreateJobCommand = class _CreateJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateJob", {}).n("IoTClient", "CreateJobCommand").f(void 0, void 0).ser(se_CreateJobCommand).de(de_CreateJobCommand).build() {
};
__name(_CreateJobCommand, "CreateJobCommand");
var CreateJobCommand = _CreateJobCommand;

// src/commands/CreateJobTemplateCommand.ts




var _CreateJobTemplateCommand = class _CreateJobTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateJobTemplate", {}).n("IoTClient", "CreateJobTemplateCommand").f(void 0, void 0).ser(se_CreateJobTemplateCommand).de(de_CreateJobTemplateCommand).build() {
};
__name(_CreateJobTemplateCommand, "CreateJobTemplateCommand");
var CreateJobTemplateCommand = _CreateJobTemplateCommand;

// src/commands/CreateKeysAndCertificateCommand.ts




var _CreateKeysAndCertificateCommand = class _CreateKeysAndCertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateKeysAndCertificate", {}).n("IoTClient", "CreateKeysAndCertificateCommand").f(void 0, CreateKeysAndCertificateResponseFilterSensitiveLog).ser(se_CreateKeysAndCertificateCommand).de(de_CreateKeysAndCertificateCommand).build() {
};
__name(_CreateKeysAndCertificateCommand, "CreateKeysAndCertificateCommand");
var CreateKeysAndCertificateCommand = _CreateKeysAndCertificateCommand;

// src/commands/CreateMitigationActionCommand.ts




var _CreateMitigationActionCommand = class _CreateMitigationActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateMitigationAction", {}).n("IoTClient", "CreateMitigationActionCommand").f(void 0, void 0).ser(se_CreateMitigationActionCommand).de(de_CreateMitigationActionCommand).build() {
};
__name(_CreateMitigationActionCommand, "CreateMitigationActionCommand");
var CreateMitigationActionCommand = _CreateMitigationActionCommand;

// src/commands/CreateOTAUpdateCommand.ts




var _CreateOTAUpdateCommand = class _CreateOTAUpdateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateOTAUpdate", {}).n("IoTClient", "CreateOTAUpdateCommand").f(void 0, void 0).ser(se_CreateOTAUpdateCommand).de(de_CreateOTAUpdateCommand).build() {
};
__name(_CreateOTAUpdateCommand, "CreateOTAUpdateCommand");
var CreateOTAUpdateCommand = _CreateOTAUpdateCommand;

// src/commands/CreatePackageCommand.ts




var _CreatePackageCommand = class _CreatePackageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreatePackage", {}).n("IoTClient", "CreatePackageCommand").f(CreatePackageRequestFilterSensitiveLog, CreatePackageResponseFilterSensitiveLog).ser(se_CreatePackageCommand).de(de_CreatePackageCommand).build() {
};
__name(_CreatePackageCommand, "CreatePackageCommand");
var CreatePackageCommand = _CreatePackageCommand;

// src/commands/CreatePackageVersionCommand.ts




var _CreatePackageVersionCommand = class _CreatePackageVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreatePackageVersion", {}).n("IoTClient", "CreatePackageVersionCommand").f(CreatePackageVersionRequestFilterSensitiveLog, CreatePackageVersionResponseFilterSensitiveLog).ser(se_CreatePackageVersionCommand).de(de_CreatePackageVersionCommand).build() {
};
__name(_CreatePackageVersionCommand, "CreatePackageVersionCommand");
var CreatePackageVersionCommand = _CreatePackageVersionCommand;

// src/commands/CreatePolicyCommand.ts




var _CreatePolicyCommand = class _CreatePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreatePolicy", {}).n("IoTClient", "CreatePolicyCommand").f(void 0, void 0).ser(se_CreatePolicyCommand).de(de_CreatePolicyCommand).build() {
};
__name(_CreatePolicyCommand, "CreatePolicyCommand");
var CreatePolicyCommand = _CreatePolicyCommand;

// src/commands/CreatePolicyVersionCommand.ts




var _CreatePolicyVersionCommand = class _CreatePolicyVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreatePolicyVersion", {}).n("IoTClient", "CreatePolicyVersionCommand").f(void 0, void 0).ser(se_CreatePolicyVersionCommand).de(de_CreatePolicyVersionCommand).build() {
};
__name(_CreatePolicyVersionCommand, "CreatePolicyVersionCommand");
var CreatePolicyVersionCommand = _CreatePolicyVersionCommand;

// src/commands/CreateProvisioningClaimCommand.ts




var _CreateProvisioningClaimCommand = class _CreateProvisioningClaimCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateProvisioningClaim", {}).n("IoTClient", "CreateProvisioningClaimCommand").f(void 0, CreateProvisioningClaimResponseFilterSensitiveLog).ser(se_CreateProvisioningClaimCommand).de(de_CreateProvisioningClaimCommand).build() {
};
__name(_CreateProvisioningClaimCommand, "CreateProvisioningClaimCommand");
var CreateProvisioningClaimCommand = _CreateProvisioningClaimCommand;

// src/commands/CreateProvisioningTemplateCommand.ts




var _CreateProvisioningTemplateCommand = class _CreateProvisioningTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateProvisioningTemplate", {}).n("IoTClient", "CreateProvisioningTemplateCommand").f(void 0, void 0).ser(se_CreateProvisioningTemplateCommand).de(de_CreateProvisioningTemplateCommand).build() {
};
__name(_CreateProvisioningTemplateCommand, "CreateProvisioningTemplateCommand");
var CreateProvisioningTemplateCommand = _CreateProvisioningTemplateCommand;

// src/commands/CreateProvisioningTemplateVersionCommand.ts




var _CreateProvisioningTemplateVersionCommand = class _CreateProvisioningTemplateVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateProvisioningTemplateVersion", {}).n("IoTClient", "CreateProvisioningTemplateVersionCommand").f(void 0, void 0).ser(se_CreateProvisioningTemplateVersionCommand).de(de_CreateProvisioningTemplateVersionCommand).build() {
};
__name(_CreateProvisioningTemplateVersionCommand, "CreateProvisioningTemplateVersionCommand");
var CreateProvisioningTemplateVersionCommand = _CreateProvisioningTemplateVersionCommand;

// src/commands/CreateRoleAliasCommand.ts




var _CreateRoleAliasCommand = class _CreateRoleAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateRoleAlias", {}).n("IoTClient", "CreateRoleAliasCommand").f(void 0, void 0).ser(se_CreateRoleAliasCommand).de(de_CreateRoleAliasCommand).build() {
};
__name(_CreateRoleAliasCommand, "CreateRoleAliasCommand");
var CreateRoleAliasCommand = _CreateRoleAliasCommand;

// src/commands/CreateScheduledAuditCommand.ts




var _CreateScheduledAuditCommand = class _CreateScheduledAuditCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateScheduledAudit", {}).n("IoTClient", "CreateScheduledAuditCommand").f(void 0, void 0).ser(se_CreateScheduledAuditCommand).de(de_CreateScheduledAuditCommand).build() {
};
__name(_CreateScheduledAuditCommand, "CreateScheduledAuditCommand");
var CreateScheduledAuditCommand = _CreateScheduledAuditCommand;

// src/commands/CreateSecurityProfileCommand.ts




var _CreateSecurityProfileCommand = class _CreateSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateSecurityProfile", {}).n("IoTClient", "CreateSecurityProfileCommand").f(void 0, void 0).ser(se_CreateSecurityProfileCommand).de(de_CreateSecurityProfileCommand).build() {
};
__name(_CreateSecurityProfileCommand, "CreateSecurityProfileCommand");
var CreateSecurityProfileCommand = _CreateSecurityProfileCommand;

// src/commands/CreateStreamCommand.ts




var _CreateStreamCommand = class _CreateStreamCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateStream", {}).n("IoTClient", "CreateStreamCommand").f(void 0, void 0).ser(se_CreateStreamCommand).de(de_CreateStreamCommand).build() {
};
__name(_CreateStreamCommand, "CreateStreamCommand");
var CreateStreamCommand = _CreateStreamCommand;

// src/commands/CreateThingCommand.ts




var _CreateThingCommand = class _CreateThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateThing", {}).n("IoTClient", "CreateThingCommand").f(void 0, void 0).ser(se_CreateThingCommand).de(de_CreateThingCommand).build() {
};
__name(_CreateThingCommand, "CreateThingCommand");
var CreateThingCommand = _CreateThingCommand;

// src/commands/CreateThingGroupCommand.ts




var _CreateThingGroupCommand = class _CreateThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateThingGroup", {}).n("IoTClient", "CreateThingGroupCommand").f(void 0, void 0).ser(se_CreateThingGroupCommand).de(de_CreateThingGroupCommand).build() {
};
__name(_CreateThingGroupCommand, "CreateThingGroupCommand");
var CreateThingGroupCommand = _CreateThingGroupCommand;

// src/commands/CreateThingTypeCommand.ts




var _CreateThingTypeCommand = class _CreateThingTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateThingType", {}).n("IoTClient", "CreateThingTypeCommand").f(void 0, void 0).ser(se_CreateThingTypeCommand).de(de_CreateThingTypeCommand).build() {
};
__name(_CreateThingTypeCommand, "CreateThingTypeCommand");
var CreateThingTypeCommand = _CreateThingTypeCommand;

// src/commands/CreateTopicRuleCommand.ts




var _CreateTopicRuleCommand = class _CreateTopicRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateTopicRule", {}).n("IoTClient", "CreateTopicRuleCommand").f(void 0, void 0).ser(se_CreateTopicRuleCommand).de(de_CreateTopicRuleCommand).build() {
};
__name(_CreateTopicRuleCommand, "CreateTopicRuleCommand");
var CreateTopicRuleCommand = _CreateTopicRuleCommand;

// src/commands/CreateTopicRuleDestinationCommand.ts




var _CreateTopicRuleDestinationCommand = class _CreateTopicRuleDestinationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "CreateTopicRuleDestination", {}).n("IoTClient", "CreateTopicRuleDestinationCommand").f(void 0, void 0).ser(se_CreateTopicRuleDestinationCommand).de(de_CreateTopicRuleDestinationCommand).build() {
};
__name(_CreateTopicRuleDestinationCommand, "CreateTopicRuleDestinationCommand");
var CreateTopicRuleDestinationCommand = _CreateTopicRuleDestinationCommand;

// src/commands/DeleteAccountAuditConfigurationCommand.ts




var _DeleteAccountAuditConfigurationCommand = class _DeleteAccountAuditConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteAccountAuditConfiguration", {}).n("IoTClient", "DeleteAccountAuditConfigurationCommand").f(void 0, void 0).ser(se_DeleteAccountAuditConfigurationCommand).de(de_DeleteAccountAuditConfigurationCommand).build() {
};
__name(_DeleteAccountAuditConfigurationCommand, "DeleteAccountAuditConfigurationCommand");
var DeleteAccountAuditConfigurationCommand = _DeleteAccountAuditConfigurationCommand;

// src/commands/DeleteAuditSuppressionCommand.ts




var _DeleteAuditSuppressionCommand = class _DeleteAuditSuppressionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteAuditSuppression", {}).n("IoTClient", "DeleteAuditSuppressionCommand").f(void 0, void 0).ser(se_DeleteAuditSuppressionCommand).de(de_DeleteAuditSuppressionCommand).build() {
};
__name(_DeleteAuditSuppressionCommand, "DeleteAuditSuppressionCommand");
var DeleteAuditSuppressionCommand = _DeleteAuditSuppressionCommand;

// src/commands/DeleteAuthorizerCommand.ts




var _DeleteAuthorizerCommand = class _DeleteAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteAuthorizer", {}).n("IoTClient", "DeleteAuthorizerCommand").f(void 0, void 0).ser(se_DeleteAuthorizerCommand).de(de_DeleteAuthorizerCommand).build() {
};
__name(_DeleteAuthorizerCommand, "DeleteAuthorizerCommand");
var DeleteAuthorizerCommand = _DeleteAuthorizerCommand;

// src/commands/DeleteBillingGroupCommand.ts




var _DeleteBillingGroupCommand = class _DeleteBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteBillingGroup", {}).n("IoTClient", "DeleteBillingGroupCommand").f(void 0, void 0).ser(se_DeleteBillingGroupCommand).de(de_DeleteBillingGroupCommand).build() {
};
__name(_DeleteBillingGroupCommand, "DeleteBillingGroupCommand");
var DeleteBillingGroupCommand = _DeleteBillingGroupCommand;

// src/commands/DeleteCACertificateCommand.ts




var _DeleteCACertificateCommand = class _DeleteCACertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteCACertificate", {}).n("IoTClient", "DeleteCACertificateCommand").f(void 0, void 0).ser(se_DeleteCACertificateCommand).de(de_DeleteCACertificateCommand).build() {
};
__name(_DeleteCACertificateCommand, "DeleteCACertificateCommand");
var DeleteCACertificateCommand = _DeleteCACertificateCommand;

// src/commands/DeleteCertificateCommand.ts




var _DeleteCertificateCommand = class _DeleteCertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteCertificate", {}).n("IoTClient", "DeleteCertificateCommand").f(void 0, void 0).ser(se_DeleteCertificateCommand).de(de_DeleteCertificateCommand).build() {
};
__name(_DeleteCertificateCommand, "DeleteCertificateCommand");
var DeleteCertificateCommand = _DeleteCertificateCommand;

// src/commands/DeleteCertificateProviderCommand.ts




var _DeleteCertificateProviderCommand = class _DeleteCertificateProviderCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteCertificateProvider", {}).n("IoTClient", "DeleteCertificateProviderCommand").f(void 0, void 0).ser(se_DeleteCertificateProviderCommand).de(de_DeleteCertificateProviderCommand).build() {
};
__name(_DeleteCertificateProviderCommand, "DeleteCertificateProviderCommand");
var DeleteCertificateProviderCommand = _DeleteCertificateProviderCommand;

// src/commands/DeleteCustomMetricCommand.ts




var _DeleteCustomMetricCommand = class _DeleteCustomMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteCustomMetric", {}).n("IoTClient", "DeleteCustomMetricCommand").f(void 0, void 0).ser(se_DeleteCustomMetricCommand).de(de_DeleteCustomMetricCommand).build() {
};
__name(_DeleteCustomMetricCommand, "DeleteCustomMetricCommand");
var DeleteCustomMetricCommand = _DeleteCustomMetricCommand;

// src/commands/DeleteDimensionCommand.ts




var _DeleteDimensionCommand = class _DeleteDimensionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteDimension", {}).n("IoTClient", "DeleteDimensionCommand").f(void 0, void 0).ser(se_DeleteDimensionCommand).de(de_DeleteDimensionCommand).build() {
};
__name(_DeleteDimensionCommand, "DeleteDimensionCommand");
var DeleteDimensionCommand = _DeleteDimensionCommand;

// src/commands/DeleteDomainConfigurationCommand.ts




var _DeleteDomainConfigurationCommand = class _DeleteDomainConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteDomainConfiguration", {}).n("IoTClient", "DeleteDomainConfigurationCommand").f(void 0, void 0).ser(se_DeleteDomainConfigurationCommand).de(de_DeleteDomainConfigurationCommand).build() {
};
__name(_DeleteDomainConfigurationCommand, "DeleteDomainConfigurationCommand");
var DeleteDomainConfigurationCommand = _DeleteDomainConfigurationCommand;

// src/commands/DeleteDynamicThingGroupCommand.ts




var _DeleteDynamicThingGroupCommand = class _DeleteDynamicThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteDynamicThingGroup", {}).n("IoTClient", "DeleteDynamicThingGroupCommand").f(void 0, void 0).ser(se_DeleteDynamicThingGroupCommand).de(de_DeleteDynamicThingGroupCommand).build() {
};
__name(_DeleteDynamicThingGroupCommand, "DeleteDynamicThingGroupCommand");
var DeleteDynamicThingGroupCommand = _DeleteDynamicThingGroupCommand;

// src/commands/DeleteFleetMetricCommand.ts




var _DeleteFleetMetricCommand = class _DeleteFleetMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteFleetMetric", {}).n("IoTClient", "DeleteFleetMetricCommand").f(void 0, void 0).ser(se_DeleteFleetMetricCommand).de(de_DeleteFleetMetricCommand).build() {
};
__name(_DeleteFleetMetricCommand, "DeleteFleetMetricCommand");
var DeleteFleetMetricCommand = _DeleteFleetMetricCommand;

// src/commands/DeleteJobCommand.ts




var _DeleteJobCommand = class _DeleteJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteJob", {}).n("IoTClient", "DeleteJobCommand").f(void 0, void 0).ser(se_DeleteJobCommand).de(de_DeleteJobCommand).build() {
};
__name(_DeleteJobCommand, "DeleteJobCommand");
var DeleteJobCommand = _DeleteJobCommand;

// src/commands/DeleteJobExecutionCommand.ts




var _DeleteJobExecutionCommand = class _DeleteJobExecutionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteJobExecution", {}).n("IoTClient", "DeleteJobExecutionCommand").f(void 0, void 0).ser(se_DeleteJobExecutionCommand).de(de_DeleteJobExecutionCommand).build() {
};
__name(_DeleteJobExecutionCommand, "DeleteJobExecutionCommand");
var DeleteJobExecutionCommand = _DeleteJobExecutionCommand;

// src/commands/DeleteJobTemplateCommand.ts




var _DeleteJobTemplateCommand = class _DeleteJobTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteJobTemplate", {}).n("IoTClient", "DeleteJobTemplateCommand").f(void 0, void 0).ser(se_DeleteJobTemplateCommand).de(de_DeleteJobTemplateCommand).build() {
};
__name(_DeleteJobTemplateCommand, "DeleteJobTemplateCommand");
var DeleteJobTemplateCommand = _DeleteJobTemplateCommand;

// src/commands/DeleteMitigationActionCommand.ts




var _DeleteMitigationActionCommand = class _DeleteMitigationActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteMitigationAction", {}).n("IoTClient", "DeleteMitigationActionCommand").f(void 0, void 0).ser(se_DeleteMitigationActionCommand).de(de_DeleteMitigationActionCommand).build() {
};
__name(_DeleteMitigationActionCommand, "DeleteMitigationActionCommand");
var DeleteMitigationActionCommand = _DeleteMitigationActionCommand;

// src/commands/DeleteOTAUpdateCommand.ts




var _DeleteOTAUpdateCommand = class _DeleteOTAUpdateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteOTAUpdate", {}).n("IoTClient", "DeleteOTAUpdateCommand").f(void 0, void 0).ser(se_DeleteOTAUpdateCommand).de(de_DeleteOTAUpdateCommand).build() {
};
__name(_DeleteOTAUpdateCommand, "DeleteOTAUpdateCommand");
var DeleteOTAUpdateCommand = _DeleteOTAUpdateCommand;

// src/commands/DeletePackageCommand.ts




var _DeletePackageCommand = class _DeletePackageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeletePackage", {}).n("IoTClient", "DeletePackageCommand").f(void 0, void 0).ser(se_DeletePackageCommand).de(de_DeletePackageCommand).build() {
};
__name(_DeletePackageCommand, "DeletePackageCommand");
var DeletePackageCommand = _DeletePackageCommand;

// src/commands/DeletePackageVersionCommand.ts




var _DeletePackageVersionCommand = class _DeletePackageVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeletePackageVersion", {}).n("IoTClient", "DeletePackageVersionCommand").f(void 0, void 0).ser(se_DeletePackageVersionCommand).de(de_DeletePackageVersionCommand).build() {
};
__name(_DeletePackageVersionCommand, "DeletePackageVersionCommand");
var DeletePackageVersionCommand = _DeletePackageVersionCommand;

// src/commands/DeletePolicyCommand.ts




var _DeletePolicyCommand = class _DeletePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeletePolicy", {}).n("IoTClient", "DeletePolicyCommand").f(void 0, void 0).ser(se_DeletePolicyCommand).de(de_DeletePolicyCommand).build() {
};
__name(_DeletePolicyCommand, "DeletePolicyCommand");
var DeletePolicyCommand = _DeletePolicyCommand;

// src/commands/DeletePolicyVersionCommand.ts




var _DeletePolicyVersionCommand = class _DeletePolicyVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeletePolicyVersion", {}).n("IoTClient", "DeletePolicyVersionCommand").f(void 0, void 0).ser(se_DeletePolicyVersionCommand).de(de_DeletePolicyVersionCommand).build() {
};
__name(_DeletePolicyVersionCommand, "DeletePolicyVersionCommand");
var DeletePolicyVersionCommand = _DeletePolicyVersionCommand;

// src/commands/DeleteProvisioningTemplateCommand.ts




var _DeleteProvisioningTemplateCommand = class _DeleteProvisioningTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteProvisioningTemplate", {}).n("IoTClient", "DeleteProvisioningTemplateCommand").f(void 0, void 0).ser(se_DeleteProvisioningTemplateCommand).de(de_DeleteProvisioningTemplateCommand).build() {
};
__name(_DeleteProvisioningTemplateCommand, "DeleteProvisioningTemplateCommand");
var DeleteProvisioningTemplateCommand = _DeleteProvisioningTemplateCommand;

// src/commands/DeleteProvisioningTemplateVersionCommand.ts




var _DeleteProvisioningTemplateVersionCommand = class _DeleteProvisioningTemplateVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteProvisioningTemplateVersion", {}).n("IoTClient", "DeleteProvisioningTemplateVersionCommand").f(void 0, void 0).ser(se_DeleteProvisioningTemplateVersionCommand).de(de_DeleteProvisioningTemplateVersionCommand).build() {
};
__name(_DeleteProvisioningTemplateVersionCommand, "DeleteProvisioningTemplateVersionCommand");
var DeleteProvisioningTemplateVersionCommand = _DeleteProvisioningTemplateVersionCommand;

// src/commands/DeleteRegistrationCodeCommand.ts




var _DeleteRegistrationCodeCommand = class _DeleteRegistrationCodeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteRegistrationCode", {}).n("IoTClient", "DeleteRegistrationCodeCommand").f(void 0, void 0).ser(se_DeleteRegistrationCodeCommand).de(de_DeleteRegistrationCodeCommand).build() {
};
__name(_DeleteRegistrationCodeCommand, "DeleteRegistrationCodeCommand");
var DeleteRegistrationCodeCommand = _DeleteRegistrationCodeCommand;

// src/commands/DeleteRoleAliasCommand.ts




var _DeleteRoleAliasCommand = class _DeleteRoleAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteRoleAlias", {}).n("IoTClient", "DeleteRoleAliasCommand").f(void 0, void 0).ser(se_DeleteRoleAliasCommand).de(de_DeleteRoleAliasCommand).build() {
};
__name(_DeleteRoleAliasCommand, "DeleteRoleAliasCommand");
var DeleteRoleAliasCommand = _DeleteRoleAliasCommand;

// src/commands/DeleteScheduledAuditCommand.ts




var _DeleteScheduledAuditCommand = class _DeleteScheduledAuditCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteScheduledAudit", {}).n("IoTClient", "DeleteScheduledAuditCommand").f(void 0, void 0).ser(se_DeleteScheduledAuditCommand).de(de_DeleteScheduledAuditCommand).build() {
};
__name(_DeleteScheduledAuditCommand, "DeleteScheduledAuditCommand");
var DeleteScheduledAuditCommand = _DeleteScheduledAuditCommand;

// src/commands/DeleteSecurityProfileCommand.ts




var _DeleteSecurityProfileCommand = class _DeleteSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteSecurityProfile", {}).n("IoTClient", "DeleteSecurityProfileCommand").f(void 0, void 0).ser(se_DeleteSecurityProfileCommand).de(de_DeleteSecurityProfileCommand).build() {
};
__name(_DeleteSecurityProfileCommand, "DeleteSecurityProfileCommand");
var DeleteSecurityProfileCommand = _DeleteSecurityProfileCommand;

// src/commands/DeleteStreamCommand.ts




var _DeleteStreamCommand = class _DeleteStreamCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteStream", {}).n("IoTClient", "DeleteStreamCommand").f(void 0, void 0).ser(se_DeleteStreamCommand).de(de_DeleteStreamCommand).build() {
};
__name(_DeleteStreamCommand, "DeleteStreamCommand");
var DeleteStreamCommand = _DeleteStreamCommand;

// src/commands/DeleteThingCommand.ts




var _DeleteThingCommand = class _DeleteThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteThing", {}).n("IoTClient", "DeleteThingCommand").f(void 0, void 0).ser(se_DeleteThingCommand).de(de_DeleteThingCommand).build() {
};
__name(_DeleteThingCommand, "DeleteThingCommand");
var DeleteThingCommand = _DeleteThingCommand;

// src/commands/DeleteThingGroupCommand.ts




var _DeleteThingGroupCommand = class _DeleteThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteThingGroup", {}).n("IoTClient", "DeleteThingGroupCommand").f(void 0, void 0).ser(se_DeleteThingGroupCommand).de(de_DeleteThingGroupCommand).build() {
};
__name(_DeleteThingGroupCommand, "DeleteThingGroupCommand");
var DeleteThingGroupCommand = _DeleteThingGroupCommand;

// src/commands/DeleteThingTypeCommand.ts




var _DeleteThingTypeCommand = class _DeleteThingTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteThingType", {}).n("IoTClient", "DeleteThingTypeCommand").f(void 0, void 0).ser(se_DeleteThingTypeCommand).de(de_DeleteThingTypeCommand).build() {
};
__name(_DeleteThingTypeCommand, "DeleteThingTypeCommand");
var DeleteThingTypeCommand = _DeleteThingTypeCommand;

// src/commands/DeleteTopicRuleCommand.ts




var _DeleteTopicRuleCommand = class _DeleteTopicRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteTopicRule", {}).n("IoTClient", "DeleteTopicRuleCommand").f(void 0, void 0).ser(se_DeleteTopicRuleCommand).de(de_DeleteTopicRuleCommand).build() {
};
__name(_DeleteTopicRuleCommand, "DeleteTopicRuleCommand");
var DeleteTopicRuleCommand = _DeleteTopicRuleCommand;

// src/commands/DeleteTopicRuleDestinationCommand.ts




var _DeleteTopicRuleDestinationCommand = class _DeleteTopicRuleDestinationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteTopicRuleDestination", {}).n("IoTClient", "DeleteTopicRuleDestinationCommand").f(void 0, void 0).ser(se_DeleteTopicRuleDestinationCommand).de(de_DeleteTopicRuleDestinationCommand).build() {
};
__name(_DeleteTopicRuleDestinationCommand, "DeleteTopicRuleDestinationCommand");
var DeleteTopicRuleDestinationCommand = _DeleteTopicRuleDestinationCommand;

// src/commands/DeleteV2LoggingLevelCommand.ts




var _DeleteV2LoggingLevelCommand = class _DeleteV2LoggingLevelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeleteV2LoggingLevel", {}).n("IoTClient", "DeleteV2LoggingLevelCommand").f(void 0, void 0).ser(se_DeleteV2LoggingLevelCommand).de(de_DeleteV2LoggingLevelCommand).build() {
};
__name(_DeleteV2LoggingLevelCommand, "DeleteV2LoggingLevelCommand");
var DeleteV2LoggingLevelCommand = _DeleteV2LoggingLevelCommand;

// src/commands/DeprecateThingTypeCommand.ts




var _DeprecateThingTypeCommand = class _DeprecateThingTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DeprecateThingType", {}).n("IoTClient", "DeprecateThingTypeCommand").f(void 0, void 0).ser(se_DeprecateThingTypeCommand).de(de_DeprecateThingTypeCommand).build() {
};
__name(_DeprecateThingTypeCommand, "DeprecateThingTypeCommand");
var DeprecateThingTypeCommand = _DeprecateThingTypeCommand;

// src/commands/DescribeAccountAuditConfigurationCommand.ts




var _DescribeAccountAuditConfigurationCommand = class _DescribeAccountAuditConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeAccountAuditConfiguration", {}).n("IoTClient", "DescribeAccountAuditConfigurationCommand").f(void 0, void 0).ser(se_DescribeAccountAuditConfigurationCommand).de(de_DescribeAccountAuditConfigurationCommand).build() {
};
__name(_DescribeAccountAuditConfigurationCommand, "DescribeAccountAuditConfigurationCommand");
var DescribeAccountAuditConfigurationCommand = _DescribeAccountAuditConfigurationCommand;

// src/commands/DescribeAuditFindingCommand.ts




var _DescribeAuditFindingCommand = class _DescribeAuditFindingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeAuditFinding", {}).n("IoTClient", "DescribeAuditFindingCommand").f(void 0, void 0).ser(se_DescribeAuditFindingCommand).de(de_DescribeAuditFindingCommand).build() {
};
__name(_DescribeAuditFindingCommand, "DescribeAuditFindingCommand");
var DescribeAuditFindingCommand = _DescribeAuditFindingCommand;

// src/commands/DescribeAuditMitigationActionsTaskCommand.ts




var _DescribeAuditMitigationActionsTaskCommand = class _DescribeAuditMitigationActionsTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeAuditMitigationActionsTask", {}).n("IoTClient", "DescribeAuditMitigationActionsTaskCommand").f(void 0, void 0).ser(se_DescribeAuditMitigationActionsTaskCommand).de(de_DescribeAuditMitigationActionsTaskCommand).build() {
};
__name(_DescribeAuditMitigationActionsTaskCommand, "DescribeAuditMitigationActionsTaskCommand");
var DescribeAuditMitigationActionsTaskCommand = _DescribeAuditMitigationActionsTaskCommand;

// src/commands/DescribeAuditSuppressionCommand.ts




var _DescribeAuditSuppressionCommand = class _DescribeAuditSuppressionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeAuditSuppression", {}).n("IoTClient", "DescribeAuditSuppressionCommand").f(void 0, void 0).ser(se_DescribeAuditSuppressionCommand).de(de_DescribeAuditSuppressionCommand).build() {
};
__name(_DescribeAuditSuppressionCommand, "DescribeAuditSuppressionCommand");
var DescribeAuditSuppressionCommand = _DescribeAuditSuppressionCommand;

// src/commands/DescribeAuditTaskCommand.ts




var _DescribeAuditTaskCommand = class _DescribeAuditTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeAuditTask", {}).n("IoTClient", "DescribeAuditTaskCommand").f(void 0, void 0).ser(se_DescribeAuditTaskCommand).de(de_DescribeAuditTaskCommand).build() {
};
__name(_DescribeAuditTaskCommand, "DescribeAuditTaskCommand");
var DescribeAuditTaskCommand = _DescribeAuditTaskCommand;

// src/commands/DescribeAuthorizerCommand.ts




var _DescribeAuthorizerCommand = class _DescribeAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeAuthorizer", {}).n("IoTClient", "DescribeAuthorizerCommand").f(void 0, void 0).ser(se_DescribeAuthorizerCommand).de(de_DescribeAuthorizerCommand).build() {
};
__name(_DescribeAuthorizerCommand, "DescribeAuthorizerCommand");
var DescribeAuthorizerCommand = _DescribeAuthorizerCommand;

// src/commands/DescribeBillingGroupCommand.ts




var _DescribeBillingGroupCommand = class _DescribeBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeBillingGroup", {}).n("IoTClient", "DescribeBillingGroupCommand").f(void 0, void 0).ser(se_DescribeBillingGroupCommand).de(de_DescribeBillingGroupCommand).build() {
};
__name(_DescribeBillingGroupCommand, "DescribeBillingGroupCommand");
var DescribeBillingGroupCommand = _DescribeBillingGroupCommand;

// src/commands/DescribeCACertificateCommand.ts




var _DescribeCACertificateCommand = class _DescribeCACertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeCACertificate", {}).n("IoTClient", "DescribeCACertificateCommand").f(void 0, void 0).ser(se_DescribeCACertificateCommand).de(de_DescribeCACertificateCommand).build() {
};
__name(_DescribeCACertificateCommand, "DescribeCACertificateCommand");
var DescribeCACertificateCommand = _DescribeCACertificateCommand;

// src/commands/DescribeCertificateCommand.ts




var _DescribeCertificateCommand = class _DescribeCertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeCertificate", {}).n("IoTClient", "DescribeCertificateCommand").f(void 0, void 0).ser(se_DescribeCertificateCommand).de(de_DescribeCertificateCommand).build() {
};
__name(_DescribeCertificateCommand, "DescribeCertificateCommand");
var DescribeCertificateCommand = _DescribeCertificateCommand;

// src/commands/DescribeCertificateProviderCommand.ts




var _DescribeCertificateProviderCommand = class _DescribeCertificateProviderCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeCertificateProvider", {}).n("IoTClient", "DescribeCertificateProviderCommand").f(void 0, void 0).ser(se_DescribeCertificateProviderCommand).de(de_DescribeCertificateProviderCommand).build() {
};
__name(_DescribeCertificateProviderCommand, "DescribeCertificateProviderCommand");
var DescribeCertificateProviderCommand = _DescribeCertificateProviderCommand;

// src/commands/DescribeCustomMetricCommand.ts




var _DescribeCustomMetricCommand = class _DescribeCustomMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeCustomMetric", {}).n("IoTClient", "DescribeCustomMetricCommand").f(void 0, void 0).ser(se_DescribeCustomMetricCommand).de(de_DescribeCustomMetricCommand).build() {
};
__name(_DescribeCustomMetricCommand, "DescribeCustomMetricCommand");
var DescribeCustomMetricCommand = _DescribeCustomMetricCommand;

// src/commands/DescribeDefaultAuthorizerCommand.ts




var _DescribeDefaultAuthorizerCommand = class _DescribeDefaultAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeDefaultAuthorizer", {}).n("IoTClient", "DescribeDefaultAuthorizerCommand").f(void 0, void 0).ser(se_DescribeDefaultAuthorizerCommand).de(de_DescribeDefaultAuthorizerCommand).build() {
};
__name(_DescribeDefaultAuthorizerCommand, "DescribeDefaultAuthorizerCommand");
var DescribeDefaultAuthorizerCommand = _DescribeDefaultAuthorizerCommand;

// src/commands/DescribeDetectMitigationActionsTaskCommand.ts




var _DescribeDetectMitigationActionsTaskCommand = class _DescribeDetectMitigationActionsTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeDetectMitigationActionsTask", {}).n("IoTClient", "DescribeDetectMitigationActionsTaskCommand").f(void 0, void 0).ser(se_DescribeDetectMitigationActionsTaskCommand).de(de_DescribeDetectMitigationActionsTaskCommand).build() {
};
__name(_DescribeDetectMitigationActionsTaskCommand, "DescribeDetectMitigationActionsTaskCommand");
var DescribeDetectMitigationActionsTaskCommand = _DescribeDetectMitigationActionsTaskCommand;

// src/commands/DescribeDimensionCommand.ts




var _DescribeDimensionCommand = class _DescribeDimensionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeDimension", {}).n("IoTClient", "DescribeDimensionCommand").f(void 0, void 0).ser(se_DescribeDimensionCommand).de(de_DescribeDimensionCommand).build() {
};
__name(_DescribeDimensionCommand, "DescribeDimensionCommand");
var DescribeDimensionCommand = _DescribeDimensionCommand;

// src/commands/DescribeDomainConfigurationCommand.ts




var _DescribeDomainConfigurationCommand = class _DescribeDomainConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeDomainConfiguration", {}).n("IoTClient", "DescribeDomainConfigurationCommand").f(void 0, void 0).ser(se_DescribeDomainConfigurationCommand).de(de_DescribeDomainConfigurationCommand).build() {
};
__name(_DescribeDomainConfigurationCommand, "DescribeDomainConfigurationCommand");
var DescribeDomainConfigurationCommand = _DescribeDomainConfigurationCommand;

// src/commands/DescribeEndpointCommand.ts




var _DescribeEndpointCommand = class _DescribeEndpointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeEndpoint", {}).n("IoTClient", "DescribeEndpointCommand").f(void 0, void 0).ser(se_DescribeEndpointCommand).de(de_DescribeEndpointCommand).build() {
};
__name(_DescribeEndpointCommand, "DescribeEndpointCommand");
var DescribeEndpointCommand = _DescribeEndpointCommand;

// src/commands/DescribeEventConfigurationsCommand.ts




var _DescribeEventConfigurationsCommand = class _DescribeEventConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeEventConfigurations", {}).n("IoTClient", "DescribeEventConfigurationsCommand").f(void 0, void 0).ser(se_DescribeEventConfigurationsCommand).de(de_DescribeEventConfigurationsCommand).build() {
};
__name(_DescribeEventConfigurationsCommand, "DescribeEventConfigurationsCommand");
var DescribeEventConfigurationsCommand = _DescribeEventConfigurationsCommand;

// src/commands/DescribeFleetMetricCommand.ts




var _DescribeFleetMetricCommand = class _DescribeFleetMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeFleetMetric", {}).n("IoTClient", "DescribeFleetMetricCommand").f(void 0, void 0).ser(se_DescribeFleetMetricCommand).de(de_DescribeFleetMetricCommand).build() {
};
__name(_DescribeFleetMetricCommand, "DescribeFleetMetricCommand");
var DescribeFleetMetricCommand = _DescribeFleetMetricCommand;

// src/commands/DescribeIndexCommand.ts




var _DescribeIndexCommand = class _DescribeIndexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeIndex", {}).n("IoTClient", "DescribeIndexCommand").f(void 0, void 0).ser(se_DescribeIndexCommand).de(de_DescribeIndexCommand).build() {
};
__name(_DescribeIndexCommand, "DescribeIndexCommand");
var DescribeIndexCommand = _DescribeIndexCommand;

// src/commands/DescribeJobCommand.ts




var _DescribeJobCommand = class _DescribeJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeJob", {}).n("IoTClient", "DescribeJobCommand").f(void 0, void 0).ser(se_DescribeJobCommand).de(de_DescribeJobCommand).build() {
};
__name(_DescribeJobCommand, "DescribeJobCommand");
var DescribeJobCommand = _DescribeJobCommand;

// src/commands/DescribeJobExecutionCommand.ts




var _DescribeJobExecutionCommand = class _DescribeJobExecutionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeJobExecution", {}).n("IoTClient", "DescribeJobExecutionCommand").f(void 0, void 0).ser(se_DescribeJobExecutionCommand).de(de_DescribeJobExecutionCommand).build() {
};
__name(_DescribeJobExecutionCommand, "DescribeJobExecutionCommand");
var DescribeJobExecutionCommand = _DescribeJobExecutionCommand;

// src/commands/DescribeJobTemplateCommand.ts




var _DescribeJobTemplateCommand = class _DescribeJobTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeJobTemplate", {}).n("IoTClient", "DescribeJobTemplateCommand").f(void 0, void 0).ser(se_DescribeJobTemplateCommand).de(de_DescribeJobTemplateCommand).build() {
};
__name(_DescribeJobTemplateCommand, "DescribeJobTemplateCommand");
var DescribeJobTemplateCommand = _DescribeJobTemplateCommand;

// src/commands/DescribeManagedJobTemplateCommand.ts




var _DescribeManagedJobTemplateCommand = class _DescribeManagedJobTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeManagedJobTemplate", {}).n("IoTClient", "DescribeManagedJobTemplateCommand").f(void 0, void 0).ser(se_DescribeManagedJobTemplateCommand).de(de_DescribeManagedJobTemplateCommand).build() {
};
__name(_DescribeManagedJobTemplateCommand, "DescribeManagedJobTemplateCommand");
var DescribeManagedJobTemplateCommand = _DescribeManagedJobTemplateCommand;

// src/commands/DescribeMitigationActionCommand.ts




var _DescribeMitigationActionCommand = class _DescribeMitigationActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeMitigationAction", {}).n("IoTClient", "DescribeMitigationActionCommand").f(void 0, void 0).ser(se_DescribeMitigationActionCommand).de(de_DescribeMitigationActionCommand).build() {
};
__name(_DescribeMitigationActionCommand, "DescribeMitigationActionCommand");
var DescribeMitigationActionCommand = _DescribeMitigationActionCommand;

// src/commands/DescribeProvisioningTemplateCommand.ts




var _DescribeProvisioningTemplateCommand = class _DescribeProvisioningTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeProvisioningTemplate", {}).n("IoTClient", "DescribeProvisioningTemplateCommand").f(void 0, void 0).ser(se_DescribeProvisioningTemplateCommand).de(de_DescribeProvisioningTemplateCommand).build() {
};
__name(_DescribeProvisioningTemplateCommand, "DescribeProvisioningTemplateCommand");
var DescribeProvisioningTemplateCommand = _DescribeProvisioningTemplateCommand;

// src/commands/DescribeProvisioningTemplateVersionCommand.ts




var _DescribeProvisioningTemplateVersionCommand = class _DescribeProvisioningTemplateVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeProvisioningTemplateVersion", {}).n("IoTClient", "DescribeProvisioningTemplateVersionCommand").f(void 0, void 0).ser(se_DescribeProvisioningTemplateVersionCommand).de(de_DescribeProvisioningTemplateVersionCommand).build() {
};
__name(_DescribeProvisioningTemplateVersionCommand, "DescribeProvisioningTemplateVersionCommand");
var DescribeProvisioningTemplateVersionCommand = _DescribeProvisioningTemplateVersionCommand;

// src/commands/DescribeRoleAliasCommand.ts




var _DescribeRoleAliasCommand = class _DescribeRoleAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeRoleAlias", {}).n("IoTClient", "DescribeRoleAliasCommand").f(void 0, void 0).ser(se_DescribeRoleAliasCommand).de(de_DescribeRoleAliasCommand).build() {
};
__name(_DescribeRoleAliasCommand, "DescribeRoleAliasCommand");
var DescribeRoleAliasCommand = _DescribeRoleAliasCommand;

// src/commands/DescribeScheduledAuditCommand.ts




var _DescribeScheduledAuditCommand = class _DescribeScheduledAuditCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeScheduledAudit", {}).n("IoTClient", "DescribeScheduledAuditCommand").f(void 0, void 0).ser(se_DescribeScheduledAuditCommand).de(de_DescribeScheduledAuditCommand).build() {
};
__name(_DescribeScheduledAuditCommand, "DescribeScheduledAuditCommand");
var DescribeScheduledAuditCommand = _DescribeScheduledAuditCommand;

// src/commands/DescribeSecurityProfileCommand.ts




var _DescribeSecurityProfileCommand = class _DescribeSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeSecurityProfile", {}).n("IoTClient", "DescribeSecurityProfileCommand").f(void 0, void 0).ser(se_DescribeSecurityProfileCommand).de(de_DescribeSecurityProfileCommand).build() {
};
__name(_DescribeSecurityProfileCommand, "DescribeSecurityProfileCommand");
var DescribeSecurityProfileCommand = _DescribeSecurityProfileCommand;

// src/commands/DescribeStreamCommand.ts




var _DescribeStreamCommand = class _DescribeStreamCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeStream", {}).n("IoTClient", "DescribeStreamCommand").f(void 0, void 0).ser(se_DescribeStreamCommand).de(de_DescribeStreamCommand).build() {
};
__name(_DescribeStreamCommand, "DescribeStreamCommand");
var DescribeStreamCommand = _DescribeStreamCommand;

// src/commands/DescribeThingCommand.ts




var _DescribeThingCommand = class _DescribeThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeThing", {}).n("IoTClient", "DescribeThingCommand").f(void 0, void 0).ser(se_DescribeThingCommand).de(de_DescribeThingCommand).build() {
};
__name(_DescribeThingCommand, "DescribeThingCommand");
var DescribeThingCommand = _DescribeThingCommand;

// src/commands/DescribeThingGroupCommand.ts




var _DescribeThingGroupCommand = class _DescribeThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeThingGroup", {}).n("IoTClient", "DescribeThingGroupCommand").f(void 0, void 0).ser(se_DescribeThingGroupCommand).de(de_DescribeThingGroupCommand).build() {
};
__name(_DescribeThingGroupCommand, "DescribeThingGroupCommand");
var DescribeThingGroupCommand = _DescribeThingGroupCommand;

// src/commands/DescribeThingRegistrationTaskCommand.ts




var _DescribeThingRegistrationTaskCommand = class _DescribeThingRegistrationTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeThingRegistrationTask", {}).n("IoTClient", "DescribeThingRegistrationTaskCommand").f(void 0, void 0).ser(se_DescribeThingRegistrationTaskCommand).de(de_DescribeThingRegistrationTaskCommand).build() {
};
__name(_DescribeThingRegistrationTaskCommand, "DescribeThingRegistrationTaskCommand");
var DescribeThingRegistrationTaskCommand = _DescribeThingRegistrationTaskCommand;

// src/commands/DescribeThingTypeCommand.ts




var _DescribeThingTypeCommand = class _DescribeThingTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DescribeThingType", {}).n("IoTClient", "DescribeThingTypeCommand").f(void 0, void 0).ser(se_DescribeThingTypeCommand).de(de_DescribeThingTypeCommand).build() {
};
__name(_DescribeThingTypeCommand, "DescribeThingTypeCommand");
var DescribeThingTypeCommand = _DescribeThingTypeCommand;

// src/commands/DetachPolicyCommand.ts




var _DetachPolicyCommand = class _DetachPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DetachPolicy", {}).n("IoTClient", "DetachPolicyCommand").f(void 0, void 0).ser(se_DetachPolicyCommand).de(de_DetachPolicyCommand).build() {
};
__name(_DetachPolicyCommand, "DetachPolicyCommand");
var DetachPolicyCommand = _DetachPolicyCommand;

// src/commands/DetachPrincipalPolicyCommand.ts




var _DetachPrincipalPolicyCommand = class _DetachPrincipalPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DetachPrincipalPolicy", {}).n("IoTClient", "DetachPrincipalPolicyCommand").f(void 0, void 0).ser(se_DetachPrincipalPolicyCommand).de(de_DetachPrincipalPolicyCommand).build() {
};
__name(_DetachPrincipalPolicyCommand, "DetachPrincipalPolicyCommand");
var DetachPrincipalPolicyCommand = _DetachPrincipalPolicyCommand;

// src/commands/DetachSecurityProfileCommand.ts




var _DetachSecurityProfileCommand = class _DetachSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DetachSecurityProfile", {}).n("IoTClient", "DetachSecurityProfileCommand").f(void 0, void 0).ser(se_DetachSecurityProfileCommand).de(de_DetachSecurityProfileCommand).build() {
};
__name(_DetachSecurityProfileCommand, "DetachSecurityProfileCommand");
var DetachSecurityProfileCommand = _DetachSecurityProfileCommand;

// src/commands/DetachThingPrincipalCommand.ts




var _DetachThingPrincipalCommand = class _DetachThingPrincipalCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DetachThingPrincipal", {}).n("IoTClient", "DetachThingPrincipalCommand").f(void 0, void 0).ser(se_DetachThingPrincipalCommand).de(de_DetachThingPrincipalCommand).build() {
};
__name(_DetachThingPrincipalCommand, "DetachThingPrincipalCommand");
var DetachThingPrincipalCommand = _DetachThingPrincipalCommand;

// src/commands/DisableTopicRuleCommand.ts




var _DisableTopicRuleCommand = class _DisableTopicRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "DisableTopicRule", {}).n("IoTClient", "DisableTopicRuleCommand").f(void 0, void 0).ser(se_DisableTopicRuleCommand).de(de_DisableTopicRuleCommand).build() {
};
__name(_DisableTopicRuleCommand, "DisableTopicRuleCommand");
var DisableTopicRuleCommand = _DisableTopicRuleCommand;

// src/commands/EnableTopicRuleCommand.ts




var _EnableTopicRuleCommand = class _EnableTopicRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "EnableTopicRule", {}).n("IoTClient", "EnableTopicRuleCommand").f(void 0, void 0).ser(se_EnableTopicRuleCommand).de(de_EnableTopicRuleCommand).build() {
};
__name(_EnableTopicRuleCommand, "EnableTopicRuleCommand");
var EnableTopicRuleCommand = _EnableTopicRuleCommand;

// src/commands/GetBehaviorModelTrainingSummariesCommand.ts




var _GetBehaviorModelTrainingSummariesCommand = class _GetBehaviorModelTrainingSummariesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetBehaviorModelTrainingSummaries", {}).n("IoTClient", "GetBehaviorModelTrainingSummariesCommand").f(void 0, void 0).ser(se_GetBehaviorModelTrainingSummariesCommand).de(de_GetBehaviorModelTrainingSummariesCommand).build() {
};
__name(_GetBehaviorModelTrainingSummariesCommand, "GetBehaviorModelTrainingSummariesCommand");
var GetBehaviorModelTrainingSummariesCommand = _GetBehaviorModelTrainingSummariesCommand;

// src/commands/GetBucketsAggregationCommand.ts




var _GetBucketsAggregationCommand = class _GetBucketsAggregationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetBucketsAggregation", {}).n("IoTClient", "GetBucketsAggregationCommand").f(void 0, void 0).ser(se_GetBucketsAggregationCommand).de(de_GetBucketsAggregationCommand).build() {
};
__name(_GetBucketsAggregationCommand, "GetBucketsAggregationCommand");
var GetBucketsAggregationCommand = _GetBucketsAggregationCommand;

// src/commands/GetCardinalityCommand.ts




var _GetCardinalityCommand = class _GetCardinalityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetCardinality", {}).n("IoTClient", "GetCardinalityCommand").f(void 0, void 0).ser(se_GetCardinalityCommand).de(de_GetCardinalityCommand).build() {
};
__name(_GetCardinalityCommand, "GetCardinalityCommand");
var GetCardinalityCommand = _GetCardinalityCommand;

// src/commands/GetEffectivePoliciesCommand.ts




var _GetEffectivePoliciesCommand = class _GetEffectivePoliciesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetEffectivePolicies", {}).n("IoTClient", "GetEffectivePoliciesCommand").f(void 0, void 0).ser(se_GetEffectivePoliciesCommand).de(de_GetEffectivePoliciesCommand).build() {
};
__name(_GetEffectivePoliciesCommand, "GetEffectivePoliciesCommand");
var GetEffectivePoliciesCommand = _GetEffectivePoliciesCommand;

// src/commands/GetIndexingConfigurationCommand.ts




var _GetIndexingConfigurationCommand = class _GetIndexingConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetIndexingConfiguration", {}).n("IoTClient", "GetIndexingConfigurationCommand").f(void 0, void 0).ser(se_GetIndexingConfigurationCommand).de(de_GetIndexingConfigurationCommand).build() {
};
__name(_GetIndexingConfigurationCommand, "GetIndexingConfigurationCommand");
var GetIndexingConfigurationCommand = _GetIndexingConfigurationCommand;

// src/commands/GetJobDocumentCommand.ts




var _GetJobDocumentCommand = class _GetJobDocumentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetJobDocument", {}).n("IoTClient", "GetJobDocumentCommand").f(void 0, void 0).ser(se_GetJobDocumentCommand).de(de_GetJobDocumentCommand).build() {
};
__name(_GetJobDocumentCommand, "GetJobDocumentCommand");
var GetJobDocumentCommand = _GetJobDocumentCommand;

// src/commands/GetLoggingOptionsCommand.ts




var _GetLoggingOptionsCommand = class _GetLoggingOptionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetLoggingOptions", {}).n("IoTClient", "GetLoggingOptionsCommand").f(void 0, void 0).ser(se_GetLoggingOptionsCommand).de(de_GetLoggingOptionsCommand).build() {
};
__name(_GetLoggingOptionsCommand, "GetLoggingOptionsCommand");
var GetLoggingOptionsCommand = _GetLoggingOptionsCommand;

// src/commands/GetOTAUpdateCommand.ts




var _GetOTAUpdateCommand = class _GetOTAUpdateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetOTAUpdate", {}).n("IoTClient", "GetOTAUpdateCommand").f(void 0, void 0).ser(se_GetOTAUpdateCommand).de(de_GetOTAUpdateCommand).build() {
};
__name(_GetOTAUpdateCommand, "GetOTAUpdateCommand");
var GetOTAUpdateCommand = _GetOTAUpdateCommand;

// src/commands/GetPackageCommand.ts




var _GetPackageCommand = class _GetPackageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetPackage", {}).n("IoTClient", "GetPackageCommand").f(void 0, GetPackageResponseFilterSensitiveLog).ser(se_GetPackageCommand).de(de_GetPackageCommand).build() {
};
__name(_GetPackageCommand, "GetPackageCommand");
var GetPackageCommand = _GetPackageCommand;

// src/commands/GetPackageConfigurationCommand.ts




var _GetPackageConfigurationCommand = class _GetPackageConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetPackageConfiguration", {}).n("IoTClient", "GetPackageConfigurationCommand").f(void 0, void 0).ser(se_GetPackageConfigurationCommand).de(de_GetPackageConfigurationCommand).build() {
};
__name(_GetPackageConfigurationCommand, "GetPackageConfigurationCommand");
var GetPackageConfigurationCommand = _GetPackageConfigurationCommand;

// src/commands/GetPackageVersionCommand.ts




var _GetPackageVersionCommand = class _GetPackageVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetPackageVersion", {}).n("IoTClient", "GetPackageVersionCommand").f(void 0, GetPackageVersionResponseFilterSensitiveLog).ser(se_GetPackageVersionCommand).de(de_GetPackageVersionCommand).build() {
};
__name(_GetPackageVersionCommand, "GetPackageVersionCommand");
var GetPackageVersionCommand = _GetPackageVersionCommand;

// src/commands/GetPercentilesCommand.ts




var _GetPercentilesCommand = class _GetPercentilesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetPercentiles", {}).n("IoTClient", "GetPercentilesCommand").f(void 0, void 0).ser(se_GetPercentilesCommand).de(de_GetPercentilesCommand).build() {
};
__name(_GetPercentilesCommand, "GetPercentilesCommand");
var GetPercentilesCommand = _GetPercentilesCommand;

// src/commands/GetPolicyCommand.ts




var _GetPolicyCommand = class _GetPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetPolicy", {}).n("IoTClient", "GetPolicyCommand").f(void 0, void 0).ser(se_GetPolicyCommand).de(de_GetPolicyCommand).build() {
};
__name(_GetPolicyCommand, "GetPolicyCommand");
var GetPolicyCommand = _GetPolicyCommand;

// src/commands/GetPolicyVersionCommand.ts




var _GetPolicyVersionCommand = class _GetPolicyVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetPolicyVersion", {}).n("IoTClient", "GetPolicyVersionCommand").f(void 0, void 0).ser(se_GetPolicyVersionCommand).de(de_GetPolicyVersionCommand).build() {
};
__name(_GetPolicyVersionCommand, "GetPolicyVersionCommand");
var GetPolicyVersionCommand = _GetPolicyVersionCommand;

// src/commands/GetRegistrationCodeCommand.ts




var _GetRegistrationCodeCommand = class _GetRegistrationCodeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetRegistrationCode", {}).n("IoTClient", "GetRegistrationCodeCommand").f(void 0, void 0).ser(se_GetRegistrationCodeCommand).de(de_GetRegistrationCodeCommand).build() {
};
__name(_GetRegistrationCodeCommand, "GetRegistrationCodeCommand");
var GetRegistrationCodeCommand = _GetRegistrationCodeCommand;

// src/commands/GetStatisticsCommand.ts




var _GetStatisticsCommand = class _GetStatisticsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetStatistics", {}).n("IoTClient", "GetStatisticsCommand").f(void 0, void 0).ser(se_GetStatisticsCommand).de(de_GetStatisticsCommand).build() {
};
__name(_GetStatisticsCommand, "GetStatisticsCommand");
var GetStatisticsCommand = _GetStatisticsCommand;

// src/commands/GetTopicRuleCommand.ts




var _GetTopicRuleCommand = class _GetTopicRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetTopicRule", {}).n("IoTClient", "GetTopicRuleCommand").f(void 0, void 0).ser(se_GetTopicRuleCommand).de(de_GetTopicRuleCommand).build() {
};
__name(_GetTopicRuleCommand, "GetTopicRuleCommand");
var GetTopicRuleCommand = _GetTopicRuleCommand;

// src/commands/GetTopicRuleDestinationCommand.ts




var _GetTopicRuleDestinationCommand = class _GetTopicRuleDestinationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetTopicRuleDestination", {}).n("IoTClient", "GetTopicRuleDestinationCommand").f(void 0, void 0).ser(se_GetTopicRuleDestinationCommand).de(de_GetTopicRuleDestinationCommand).build() {
};
__name(_GetTopicRuleDestinationCommand, "GetTopicRuleDestinationCommand");
var GetTopicRuleDestinationCommand = _GetTopicRuleDestinationCommand;

// src/commands/GetV2LoggingOptionsCommand.ts




var _GetV2LoggingOptionsCommand = class _GetV2LoggingOptionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "GetV2LoggingOptions", {}).n("IoTClient", "GetV2LoggingOptionsCommand").f(void 0, void 0).ser(se_GetV2LoggingOptionsCommand).de(de_GetV2LoggingOptionsCommand).build() {
};
__name(_GetV2LoggingOptionsCommand, "GetV2LoggingOptionsCommand");
var GetV2LoggingOptionsCommand = _GetV2LoggingOptionsCommand;

// src/commands/ListActiveViolationsCommand.ts




var _ListActiveViolationsCommand = class _ListActiveViolationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListActiveViolations", {}).n("IoTClient", "ListActiveViolationsCommand").f(void 0, void 0).ser(se_ListActiveViolationsCommand).de(de_ListActiveViolationsCommand).build() {
};
__name(_ListActiveViolationsCommand, "ListActiveViolationsCommand");
var ListActiveViolationsCommand = _ListActiveViolationsCommand;

// src/commands/ListAttachedPoliciesCommand.ts




var _ListAttachedPoliciesCommand = class _ListAttachedPoliciesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAttachedPolicies", {}).n("IoTClient", "ListAttachedPoliciesCommand").f(void 0, void 0).ser(se_ListAttachedPoliciesCommand).de(de_ListAttachedPoliciesCommand).build() {
};
__name(_ListAttachedPoliciesCommand, "ListAttachedPoliciesCommand");
var ListAttachedPoliciesCommand = _ListAttachedPoliciesCommand;

// src/commands/ListAuditFindingsCommand.ts




var _ListAuditFindingsCommand = class _ListAuditFindingsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAuditFindings", {}).n("IoTClient", "ListAuditFindingsCommand").f(void 0, void 0).ser(se_ListAuditFindingsCommand).de(de_ListAuditFindingsCommand).build() {
};
__name(_ListAuditFindingsCommand, "ListAuditFindingsCommand");
var ListAuditFindingsCommand = _ListAuditFindingsCommand;

// src/commands/ListAuditMitigationActionsExecutionsCommand.ts




var _ListAuditMitigationActionsExecutionsCommand = class _ListAuditMitigationActionsExecutionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAuditMitigationActionsExecutions", {}).n("IoTClient", "ListAuditMitigationActionsExecutionsCommand").f(void 0, void 0).ser(se_ListAuditMitigationActionsExecutionsCommand).de(de_ListAuditMitigationActionsExecutionsCommand).build() {
};
__name(_ListAuditMitigationActionsExecutionsCommand, "ListAuditMitigationActionsExecutionsCommand");
var ListAuditMitigationActionsExecutionsCommand = _ListAuditMitigationActionsExecutionsCommand;

// src/commands/ListAuditMitigationActionsTasksCommand.ts




var _ListAuditMitigationActionsTasksCommand = class _ListAuditMitigationActionsTasksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAuditMitigationActionsTasks", {}).n("IoTClient", "ListAuditMitigationActionsTasksCommand").f(void 0, void 0).ser(se_ListAuditMitigationActionsTasksCommand).de(de_ListAuditMitigationActionsTasksCommand).build() {
};
__name(_ListAuditMitigationActionsTasksCommand, "ListAuditMitigationActionsTasksCommand");
var ListAuditMitigationActionsTasksCommand = _ListAuditMitigationActionsTasksCommand;

// src/commands/ListAuditSuppressionsCommand.ts




var _ListAuditSuppressionsCommand = class _ListAuditSuppressionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAuditSuppressions", {}).n("IoTClient", "ListAuditSuppressionsCommand").f(void 0, void 0).ser(se_ListAuditSuppressionsCommand).de(de_ListAuditSuppressionsCommand).build() {
};
__name(_ListAuditSuppressionsCommand, "ListAuditSuppressionsCommand");
var ListAuditSuppressionsCommand = _ListAuditSuppressionsCommand;

// src/commands/ListAuditTasksCommand.ts




var _ListAuditTasksCommand = class _ListAuditTasksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAuditTasks", {}).n("IoTClient", "ListAuditTasksCommand").f(void 0, void 0).ser(se_ListAuditTasksCommand).de(de_ListAuditTasksCommand).build() {
};
__name(_ListAuditTasksCommand, "ListAuditTasksCommand");
var ListAuditTasksCommand = _ListAuditTasksCommand;

// src/commands/ListAuthorizersCommand.ts




var _ListAuthorizersCommand = class _ListAuthorizersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListAuthorizers", {}).n("IoTClient", "ListAuthorizersCommand").f(void 0, void 0).ser(se_ListAuthorizersCommand).de(de_ListAuthorizersCommand).build() {
};
__name(_ListAuthorizersCommand, "ListAuthorizersCommand");
var ListAuthorizersCommand = _ListAuthorizersCommand;

// src/commands/ListBillingGroupsCommand.ts




var _ListBillingGroupsCommand = class _ListBillingGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListBillingGroups", {}).n("IoTClient", "ListBillingGroupsCommand").f(void 0, void 0).ser(se_ListBillingGroupsCommand).de(de_ListBillingGroupsCommand).build() {
};
__name(_ListBillingGroupsCommand, "ListBillingGroupsCommand");
var ListBillingGroupsCommand = _ListBillingGroupsCommand;

// src/commands/ListCACertificatesCommand.ts




var _ListCACertificatesCommand = class _ListCACertificatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListCACertificates", {}).n("IoTClient", "ListCACertificatesCommand").f(void 0, void 0).ser(se_ListCACertificatesCommand).de(de_ListCACertificatesCommand).build() {
};
__name(_ListCACertificatesCommand, "ListCACertificatesCommand");
var ListCACertificatesCommand = _ListCACertificatesCommand;

// src/commands/ListCertificateProvidersCommand.ts




var _ListCertificateProvidersCommand = class _ListCertificateProvidersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListCertificateProviders", {}).n("IoTClient", "ListCertificateProvidersCommand").f(void 0, void 0).ser(se_ListCertificateProvidersCommand).de(de_ListCertificateProvidersCommand).build() {
};
__name(_ListCertificateProvidersCommand, "ListCertificateProvidersCommand");
var ListCertificateProvidersCommand = _ListCertificateProvidersCommand;

// src/commands/ListCertificatesByCACommand.ts




var _ListCertificatesByCACommand = class _ListCertificatesByCACommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListCertificatesByCA", {}).n("IoTClient", "ListCertificatesByCACommand").f(void 0, void 0).ser(se_ListCertificatesByCACommand).de(de_ListCertificatesByCACommand).build() {
};
__name(_ListCertificatesByCACommand, "ListCertificatesByCACommand");
var ListCertificatesByCACommand = _ListCertificatesByCACommand;

// src/commands/ListCertificatesCommand.ts




var _ListCertificatesCommand = class _ListCertificatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListCertificates", {}).n("IoTClient", "ListCertificatesCommand").f(void 0, void 0).ser(se_ListCertificatesCommand).de(de_ListCertificatesCommand).build() {
};
__name(_ListCertificatesCommand, "ListCertificatesCommand");
var ListCertificatesCommand = _ListCertificatesCommand;

// src/commands/ListCustomMetricsCommand.ts




var _ListCustomMetricsCommand = class _ListCustomMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListCustomMetrics", {}).n("IoTClient", "ListCustomMetricsCommand").f(void 0, void 0).ser(se_ListCustomMetricsCommand).de(de_ListCustomMetricsCommand).build() {
};
__name(_ListCustomMetricsCommand, "ListCustomMetricsCommand");
var ListCustomMetricsCommand = _ListCustomMetricsCommand;

// src/commands/ListDetectMitigationActionsExecutionsCommand.ts




var _ListDetectMitigationActionsExecutionsCommand = class _ListDetectMitigationActionsExecutionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListDetectMitigationActionsExecutions", {}).n("IoTClient", "ListDetectMitigationActionsExecutionsCommand").f(void 0, void 0).ser(se_ListDetectMitigationActionsExecutionsCommand).de(de_ListDetectMitigationActionsExecutionsCommand).build() {
};
__name(_ListDetectMitigationActionsExecutionsCommand, "ListDetectMitigationActionsExecutionsCommand");
var ListDetectMitigationActionsExecutionsCommand = _ListDetectMitigationActionsExecutionsCommand;

// src/commands/ListDetectMitigationActionsTasksCommand.ts




var _ListDetectMitigationActionsTasksCommand = class _ListDetectMitigationActionsTasksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListDetectMitigationActionsTasks", {}).n("IoTClient", "ListDetectMitigationActionsTasksCommand").f(void 0, void 0).ser(se_ListDetectMitigationActionsTasksCommand).de(de_ListDetectMitigationActionsTasksCommand).build() {
};
__name(_ListDetectMitigationActionsTasksCommand, "ListDetectMitigationActionsTasksCommand");
var ListDetectMitigationActionsTasksCommand = _ListDetectMitigationActionsTasksCommand;

// src/commands/ListDimensionsCommand.ts




var _ListDimensionsCommand = class _ListDimensionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListDimensions", {}).n("IoTClient", "ListDimensionsCommand").f(void 0, void 0).ser(se_ListDimensionsCommand).de(de_ListDimensionsCommand).build() {
};
__name(_ListDimensionsCommand, "ListDimensionsCommand");
var ListDimensionsCommand = _ListDimensionsCommand;

// src/commands/ListDomainConfigurationsCommand.ts




var _ListDomainConfigurationsCommand = class _ListDomainConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListDomainConfigurations", {}).n("IoTClient", "ListDomainConfigurationsCommand").f(void 0, void 0).ser(se_ListDomainConfigurationsCommand).de(de_ListDomainConfigurationsCommand).build() {
};
__name(_ListDomainConfigurationsCommand, "ListDomainConfigurationsCommand");
var ListDomainConfigurationsCommand = _ListDomainConfigurationsCommand;

// src/commands/ListFleetMetricsCommand.ts




var _ListFleetMetricsCommand = class _ListFleetMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListFleetMetrics", {}).n("IoTClient", "ListFleetMetricsCommand").f(void 0, void 0).ser(se_ListFleetMetricsCommand).de(de_ListFleetMetricsCommand).build() {
};
__name(_ListFleetMetricsCommand, "ListFleetMetricsCommand");
var ListFleetMetricsCommand = _ListFleetMetricsCommand;

// src/commands/ListIndicesCommand.ts




var _ListIndicesCommand = class _ListIndicesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListIndices", {}).n("IoTClient", "ListIndicesCommand").f(void 0, void 0).ser(se_ListIndicesCommand).de(de_ListIndicesCommand).build() {
};
__name(_ListIndicesCommand, "ListIndicesCommand");
var ListIndicesCommand = _ListIndicesCommand;

// src/commands/ListJobExecutionsForJobCommand.ts




var _ListJobExecutionsForJobCommand = class _ListJobExecutionsForJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListJobExecutionsForJob", {}).n("IoTClient", "ListJobExecutionsForJobCommand").f(void 0, void 0).ser(se_ListJobExecutionsForJobCommand).de(de_ListJobExecutionsForJobCommand).build() {
};
__name(_ListJobExecutionsForJobCommand, "ListJobExecutionsForJobCommand");
var ListJobExecutionsForJobCommand = _ListJobExecutionsForJobCommand;

// src/commands/ListJobExecutionsForThingCommand.ts




var _ListJobExecutionsForThingCommand = class _ListJobExecutionsForThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListJobExecutionsForThing", {}).n("IoTClient", "ListJobExecutionsForThingCommand").f(void 0, void 0).ser(se_ListJobExecutionsForThingCommand).de(de_ListJobExecutionsForThingCommand).build() {
};
__name(_ListJobExecutionsForThingCommand, "ListJobExecutionsForThingCommand");
var ListJobExecutionsForThingCommand = _ListJobExecutionsForThingCommand;

// src/commands/ListJobsCommand.ts




var _ListJobsCommand = class _ListJobsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListJobs", {}).n("IoTClient", "ListJobsCommand").f(void 0, void 0).ser(se_ListJobsCommand).de(de_ListJobsCommand).build() {
};
__name(_ListJobsCommand, "ListJobsCommand");
var ListJobsCommand = _ListJobsCommand;

// src/commands/ListJobTemplatesCommand.ts




var _ListJobTemplatesCommand = class _ListJobTemplatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListJobTemplates", {}).n("IoTClient", "ListJobTemplatesCommand").f(void 0, void 0).ser(se_ListJobTemplatesCommand).de(de_ListJobTemplatesCommand).build() {
};
__name(_ListJobTemplatesCommand, "ListJobTemplatesCommand");
var ListJobTemplatesCommand = _ListJobTemplatesCommand;

// src/commands/ListManagedJobTemplatesCommand.ts




var _ListManagedJobTemplatesCommand = class _ListManagedJobTemplatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListManagedJobTemplates", {}).n("IoTClient", "ListManagedJobTemplatesCommand").f(void 0, void 0).ser(se_ListManagedJobTemplatesCommand).de(de_ListManagedJobTemplatesCommand).build() {
};
__name(_ListManagedJobTemplatesCommand, "ListManagedJobTemplatesCommand");
var ListManagedJobTemplatesCommand = _ListManagedJobTemplatesCommand;

// src/commands/ListMetricValuesCommand.ts




var _ListMetricValuesCommand = class _ListMetricValuesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListMetricValues", {}).n("IoTClient", "ListMetricValuesCommand").f(void 0, void 0).ser(se_ListMetricValuesCommand).de(de_ListMetricValuesCommand).build() {
};
__name(_ListMetricValuesCommand, "ListMetricValuesCommand");
var ListMetricValuesCommand = _ListMetricValuesCommand;

// src/commands/ListMitigationActionsCommand.ts




var _ListMitigationActionsCommand = class _ListMitigationActionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListMitigationActions", {}).n("IoTClient", "ListMitigationActionsCommand").f(void 0, void 0).ser(se_ListMitigationActionsCommand).de(de_ListMitigationActionsCommand).build() {
};
__name(_ListMitigationActionsCommand, "ListMitigationActionsCommand");
var ListMitigationActionsCommand = _ListMitigationActionsCommand;

// src/commands/ListOTAUpdatesCommand.ts




var _ListOTAUpdatesCommand = class _ListOTAUpdatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListOTAUpdates", {}).n("IoTClient", "ListOTAUpdatesCommand").f(void 0, void 0).ser(se_ListOTAUpdatesCommand).de(de_ListOTAUpdatesCommand).build() {
};
__name(_ListOTAUpdatesCommand, "ListOTAUpdatesCommand");
var ListOTAUpdatesCommand = _ListOTAUpdatesCommand;

// src/commands/ListOutgoingCertificatesCommand.ts




var _ListOutgoingCertificatesCommand = class _ListOutgoingCertificatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListOutgoingCertificates", {}).n("IoTClient", "ListOutgoingCertificatesCommand").f(void 0, void 0).ser(se_ListOutgoingCertificatesCommand).de(de_ListOutgoingCertificatesCommand).build() {
};
__name(_ListOutgoingCertificatesCommand, "ListOutgoingCertificatesCommand");
var ListOutgoingCertificatesCommand = _ListOutgoingCertificatesCommand;

// src/commands/ListPackagesCommand.ts




var _ListPackagesCommand = class _ListPackagesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPackages", {}).n("IoTClient", "ListPackagesCommand").f(void 0, void 0).ser(se_ListPackagesCommand).de(de_ListPackagesCommand).build() {
};
__name(_ListPackagesCommand, "ListPackagesCommand");
var ListPackagesCommand = _ListPackagesCommand;

// src/commands/ListPackageVersionsCommand.ts




var _ListPackageVersionsCommand = class _ListPackageVersionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPackageVersions", {}).n("IoTClient", "ListPackageVersionsCommand").f(void 0, void 0).ser(se_ListPackageVersionsCommand).de(de_ListPackageVersionsCommand).build() {
};
__name(_ListPackageVersionsCommand, "ListPackageVersionsCommand");
var ListPackageVersionsCommand = _ListPackageVersionsCommand;

// src/commands/ListPoliciesCommand.ts




var _ListPoliciesCommand = class _ListPoliciesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPolicies", {}).n("IoTClient", "ListPoliciesCommand").f(void 0, void 0).ser(se_ListPoliciesCommand).de(de_ListPoliciesCommand).build() {
};
__name(_ListPoliciesCommand, "ListPoliciesCommand");
var ListPoliciesCommand = _ListPoliciesCommand;

// src/commands/ListPolicyPrincipalsCommand.ts




var _ListPolicyPrincipalsCommand = class _ListPolicyPrincipalsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPolicyPrincipals", {}).n("IoTClient", "ListPolicyPrincipalsCommand").f(void 0, void 0).ser(se_ListPolicyPrincipalsCommand).de(de_ListPolicyPrincipalsCommand).build() {
};
__name(_ListPolicyPrincipalsCommand, "ListPolicyPrincipalsCommand");
var ListPolicyPrincipalsCommand = _ListPolicyPrincipalsCommand;

// src/commands/ListPolicyVersionsCommand.ts




var _ListPolicyVersionsCommand = class _ListPolicyVersionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPolicyVersions", {}).n("IoTClient", "ListPolicyVersionsCommand").f(void 0, void 0).ser(se_ListPolicyVersionsCommand).de(de_ListPolicyVersionsCommand).build() {
};
__name(_ListPolicyVersionsCommand, "ListPolicyVersionsCommand");
var ListPolicyVersionsCommand = _ListPolicyVersionsCommand;

// src/commands/ListPrincipalPoliciesCommand.ts




var _ListPrincipalPoliciesCommand = class _ListPrincipalPoliciesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPrincipalPolicies", {}).n("IoTClient", "ListPrincipalPoliciesCommand").f(void 0, void 0).ser(se_ListPrincipalPoliciesCommand).de(de_ListPrincipalPoliciesCommand).build() {
};
__name(_ListPrincipalPoliciesCommand, "ListPrincipalPoliciesCommand");
var ListPrincipalPoliciesCommand = _ListPrincipalPoliciesCommand;

// src/commands/ListPrincipalThingsCommand.ts




var _ListPrincipalThingsCommand = class _ListPrincipalThingsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListPrincipalThings", {}).n("IoTClient", "ListPrincipalThingsCommand").f(void 0, void 0).ser(se_ListPrincipalThingsCommand).de(de_ListPrincipalThingsCommand).build() {
};
__name(_ListPrincipalThingsCommand, "ListPrincipalThingsCommand");
var ListPrincipalThingsCommand = _ListPrincipalThingsCommand;

// src/commands/ListProvisioningTemplatesCommand.ts




var _ListProvisioningTemplatesCommand = class _ListProvisioningTemplatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListProvisioningTemplates", {}).n("IoTClient", "ListProvisioningTemplatesCommand").f(void 0, void 0).ser(se_ListProvisioningTemplatesCommand).de(de_ListProvisioningTemplatesCommand).build() {
};
__name(_ListProvisioningTemplatesCommand, "ListProvisioningTemplatesCommand");
var ListProvisioningTemplatesCommand = _ListProvisioningTemplatesCommand;

// src/commands/ListProvisioningTemplateVersionsCommand.ts




var _ListProvisioningTemplateVersionsCommand = class _ListProvisioningTemplateVersionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListProvisioningTemplateVersions", {}).n("IoTClient", "ListProvisioningTemplateVersionsCommand").f(void 0, void 0).ser(se_ListProvisioningTemplateVersionsCommand).de(de_ListProvisioningTemplateVersionsCommand).build() {
};
__name(_ListProvisioningTemplateVersionsCommand, "ListProvisioningTemplateVersionsCommand");
var ListProvisioningTemplateVersionsCommand = _ListProvisioningTemplateVersionsCommand;

// src/commands/ListRelatedResourcesForAuditFindingCommand.ts




var _ListRelatedResourcesForAuditFindingCommand = class _ListRelatedResourcesForAuditFindingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListRelatedResourcesForAuditFinding", {}).n("IoTClient", "ListRelatedResourcesForAuditFindingCommand").f(void 0, void 0).ser(se_ListRelatedResourcesForAuditFindingCommand).de(de_ListRelatedResourcesForAuditFindingCommand).build() {
};
__name(_ListRelatedResourcesForAuditFindingCommand, "ListRelatedResourcesForAuditFindingCommand");
var ListRelatedResourcesForAuditFindingCommand = _ListRelatedResourcesForAuditFindingCommand;

// src/commands/ListRoleAliasesCommand.ts




var _ListRoleAliasesCommand = class _ListRoleAliasesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListRoleAliases", {}).n("IoTClient", "ListRoleAliasesCommand").f(void 0, void 0).ser(se_ListRoleAliasesCommand).de(de_ListRoleAliasesCommand).build() {
};
__name(_ListRoleAliasesCommand, "ListRoleAliasesCommand");
var ListRoleAliasesCommand = _ListRoleAliasesCommand;

// src/commands/ListScheduledAuditsCommand.ts




var _ListScheduledAuditsCommand = class _ListScheduledAuditsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListScheduledAudits", {}).n("IoTClient", "ListScheduledAuditsCommand").f(void 0, void 0).ser(se_ListScheduledAuditsCommand).de(de_ListScheduledAuditsCommand).build() {
};
__name(_ListScheduledAuditsCommand, "ListScheduledAuditsCommand");
var ListScheduledAuditsCommand = _ListScheduledAuditsCommand;

// src/commands/ListSecurityProfilesCommand.ts




var _ListSecurityProfilesCommand = class _ListSecurityProfilesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListSecurityProfiles", {}).n("IoTClient", "ListSecurityProfilesCommand").f(void 0, void 0).ser(se_ListSecurityProfilesCommand).de(de_ListSecurityProfilesCommand).build() {
};
__name(_ListSecurityProfilesCommand, "ListSecurityProfilesCommand");
var ListSecurityProfilesCommand = _ListSecurityProfilesCommand;

// src/commands/ListSecurityProfilesForTargetCommand.ts




var _ListSecurityProfilesForTargetCommand = class _ListSecurityProfilesForTargetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListSecurityProfilesForTarget", {}).n("IoTClient", "ListSecurityProfilesForTargetCommand").f(void 0, void 0).ser(se_ListSecurityProfilesForTargetCommand).de(de_ListSecurityProfilesForTargetCommand).build() {
};
__name(_ListSecurityProfilesForTargetCommand, "ListSecurityProfilesForTargetCommand");
var ListSecurityProfilesForTargetCommand = _ListSecurityProfilesForTargetCommand;

// src/commands/ListStreamsCommand.ts




var _ListStreamsCommand = class _ListStreamsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListStreams", {}).n("IoTClient", "ListStreamsCommand").f(void 0, void 0).ser(se_ListStreamsCommand).de(de_ListStreamsCommand).build() {
};
__name(_ListStreamsCommand, "ListStreamsCommand");
var ListStreamsCommand = _ListStreamsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListTagsForResource", {}).n("IoTClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListTargetsForPolicyCommand.ts




var _ListTargetsForPolicyCommand = class _ListTargetsForPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListTargetsForPolicy", {}).n("IoTClient", "ListTargetsForPolicyCommand").f(void 0, void 0).ser(se_ListTargetsForPolicyCommand).de(de_ListTargetsForPolicyCommand).build() {
};
__name(_ListTargetsForPolicyCommand, "ListTargetsForPolicyCommand");
var ListTargetsForPolicyCommand = _ListTargetsForPolicyCommand;

// src/commands/ListTargetsForSecurityProfileCommand.ts




var _ListTargetsForSecurityProfileCommand = class _ListTargetsForSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListTargetsForSecurityProfile", {}).n("IoTClient", "ListTargetsForSecurityProfileCommand").f(void 0, void 0).ser(se_ListTargetsForSecurityProfileCommand).de(de_ListTargetsForSecurityProfileCommand).build() {
};
__name(_ListTargetsForSecurityProfileCommand, "ListTargetsForSecurityProfileCommand");
var ListTargetsForSecurityProfileCommand = _ListTargetsForSecurityProfileCommand;

// src/commands/ListThingGroupsCommand.ts




var _ListThingGroupsCommand = class _ListThingGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingGroups", {}).n("IoTClient", "ListThingGroupsCommand").f(void 0, void 0).ser(se_ListThingGroupsCommand).de(de_ListThingGroupsCommand).build() {
};
__name(_ListThingGroupsCommand, "ListThingGroupsCommand");
var ListThingGroupsCommand = _ListThingGroupsCommand;

// src/commands/ListThingGroupsForThingCommand.ts




var _ListThingGroupsForThingCommand = class _ListThingGroupsForThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingGroupsForThing", {}).n("IoTClient", "ListThingGroupsForThingCommand").f(void 0, void 0).ser(se_ListThingGroupsForThingCommand).de(de_ListThingGroupsForThingCommand).build() {
};
__name(_ListThingGroupsForThingCommand, "ListThingGroupsForThingCommand");
var ListThingGroupsForThingCommand = _ListThingGroupsForThingCommand;

// src/commands/ListThingPrincipalsCommand.ts




var _ListThingPrincipalsCommand = class _ListThingPrincipalsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingPrincipals", {}).n("IoTClient", "ListThingPrincipalsCommand").f(void 0, void 0).ser(se_ListThingPrincipalsCommand).de(de_ListThingPrincipalsCommand).build() {
};
__name(_ListThingPrincipalsCommand, "ListThingPrincipalsCommand");
var ListThingPrincipalsCommand = _ListThingPrincipalsCommand;

// src/commands/ListThingRegistrationTaskReportsCommand.ts




var _ListThingRegistrationTaskReportsCommand = class _ListThingRegistrationTaskReportsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingRegistrationTaskReports", {}).n("IoTClient", "ListThingRegistrationTaskReportsCommand").f(void 0, void 0).ser(se_ListThingRegistrationTaskReportsCommand).de(de_ListThingRegistrationTaskReportsCommand).build() {
};
__name(_ListThingRegistrationTaskReportsCommand, "ListThingRegistrationTaskReportsCommand");
var ListThingRegistrationTaskReportsCommand = _ListThingRegistrationTaskReportsCommand;

// src/commands/ListThingRegistrationTasksCommand.ts




var _ListThingRegistrationTasksCommand = class _ListThingRegistrationTasksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingRegistrationTasks", {}).n("IoTClient", "ListThingRegistrationTasksCommand").f(void 0, void 0).ser(se_ListThingRegistrationTasksCommand).de(de_ListThingRegistrationTasksCommand).build() {
};
__name(_ListThingRegistrationTasksCommand, "ListThingRegistrationTasksCommand");
var ListThingRegistrationTasksCommand = _ListThingRegistrationTasksCommand;

// src/commands/ListThingsCommand.ts




var _ListThingsCommand = class _ListThingsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThings", {}).n("IoTClient", "ListThingsCommand").f(void 0, void 0).ser(se_ListThingsCommand).de(de_ListThingsCommand).build() {
};
__name(_ListThingsCommand, "ListThingsCommand");
var ListThingsCommand = _ListThingsCommand;

// src/commands/ListThingsInBillingGroupCommand.ts




var _ListThingsInBillingGroupCommand = class _ListThingsInBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingsInBillingGroup", {}).n("IoTClient", "ListThingsInBillingGroupCommand").f(void 0, void 0).ser(se_ListThingsInBillingGroupCommand).de(de_ListThingsInBillingGroupCommand).build() {
};
__name(_ListThingsInBillingGroupCommand, "ListThingsInBillingGroupCommand");
var ListThingsInBillingGroupCommand = _ListThingsInBillingGroupCommand;

// src/commands/ListThingsInThingGroupCommand.ts




var _ListThingsInThingGroupCommand = class _ListThingsInThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingsInThingGroup", {}).n("IoTClient", "ListThingsInThingGroupCommand").f(void 0, void 0).ser(se_ListThingsInThingGroupCommand).de(de_ListThingsInThingGroupCommand).build() {
};
__name(_ListThingsInThingGroupCommand, "ListThingsInThingGroupCommand");
var ListThingsInThingGroupCommand = _ListThingsInThingGroupCommand;

// src/commands/ListThingTypesCommand.ts




var _ListThingTypesCommand = class _ListThingTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListThingTypes", {}).n("IoTClient", "ListThingTypesCommand").f(void 0, void 0).ser(se_ListThingTypesCommand).de(de_ListThingTypesCommand).build() {
};
__name(_ListThingTypesCommand, "ListThingTypesCommand");
var ListThingTypesCommand = _ListThingTypesCommand;

// src/commands/ListTopicRuleDestinationsCommand.ts




var _ListTopicRuleDestinationsCommand = class _ListTopicRuleDestinationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListTopicRuleDestinations", {}).n("IoTClient", "ListTopicRuleDestinationsCommand").f(void 0, void 0).ser(se_ListTopicRuleDestinationsCommand).de(de_ListTopicRuleDestinationsCommand).build() {
};
__name(_ListTopicRuleDestinationsCommand, "ListTopicRuleDestinationsCommand");
var ListTopicRuleDestinationsCommand = _ListTopicRuleDestinationsCommand;

// src/commands/ListTopicRulesCommand.ts




var _ListTopicRulesCommand = class _ListTopicRulesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListTopicRules", {}).n("IoTClient", "ListTopicRulesCommand").f(void 0, void 0).ser(se_ListTopicRulesCommand).de(de_ListTopicRulesCommand).build() {
};
__name(_ListTopicRulesCommand, "ListTopicRulesCommand");
var ListTopicRulesCommand = _ListTopicRulesCommand;

// src/commands/ListV2LoggingLevelsCommand.ts




var _ListV2LoggingLevelsCommand = class _ListV2LoggingLevelsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListV2LoggingLevels", {}).n("IoTClient", "ListV2LoggingLevelsCommand").f(void 0, void 0).ser(se_ListV2LoggingLevelsCommand).de(de_ListV2LoggingLevelsCommand).build() {
};
__name(_ListV2LoggingLevelsCommand, "ListV2LoggingLevelsCommand");
var ListV2LoggingLevelsCommand = _ListV2LoggingLevelsCommand;

// src/commands/ListViolationEventsCommand.ts




var _ListViolationEventsCommand = class _ListViolationEventsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ListViolationEvents", {}).n("IoTClient", "ListViolationEventsCommand").f(void 0, void 0).ser(se_ListViolationEventsCommand).de(de_ListViolationEventsCommand).build() {
};
__name(_ListViolationEventsCommand, "ListViolationEventsCommand");
var ListViolationEventsCommand = _ListViolationEventsCommand;

// src/commands/PutVerificationStateOnViolationCommand.ts




var _PutVerificationStateOnViolationCommand = class _PutVerificationStateOnViolationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "PutVerificationStateOnViolation", {}).n("IoTClient", "PutVerificationStateOnViolationCommand").f(void 0, void 0).ser(se_PutVerificationStateOnViolationCommand).de(de_PutVerificationStateOnViolationCommand).build() {
};
__name(_PutVerificationStateOnViolationCommand, "PutVerificationStateOnViolationCommand");
var PutVerificationStateOnViolationCommand = _PutVerificationStateOnViolationCommand;

// src/commands/RegisterCACertificateCommand.ts




var _RegisterCACertificateCommand = class _RegisterCACertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RegisterCACertificate", {}).n("IoTClient", "RegisterCACertificateCommand").f(void 0, void 0).ser(se_RegisterCACertificateCommand).de(de_RegisterCACertificateCommand).build() {
};
__name(_RegisterCACertificateCommand, "RegisterCACertificateCommand");
var RegisterCACertificateCommand = _RegisterCACertificateCommand;

// src/commands/RegisterCertificateCommand.ts




var _RegisterCertificateCommand = class _RegisterCertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RegisterCertificate", {}).n("IoTClient", "RegisterCertificateCommand").f(void 0, void 0).ser(se_RegisterCertificateCommand).de(de_RegisterCertificateCommand).build() {
};
__name(_RegisterCertificateCommand, "RegisterCertificateCommand");
var RegisterCertificateCommand = _RegisterCertificateCommand;

// src/commands/RegisterCertificateWithoutCACommand.ts




var _RegisterCertificateWithoutCACommand = class _RegisterCertificateWithoutCACommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RegisterCertificateWithoutCA", {}).n("IoTClient", "RegisterCertificateWithoutCACommand").f(void 0, void 0).ser(se_RegisterCertificateWithoutCACommand).de(de_RegisterCertificateWithoutCACommand).build() {
};
__name(_RegisterCertificateWithoutCACommand, "RegisterCertificateWithoutCACommand");
var RegisterCertificateWithoutCACommand = _RegisterCertificateWithoutCACommand;

// src/commands/RegisterThingCommand.ts




var _RegisterThingCommand = class _RegisterThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RegisterThing", {}).n("IoTClient", "RegisterThingCommand").f(void 0, void 0).ser(se_RegisterThingCommand).de(de_RegisterThingCommand).build() {
};
__name(_RegisterThingCommand, "RegisterThingCommand");
var RegisterThingCommand = _RegisterThingCommand;

// src/commands/RejectCertificateTransferCommand.ts




var _RejectCertificateTransferCommand = class _RejectCertificateTransferCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RejectCertificateTransfer", {}).n("IoTClient", "RejectCertificateTransferCommand").f(void 0, void 0).ser(se_RejectCertificateTransferCommand).de(de_RejectCertificateTransferCommand).build() {
};
__name(_RejectCertificateTransferCommand, "RejectCertificateTransferCommand");
var RejectCertificateTransferCommand = _RejectCertificateTransferCommand;

// src/commands/RemoveThingFromBillingGroupCommand.ts




var _RemoveThingFromBillingGroupCommand = class _RemoveThingFromBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RemoveThingFromBillingGroup", {}).n("IoTClient", "RemoveThingFromBillingGroupCommand").f(void 0, void 0).ser(se_RemoveThingFromBillingGroupCommand).de(de_RemoveThingFromBillingGroupCommand).build() {
};
__name(_RemoveThingFromBillingGroupCommand, "RemoveThingFromBillingGroupCommand");
var RemoveThingFromBillingGroupCommand = _RemoveThingFromBillingGroupCommand;

// src/commands/RemoveThingFromThingGroupCommand.ts




var _RemoveThingFromThingGroupCommand = class _RemoveThingFromThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "RemoveThingFromThingGroup", {}).n("IoTClient", "RemoveThingFromThingGroupCommand").f(void 0, void 0).ser(se_RemoveThingFromThingGroupCommand).de(de_RemoveThingFromThingGroupCommand).build() {
};
__name(_RemoveThingFromThingGroupCommand, "RemoveThingFromThingGroupCommand");
var RemoveThingFromThingGroupCommand = _RemoveThingFromThingGroupCommand;

// src/commands/ReplaceTopicRuleCommand.ts




var _ReplaceTopicRuleCommand = class _ReplaceTopicRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ReplaceTopicRule", {}).n("IoTClient", "ReplaceTopicRuleCommand").f(void 0, void 0).ser(se_ReplaceTopicRuleCommand).de(de_ReplaceTopicRuleCommand).build() {
};
__name(_ReplaceTopicRuleCommand, "ReplaceTopicRuleCommand");
var ReplaceTopicRuleCommand = _ReplaceTopicRuleCommand;

// src/commands/SearchIndexCommand.ts




var _SearchIndexCommand = class _SearchIndexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "SearchIndex", {}).n("IoTClient", "SearchIndexCommand").f(void 0, void 0).ser(se_SearchIndexCommand).de(de_SearchIndexCommand).build() {
};
__name(_SearchIndexCommand, "SearchIndexCommand");
var SearchIndexCommand = _SearchIndexCommand;

// src/commands/SetDefaultAuthorizerCommand.ts




var _SetDefaultAuthorizerCommand = class _SetDefaultAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "SetDefaultAuthorizer", {}).n("IoTClient", "SetDefaultAuthorizerCommand").f(void 0, void 0).ser(se_SetDefaultAuthorizerCommand).de(de_SetDefaultAuthorizerCommand).build() {
};
__name(_SetDefaultAuthorizerCommand, "SetDefaultAuthorizerCommand");
var SetDefaultAuthorizerCommand = _SetDefaultAuthorizerCommand;

// src/commands/SetDefaultPolicyVersionCommand.ts




var _SetDefaultPolicyVersionCommand = class _SetDefaultPolicyVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "SetDefaultPolicyVersion", {}).n("IoTClient", "SetDefaultPolicyVersionCommand").f(void 0, void 0).ser(se_SetDefaultPolicyVersionCommand).de(de_SetDefaultPolicyVersionCommand).build() {
};
__name(_SetDefaultPolicyVersionCommand, "SetDefaultPolicyVersionCommand");
var SetDefaultPolicyVersionCommand = _SetDefaultPolicyVersionCommand;

// src/commands/SetLoggingOptionsCommand.ts




var _SetLoggingOptionsCommand = class _SetLoggingOptionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "SetLoggingOptions", {}).n("IoTClient", "SetLoggingOptionsCommand").f(void 0, void 0).ser(se_SetLoggingOptionsCommand).de(de_SetLoggingOptionsCommand).build() {
};
__name(_SetLoggingOptionsCommand, "SetLoggingOptionsCommand");
var SetLoggingOptionsCommand = _SetLoggingOptionsCommand;

// src/commands/SetV2LoggingLevelCommand.ts




var _SetV2LoggingLevelCommand = class _SetV2LoggingLevelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "SetV2LoggingLevel", {}).n("IoTClient", "SetV2LoggingLevelCommand").f(void 0, void 0).ser(se_SetV2LoggingLevelCommand).de(de_SetV2LoggingLevelCommand).build() {
};
__name(_SetV2LoggingLevelCommand, "SetV2LoggingLevelCommand");
var SetV2LoggingLevelCommand = _SetV2LoggingLevelCommand;

// src/commands/SetV2LoggingOptionsCommand.ts




var _SetV2LoggingOptionsCommand = class _SetV2LoggingOptionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "SetV2LoggingOptions", {}).n("IoTClient", "SetV2LoggingOptionsCommand").f(void 0, void 0).ser(se_SetV2LoggingOptionsCommand).de(de_SetV2LoggingOptionsCommand).build() {
};
__name(_SetV2LoggingOptionsCommand, "SetV2LoggingOptionsCommand");
var SetV2LoggingOptionsCommand = _SetV2LoggingOptionsCommand;

// src/commands/StartAuditMitigationActionsTaskCommand.ts




var _StartAuditMitigationActionsTaskCommand = class _StartAuditMitigationActionsTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "StartAuditMitigationActionsTask", {}).n("IoTClient", "StartAuditMitigationActionsTaskCommand").f(void 0, void 0).ser(se_StartAuditMitigationActionsTaskCommand).de(de_StartAuditMitigationActionsTaskCommand).build() {
};
__name(_StartAuditMitigationActionsTaskCommand, "StartAuditMitigationActionsTaskCommand");
var StartAuditMitigationActionsTaskCommand = _StartAuditMitigationActionsTaskCommand;

// src/commands/StartDetectMitigationActionsTaskCommand.ts




var _StartDetectMitigationActionsTaskCommand = class _StartDetectMitigationActionsTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "StartDetectMitigationActionsTask", {}).n("IoTClient", "StartDetectMitigationActionsTaskCommand").f(void 0, void 0).ser(se_StartDetectMitigationActionsTaskCommand).de(de_StartDetectMitigationActionsTaskCommand).build() {
};
__name(_StartDetectMitigationActionsTaskCommand, "StartDetectMitigationActionsTaskCommand");
var StartDetectMitigationActionsTaskCommand = _StartDetectMitigationActionsTaskCommand;

// src/commands/StartOnDemandAuditTaskCommand.ts




var _StartOnDemandAuditTaskCommand = class _StartOnDemandAuditTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "StartOnDemandAuditTask", {}).n("IoTClient", "StartOnDemandAuditTaskCommand").f(void 0, void 0).ser(se_StartOnDemandAuditTaskCommand).de(de_StartOnDemandAuditTaskCommand).build() {
};
__name(_StartOnDemandAuditTaskCommand, "StartOnDemandAuditTaskCommand");
var StartOnDemandAuditTaskCommand = _StartOnDemandAuditTaskCommand;

// src/commands/StartThingRegistrationTaskCommand.ts




var _StartThingRegistrationTaskCommand = class _StartThingRegistrationTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "StartThingRegistrationTask", {}).n("IoTClient", "StartThingRegistrationTaskCommand").f(void 0, void 0).ser(se_StartThingRegistrationTaskCommand).de(de_StartThingRegistrationTaskCommand).build() {
};
__name(_StartThingRegistrationTaskCommand, "StartThingRegistrationTaskCommand");
var StartThingRegistrationTaskCommand = _StartThingRegistrationTaskCommand;

// src/commands/StopThingRegistrationTaskCommand.ts




var _StopThingRegistrationTaskCommand = class _StopThingRegistrationTaskCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "StopThingRegistrationTask", {}).n("IoTClient", "StopThingRegistrationTaskCommand").f(void 0, void 0).ser(se_StopThingRegistrationTaskCommand).de(de_StopThingRegistrationTaskCommand).build() {
};
__name(_StopThingRegistrationTaskCommand, "StopThingRegistrationTaskCommand");
var StopThingRegistrationTaskCommand = _StopThingRegistrationTaskCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "TagResource", {}).n("IoTClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/TestAuthorizationCommand.ts




var _TestAuthorizationCommand = class _TestAuthorizationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "TestAuthorization", {}).n("IoTClient", "TestAuthorizationCommand").f(void 0, void 0).ser(se_TestAuthorizationCommand).de(de_TestAuthorizationCommand).build() {
};
__name(_TestAuthorizationCommand, "TestAuthorizationCommand");
var TestAuthorizationCommand = _TestAuthorizationCommand;

// src/commands/TestInvokeAuthorizerCommand.ts




var _TestInvokeAuthorizerCommand = class _TestInvokeAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "TestInvokeAuthorizer", {}).n("IoTClient", "TestInvokeAuthorizerCommand").f(void 0, void 0).ser(se_TestInvokeAuthorizerCommand).de(de_TestInvokeAuthorizerCommand).build() {
};
__name(_TestInvokeAuthorizerCommand, "TestInvokeAuthorizerCommand");
var TestInvokeAuthorizerCommand = _TestInvokeAuthorizerCommand;

// src/commands/TransferCertificateCommand.ts




var _TransferCertificateCommand = class _TransferCertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "TransferCertificate", {}).n("IoTClient", "TransferCertificateCommand").f(void 0, void 0).ser(se_TransferCertificateCommand).de(de_TransferCertificateCommand).build() {
};
__name(_TransferCertificateCommand, "TransferCertificateCommand");
var TransferCertificateCommand = _TransferCertificateCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UntagResource", {}).n("IoTClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateAccountAuditConfigurationCommand.ts




var _UpdateAccountAuditConfigurationCommand = class _UpdateAccountAuditConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateAccountAuditConfiguration", {}).n("IoTClient", "UpdateAccountAuditConfigurationCommand").f(void 0, void 0).ser(se_UpdateAccountAuditConfigurationCommand).de(de_UpdateAccountAuditConfigurationCommand).build() {
};
__name(_UpdateAccountAuditConfigurationCommand, "UpdateAccountAuditConfigurationCommand");
var UpdateAccountAuditConfigurationCommand = _UpdateAccountAuditConfigurationCommand;

// src/commands/UpdateAuditSuppressionCommand.ts




var _UpdateAuditSuppressionCommand = class _UpdateAuditSuppressionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateAuditSuppression", {}).n("IoTClient", "UpdateAuditSuppressionCommand").f(void 0, void 0).ser(se_UpdateAuditSuppressionCommand).de(de_UpdateAuditSuppressionCommand).build() {
};
__name(_UpdateAuditSuppressionCommand, "UpdateAuditSuppressionCommand");
var UpdateAuditSuppressionCommand = _UpdateAuditSuppressionCommand;

// src/commands/UpdateAuthorizerCommand.ts




var _UpdateAuthorizerCommand = class _UpdateAuthorizerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateAuthorizer", {}).n("IoTClient", "UpdateAuthorizerCommand").f(void 0, void 0).ser(se_UpdateAuthorizerCommand).de(de_UpdateAuthorizerCommand).build() {
};
__name(_UpdateAuthorizerCommand, "UpdateAuthorizerCommand");
var UpdateAuthorizerCommand = _UpdateAuthorizerCommand;

// src/commands/UpdateBillingGroupCommand.ts




var _UpdateBillingGroupCommand = class _UpdateBillingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateBillingGroup", {}).n("IoTClient", "UpdateBillingGroupCommand").f(void 0, void 0).ser(se_UpdateBillingGroupCommand).de(de_UpdateBillingGroupCommand).build() {
};
__name(_UpdateBillingGroupCommand, "UpdateBillingGroupCommand");
var UpdateBillingGroupCommand = _UpdateBillingGroupCommand;

// src/commands/UpdateCACertificateCommand.ts




var _UpdateCACertificateCommand = class _UpdateCACertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateCACertificate", {}).n("IoTClient", "UpdateCACertificateCommand").f(void 0, void 0).ser(se_UpdateCACertificateCommand).de(de_UpdateCACertificateCommand).build() {
};
__name(_UpdateCACertificateCommand, "UpdateCACertificateCommand");
var UpdateCACertificateCommand = _UpdateCACertificateCommand;

// src/commands/UpdateCertificateCommand.ts




var _UpdateCertificateCommand = class _UpdateCertificateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateCertificate", {}).n("IoTClient", "UpdateCertificateCommand").f(void 0, void 0).ser(se_UpdateCertificateCommand).de(de_UpdateCertificateCommand).build() {
};
__name(_UpdateCertificateCommand, "UpdateCertificateCommand");
var UpdateCertificateCommand = _UpdateCertificateCommand;

// src/commands/UpdateCertificateProviderCommand.ts




var _UpdateCertificateProviderCommand = class _UpdateCertificateProviderCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateCertificateProvider", {}).n("IoTClient", "UpdateCertificateProviderCommand").f(void 0, void 0).ser(se_UpdateCertificateProviderCommand).de(de_UpdateCertificateProviderCommand).build() {
};
__name(_UpdateCertificateProviderCommand, "UpdateCertificateProviderCommand");
var UpdateCertificateProviderCommand = _UpdateCertificateProviderCommand;

// src/commands/UpdateCustomMetricCommand.ts




var _UpdateCustomMetricCommand = class _UpdateCustomMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateCustomMetric", {}).n("IoTClient", "UpdateCustomMetricCommand").f(void 0, void 0).ser(se_UpdateCustomMetricCommand).de(de_UpdateCustomMetricCommand).build() {
};
__name(_UpdateCustomMetricCommand, "UpdateCustomMetricCommand");
var UpdateCustomMetricCommand = _UpdateCustomMetricCommand;

// src/commands/UpdateDimensionCommand.ts




var _UpdateDimensionCommand = class _UpdateDimensionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateDimension", {}).n("IoTClient", "UpdateDimensionCommand").f(void 0, void 0).ser(se_UpdateDimensionCommand).de(de_UpdateDimensionCommand).build() {
};
__name(_UpdateDimensionCommand, "UpdateDimensionCommand");
var UpdateDimensionCommand = _UpdateDimensionCommand;

// src/commands/UpdateDomainConfigurationCommand.ts




var _UpdateDomainConfigurationCommand = class _UpdateDomainConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateDomainConfiguration", {}).n("IoTClient", "UpdateDomainConfigurationCommand").f(void 0, void 0).ser(se_UpdateDomainConfigurationCommand).de(de_UpdateDomainConfigurationCommand).build() {
};
__name(_UpdateDomainConfigurationCommand, "UpdateDomainConfigurationCommand");
var UpdateDomainConfigurationCommand = _UpdateDomainConfigurationCommand;

// src/commands/UpdateDynamicThingGroupCommand.ts




var _UpdateDynamicThingGroupCommand = class _UpdateDynamicThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateDynamicThingGroup", {}).n("IoTClient", "UpdateDynamicThingGroupCommand").f(void 0, void 0).ser(se_UpdateDynamicThingGroupCommand).de(de_UpdateDynamicThingGroupCommand).build() {
};
__name(_UpdateDynamicThingGroupCommand, "UpdateDynamicThingGroupCommand");
var UpdateDynamicThingGroupCommand = _UpdateDynamicThingGroupCommand;

// src/commands/UpdateEventConfigurationsCommand.ts




var _UpdateEventConfigurationsCommand = class _UpdateEventConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateEventConfigurations", {}).n("IoTClient", "UpdateEventConfigurationsCommand").f(void 0, void 0).ser(se_UpdateEventConfigurationsCommand).de(de_UpdateEventConfigurationsCommand).build() {
};
__name(_UpdateEventConfigurationsCommand, "UpdateEventConfigurationsCommand");
var UpdateEventConfigurationsCommand = _UpdateEventConfigurationsCommand;

// src/commands/UpdateFleetMetricCommand.ts




var _UpdateFleetMetricCommand = class _UpdateFleetMetricCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateFleetMetric", {}).n("IoTClient", "UpdateFleetMetricCommand").f(void 0, void 0).ser(se_UpdateFleetMetricCommand).de(de_UpdateFleetMetricCommand).build() {
};
__name(_UpdateFleetMetricCommand, "UpdateFleetMetricCommand");
var UpdateFleetMetricCommand = _UpdateFleetMetricCommand;

// src/commands/UpdateIndexingConfigurationCommand.ts




var _UpdateIndexingConfigurationCommand = class _UpdateIndexingConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateIndexingConfiguration", {}).n("IoTClient", "UpdateIndexingConfigurationCommand").f(void 0, void 0).ser(se_UpdateIndexingConfigurationCommand).de(de_UpdateIndexingConfigurationCommand).build() {
};
__name(_UpdateIndexingConfigurationCommand, "UpdateIndexingConfigurationCommand");
var UpdateIndexingConfigurationCommand = _UpdateIndexingConfigurationCommand;

// src/commands/UpdateJobCommand.ts




var _UpdateJobCommand = class _UpdateJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateJob", {}).n("IoTClient", "UpdateJobCommand").f(void 0, void 0).ser(se_UpdateJobCommand).de(de_UpdateJobCommand).build() {
};
__name(_UpdateJobCommand, "UpdateJobCommand");
var UpdateJobCommand = _UpdateJobCommand;

// src/commands/UpdateMitigationActionCommand.ts




var _UpdateMitigationActionCommand = class _UpdateMitigationActionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateMitigationAction", {}).n("IoTClient", "UpdateMitigationActionCommand").f(void 0, void 0).ser(se_UpdateMitigationActionCommand).de(de_UpdateMitigationActionCommand).build() {
};
__name(_UpdateMitigationActionCommand, "UpdateMitigationActionCommand");
var UpdateMitigationActionCommand = _UpdateMitigationActionCommand;

// src/commands/UpdatePackageCommand.ts




var _UpdatePackageCommand = class _UpdatePackageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdatePackage", {}).n("IoTClient", "UpdatePackageCommand").f(UpdatePackageRequestFilterSensitiveLog, void 0).ser(se_UpdatePackageCommand).de(de_UpdatePackageCommand).build() {
};
__name(_UpdatePackageCommand, "UpdatePackageCommand");
var UpdatePackageCommand = _UpdatePackageCommand;

// src/commands/UpdatePackageConfigurationCommand.ts




var _UpdatePackageConfigurationCommand = class _UpdatePackageConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdatePackageConfiguration", {}).n("IoTClient", "UpdatePackageConfigurationCommand").f(void 0, void 0).ser(se_UpdatePackageConfigurationCommand).de(de_UpdatePackageConfigurationCommand).build() {
};
__name(_UpdatePackageConfigurationCommand, "UpdatePackageConfigurationCommand");
var UpdatePackageConfigurationCommand = _UpdatePackageConfigurationCommand;

// src/commands/UpdatePackageVersionCommand.ts




var _UpdatePackageVersionCommand = class _UpdatePackageVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdatePackageVersion", {}).n("IoTClient", "UpdatePackageVersionCommand").f(UpdatePackageVersionRequestFilterSensitiveLog, void 0).ser(se_UpdatePackageVersionCommand).de(de_UpdatePackageVersionCommand).build() {
};
__name(_UpdatePackageVersionCommand, "UpdatePackageVersionCommand");
var UpdatePackageVersionCommand = _UpdatePackageVersionCommand;

// src/commands/UpdateProvisioningTemplateCommand.ts




var _UpdateProvisioningTemplateCommand = class _UpdateProvisioningTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateProvisioningTemplate", {}).n("IoTClient", "UpdateProvisioningTemplateCommand").f(void 0, void 0).ser(se_UpdateProvisioningTemplateCommand).de(de_UpdateProvisioningTemplateCommand).build() {
};
__name(_UpdateProvisioningTemplateCommand, "UpdateProvisioningTemplateCommand");
var UpdateProvisioningTemplateCommand = _UpdateProvisioningTemplateCommand;

// src/commands/UpdateRoleAliasCommand.ts




var _UpdateRoleAliasCommand = class _UpdateRoleAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateRoleAlias", {}).n("IoTClient", "UpdateRoleAliasCommand").f(void 0, void 0).ser(se_UpdateRoleAliasCommand).de(de_UpdateRoleAliasCommand).build() {
};
__name(_UpdateRoleAliasCommand, "UpdateRoleAliasCommand");
var UpdateRoleAliasCommand = _UpdateRoleAliasCommand;

// src/commands/UpdateScheduledAuditCommand.ts




var _UpdateScheduledAuditCommand = class _UpdateScheduledAuditCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateScheduledAudit", {}).n("IoTClient", "UpdateScheduledAuditCommand").f(void 0, void 0).ser(se_UpdateScheduledAuditCommand).de(de_UpdateScheduledAuditCommand).build() {
};
__name(_UpdateScheduledAuditCommand, "UpdateScheduledAuditCommand");
var UpdateScheduledAuditCommand = _UpdateScheduledAuditCommand;

// src/commands/UpdateSecurityProfileCommand.ts




var _UpdateSecurityProfileCommand = class _UpdateSecurityProfileCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateSecurityProfile", {}).n("IoTClient", "UpdateSecurityProfileCommand").f(void 0, void 0).ser(se_UpdateSecurityProfileCommand).de(de_UpdateSecurityProfileCommand).build() {
};
__name(_UpdateSecurityProfileCommand, "UpdateSecurityProfileCommand");
var UpdateSecurityProfileCommand = _UpdateSecurityProfileCommand;

// src/commands/UpdateStreamCommand.ts




var _UpdateStreamCommand = class _UpdateStreamCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateStream", {}).n("IoTClient", "UpdateStreamCommand").f(void 0, void 0).ser(se_UpdateStreamCommand).de(de_UpdateStreamCommand).build() {
};
__name(_UpdateStreamCommand, "UpdateStreamCommand");
var UpdateStreamCommand = _UpdateStreamCommand;

// src/commands/UpdateThingCommand.ts




var _UpdateThingCommand = class _UpdateThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateThing", {}).n("IoTClient", "UpdateThingCommand").f(void 0, void 0).ser(se_UpdateThingCommand).de(de_UpdateThingCommand).build() {
};
__name(_UpdateThingCommand, "UpdateThingCommand");
var UpdateThingCommand = _UpdateThingCommand;

// src/commands/UpdateThingGroupCommand.ts




var _UpdateThingGroupCommand = class _UpdateThingGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateThingGroup", {}).n("IoTClient", "UpdateThingGroupCommand").f(void 0, void 0).ser(se_UpdateThingGroupCommand).de(de_UpdateThingGroupCommand).build() {
};
__name(_UpdateThingGroupCommand, "UpdateThingGroupCommand");
var UpdateThingGroupCommand = _UpdateThingGroupCommand;

// src/commands/UpdateThingGroupsForThingCommand.ts




var _UpdateThingGroupsForThingCommand = class _UpdateThingGroupsForThingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateThingGroupsForThing", {}).n("IoTClient", "UpdateThingGroupsForThingCommand").f(void 0, void 0).ser(se_UpdateThingGroupsForThingCommand).de(de_UpdateThingGroupsForThingCommand).build() {
};
__name(_UpdateThingGroupsForThingCommand, "UpdateThingGroupsForThingCommand");
var UpdateThingGroupsForThingCommand = _UpdateThingGroupsForThingCommand;

// src/commands/UpdateTopicRuleDestinationCommand.ts




var _UpdateTopicRuleDestinationCommand = class _UpdateTopicRuleDestinationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "UpdateTopicRuleDestination", {}).n("IoTClient", "UpdateTopicRuleDestinationCommand").f(void 0, void 0).ser(se_UpdateTopicRuleDestinationCommand).de(de_UpdateTopicRuleDestinationCommand).build() {
};
__name(_UpdateTopicRuleDestinationCommand, "UpdateTopicRuleDestinationCommand");
var UpdateTopicRuleDestinationCommand = _UpdateTopicRuleDestinationCommand;

// src/commands/ValidateSecurityProfileBehaviorsCommand.ts




var _ValidateSecurityProfileBehaviorsCommand = class _ValidateSecurityProfileBehaviorsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIotService", "ValidateSecurityProfileBehaviors", {}).n("IoTClient", "ValidateSecurityProfileBehaviorsCommand").f(void 0, void 0).ser(se_ValidateSecurityProfileBehaviorsCommand).de(de_ValidateSecurityProfileBehaviorsCommand).build() {
};
__name(_ValidateSecurityProfileBehaviorsCommand, "ValidateSecurityProfileBehaviorsCommand");
var ValidateSecurityProfileBehaviorsCommand = _ValidateSecurityProfileBehaviorsCommand;

// src/IoT.ts
var commands = {
  AcceptCertificateTransferCommand,
  AddThingToBillingGroupCommand,
  AddThingToThingGroupCommand,
  AssociateTargetsWithJobCommand,
  AttachPolicyCommand,
  AttachPrincipalPolicyCommand,
  AttachSecurityProfileCommand,
  AttachThingPrincipalCommand,
  CancelAuditMitigationActionsTaskCommand,
  CancelAuditTaskCommand,
  CancelCertificateTransferCommand,
  CancelDetectMitigationActionsTaskCommand,
  CancelJobCommand,
  CancelJobExecutionCommand,
  ClearDefaultAuthorizerCommand,
  ConfirmTopicRuleDestinationCommand,
  CreateAuditSuppressionCommand,
  CreateAuthorizerCommand,
  CreateBillingGroupCommand,
  CreateCertificateFromCsrCommand,
  CreateCertificateProviderCommand,
  CreateCustomMetricCommand,
  CreateDimensionCommand,
  CreateDomainConfigurationCommand,
  CreateDynamicThingGroupCommand,
  CreateFleetMetricCommand,
  CreateJobCommand,
  CreateJobTemplateCommand,
  CreateKeysAndCertificateCommand,
  CreateMitigationActionCommand,
  CreateOTAUpdateCommand,
  CreatePackageCommand,
  CreatePackageVersionCommand,
  CreatePolicyCommand,
  CreatePolicyVersionCommand,
  CreateProvisioningClaimCommand,
  CreateProvisioningTemplateCommand,
  CreateProvisioningTemplateVersionCommand,
  CreateRoleAliasCommand,
  CreateScheduledAuditCommand,
  CreateSecurityProfileCommand,
  CreateStreamCommand,
  CreateThingCommand,
  CreateThingGroupCommand,
  CreateThingTypeCommand,
  CreateTopicRuleCommand,
  CreateTopicRuleDestinationCommand,
  DeleteAccountAuditConfigurationCommand,
  DeleteAuditSuppressionCommand,
  DeleteAuthorizerCommand,
  DeleteBillingGroupCommand,
  DeleteCACertificateCommand,
  DeleteCertificateCommand,
  DeleteCertificateProviderCommand,
  DeleteCustomMetricCommand,
  DeleteDimensionCommand,
  DeleteDomainConfigurationCommand,
  DeleteDynamicThingGroupCommand,
  DeleteFleetMetricCommand,
  DeleteJobCommand,
  DeleteJobExecutionCommand,
  DeleteJobTemplateCommand,
  DeleteMitigationActionCommand,
  DeleteOTAUpdateCommand,
  DeletePackageCommand,
  DeletePackageVersionCommand,
  DeletePolicyCommand,
  DeletePolicyVersionCommand,
  DeleteProvisioningTemplateCommand,
  DeleteProvisioningTemplateVersionCommand,
  DeleteRegistrationCodeCommand,
  DeleteRoleAliasCommand,
  DeleteScheduledAuditCommand,
  DeleteSecurityProfileCommand,
  DeleteStreamCommand,
  DeleteThingCommand,
  DeleteThingGroupCommand,
  DeleteThingTypeCommand,
  DeleteTopicRuleCommand,
  DeleteTopicRuleDestinationCommand,
  DeleteV2LoggingLevelCommand,
  DeprecateThingTypeCommand,
  DescribeAccountAuditConfigurationCommand,
  DescribeAuditFindingCommand,
  DescribeAuditMitigationActionsTaskCommand,
  DescribeAuditSuppressionCommand,
  DescribeAuditTaskCommand,
  DescribeAuthorizerCommand,
  DescribeBillingGroupCommand,
  DescribeCACertificateCommand,
  DescribeCertificateCommand,
  DescribeCertificateProviderCommand,
  DescribeCustomMetricCommand,
  DescribeDefaultAuthorizerCommand,
  DescribeDetectMitigationActionsTaskCommand,
  DescribeDimensionCommand,
  DescribeDomainConfigurationCommand,
  DescribeEndpointCommand,
  DescribeEventConfigurationsCommand,
  DescribeFleetMetricCommand,
  DescribeIndexCommand,
  DescribeJobCommand,
  DescribeJobExecutionCommand,
  DescribeJobTemplateCommand,
  DescribeManagedJobTemplateCommand,
  DescribeMitigationActionCommand,
  DescribeProvisioningTemplateCommand,
  DescribeProvisioningTemplateVersionCommand,
  DescribeRoleAliasCommand,
  DescribeScheduledAuditCommand,
  DescribeSecurityProfileCommand,
  DescribeStreamCommand,
  DescribeThingCommand,
  DescribeThingGroupCommand,
  DescribeThingRegistrationTaskCommand,
  DescribeThingTypeCommand,
  DetachPolicyCommand,
  DetachPrincipalPolicyCommand,
  DetachSecurityProfileCommand,
  DetachThingPrincipalCommand,
  DisableTopicRuleCommand,
  EnableTopicRuleCommand,
  GetBehaviorModelTrainingSummariesCommand,
  GetBucketsAggregationCommand,
  GetCardinalityCommand,
  GetEffectivePoliciesCommand,
  GetIndexingConfigurationCommand,
  GetJobDocumentCommand,
  GetLoggingOptionsCommand,
  GetOTAUpdateCommand,
  GetPackageCommand,
  GetPackageConfigurationCommand,
  GetPackageVersionCommand,
  GetPercentilesCommand,
  GetPolicyCommand,
  GetPolicyVersionCommand,
  GetRegistrationCodeCommand,
  GetStatisticsCommand,
  GetTopicRuleCommand,
  GetTopicRuleDestinationCommand,
  GetV2LoggingOptionsCommand,
  ListActiveViolationsCommand,
  ListAttachedPoliciesCommand,
  ListAuditFindingsCommand,
  ListAuditMitigationActionsExecutionsCommand,
  ListAuditMitigationActionsTasksCommand,
  ListAuditSuppressionsCommand,
  ListAuditTasksCommand,
  ListAuthorizersCommand,
  ListBillingGroupsCommand,
  ListCACertificatesCommand,
  ListCertificateProvidersCommand,
  ListCertificatesCommand,
  ListCertificatesByCACommand,
  ListCustomMetricsCommand,
  ListDetectMitigationActionsExecutionsCommand,
  ListDetectMitigationActionsTasksCommand,
  ListDimensionsCommand,
  ListDomainConfigurationsCommand,
  ListFleetMetricsCommand,
  ListIndicesCommand,
  ListJobExecutionsForJobCommand,
  ListJobExecutionsForThingCommand,
  ListJobsCommand,
  ListJobTemplatesCommand,
  ListManagedJobTemplatesCommand,
  ListMetricValuesCommand,
  ListMitigationActionsCommand,
  ListOTAUpdatesCommand,
  ListOutgoingCertificatesCommand,
  ListPackagesCommand,
  ListPackageVersionsCommand,
  ListPoliciesCommand,
  ListPolicyPrincipalsCommand,
  ListPolicyVersionsCommand,
  ListPrincipalPoliciesCommand,
  ListPrincipalThingsCommand,
  ListProvisioningTemplatesCommand,
  ListProvisioningTemplateVersionsCommand,
  ListRelatedResourcesForAuditFindingCommand,
  ListRoleAliasesCommand,
  ListScheduledAuditsCommand,
  ListSecurityProfilesCommand,
  ListSecurityProfilesForTargetCommand,
  ListStreamsCommand,
  ListTagsForResourceCommand,
  ListTargetsForPolicyCommand,
  ListTargetsForSecurityProfileCommand,
  ListThingGroupsCommand,
  ListThingGroupsForThingCommand,
  ListThingPrincipalsCommand,
  ListThingRegistrationTaskReportsCommand,
  ListThingRegistrationTasksCommand,
  ListThingsCommand,
  ListThingsInBillingGroupCommand,
  ListThingsInThingGroupCommand,
  ListThingTypesCommand,
  ListTopicRuleDestinationsCommand,
  ListTopicRulesCommand,
  ListV2LoggingLevelsCommand,
  ListViolationEventsCommand,
  PutVerificationStateOnViolationCommand,
  RegisterCACertificateCommand,
  RegisterCertificateCommand,
  RegisterCertificateWithoutCACommand,
  RegisterThingCommand,
  RejectCertificateTransferCommand,
  RemoveThingFromBillingGroupCommand,
  RemoveThingFromThingGroupCommand,
  ReplaceTopicRuleCommand,
  SearchIndexCommand,
  SetDefaultAuthorizerCommand,
  SetDefaultPolicyVersionCommand,
  SetLoggingOptionsCommand,
  SetV2LoggingLevelCommand,
  SetV2LoggingOptionsCommand,
  StartAuditMitigationActionsTaskCommand,
  StartDetectMitigationActionsTaskCommand,
  StartOnDemandAuditTaskCommand,
  StartThingRegistrationTaskCommand,
  StopThingRegistrationTaskCommand,
  TagResourceCommand,
  TestAuthorizationCommand,
  TestInvokeAuthorizerCommand,
  TransferCertificateCommand,
  UntagResourceCommand,
  UpdateAccountAuditConfigurationCommand,
  UpdateAuditSuppressionCommand,
  UpdateAuthorizerCommand,
  UpdateBillingGroupCommand,
  UpdateCACertificateCommand,
  UpdateCertificateCommand,
  UpdateCertificateProviderCommand,
  UpdateCustomMetricCommand,
  UpdateDimensionCommand,
  UpdateDomainConfigurationCommand,
  UpdateDynamicThingGroupCommand,
  UpdateEventConfigurationsCommand,
  UpdateFleetMetricCommand,
  UpdateIndexingConfigurationCommand,
  UpdateJobCommand,
  UpdateMitigationActionCommand,
  UpdatePackageCommand,
  UpdatePackageConfigurationCommand,
  UpdatePackageVersionCommand,
  UpdateProvisioningTemplateCommand,
  UpdateRoleAliasCommand,
  UpdateScheduledAuditCommand,
  UpdateSecurityProfileCommand,
  UpdateStreamCommand,
  UpdateThingCommand,
  UpdateThingGroupCommand,
  UpdateThingGroupsForThingCommand,
  UpdateTopicRuleDestinationCommand,
  ValidateSecurityProfileBehaviorsCommand
};
var _IoT = class _IoT extends IoTClient {
};
__name(_IoT, "IoT");
var IoT = _IoT;
(0, import_smithy_client.createAggregatedClient)(commands, IoT);

// src/pagination/GetBehaviorModelTrainingSummariesPaginator.ts

var paginateGetBehaviorModelTrainingSummaries = (0, import_core.createPaginator)(IoTClient, GetBehaviorModelTrainingSummariesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListActiveViolationsPaginator.ts

var paginateListActiveViolations = (0, import_core.createPaginator)(IoTClient, ListActiveViolationsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAttachedPoliciesPaginator.ts

var paginateListAttachedPolicies = (0, import_core.createPaginator)(IoTClient, ListAttachedPoliciesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListAuditFindingsPaginator.ts

var paginateListAuditFindings = (0, import_core.createPaginator)(IoTClient, ListAuditFindingsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAuditMitigationActionsExecutionsPaginator.ts

var paginateListAuditMitigationActionsExecutions = (0, import_core.createPaginator)(IoTClient, ListAuditMitigationActionsExecutionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAuditMitigationActionsTasksPaginator.ts

var paginateListAuditMitigationActionsTasks = (0, import_core.createPaginator)(IoTClient, ListAuditMitigationActionsTasksCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAuditSuppressionsPaginator.ts

var paginateListAuditSuppressions = (0, import_core.createPaginator)(IoTClient, ListAuditSuppressionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAuditTasksPaginator.ts

var paginateListAuditTasks = (0, import_core.createPaginator)(IoTClient, ListAuditTasksCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAuthorizersPaginator.ts

var paginateListAuthorizers = (0, import_core.createPaginator)(IoTClient, ListAuthorizersCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListBillingGroupsPaginator.ts

var paginateListBillingGroups = (0, import_core.createPaginator)(IoTClient, ListBillingGroupsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListCACertificatesPaginator.ts

var paginateListCACertificates = (0, import_core.createPaginator)(IoTClient, ListCACertificatesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListCertificatesByCAPaginator.ts

var paginateListCertificatesByCA = (0, import_core.createPaginator)(IoTClient, ListCertificatesByCACommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListCertificatesPaginator.ts

var paginateListCertificates = (0, import_core.createPaginator)(IoTClient, ListCertificatesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListCustomMetricsPaginator.ts

var paginateListCustomMetrics = (0, import_core.createPaginator)(IoTClient, ListCustomMetricsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDetectMitigationActionsExecutionsPaginator.ts

var paginateListDetectMitigationActionsExecutions = (0, import_core.createPaginator)(IoTClient, ListDetectMitigationActionsExecutionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDetectMitigationActionsTasksPaginator.ts

var paginateListDetectMitigationActionsTasks = (0, import_core.createPaginator)(IoTClient, ListDetectMitigationActionsTasksCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDimensionsPaginator.ts

var paginateListDimensions = (0, import_core.createPaginator)(IoTClient, ListDimensionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDomainConfigurationsPaginator.ts

var paginateListDomainConfigurations = (0, import_core.createPaginator)(IoTClient, ListDomainConfigurationsCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListFleetMetricsPaginator.ts

var paginateListFleetMetrics = (0, import_core.createPaginator)(IoTClient, ListFleetMetricsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListIndicesPaginator.ts

var paginateListIndices = (0, import_core.createPaginator)(IoTClient, ListIndicesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListJobExecutionsForJobPaginator.ts

var paginateListJobExecutionsForJob = (0, import_core.createPaginator)(IoTClient, ListJobExecutionsForJobCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListJobExecutionsForThingPaginator.ts

var paginateListJobExecutionsForThing = (0, import_core.createPaginator)(IoTClient, ListJobExecutionsForThingCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListJobTemplatesPaginator.ts

var paginateListJobTemplates = (0, import_core.createPaginator)(IoTClient, ListJobTemplatesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListJobsPaginator.ts

var paginateListJobs = (0, import_core.createPaginator)(IoTClient, ListJobsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListManagedJobTemplatesPaginator.ts

var paginateListManagedJobTemplates = (0, import_core.createPaginator)(IoTClient, ListManagedJobTemplatesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListMetricValuesPaginator.ts

var paginateListMetricValues = (0, import_core.createPaginator)(IoTClient, ListMetricValuesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListMitigationActionsPaginator.ts

var paginateListMitigationActions = (0, import_core.createPaginator)(IoTClient, ListMitigationActionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListOTAUpdatesPaginator.ts

var paginateListOTAUpdates = (0, import_core.createPaginator)(IoTClient, ListOTAUpdatesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListOutgoingCertificatesPaginator.ts

var paginateListOutgoingCertificates = (0, import_core.createPaginator)(IoTClient, ListOutgoingCertificatesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListPackageVersionsPaginator.ts

var paginateListPackageVersions = (0, import_core.createPaginator)(IoTClient, ListPackageVersionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPackagesPaginator.ts

var paginateListPackages = (0, import_core.createPaginator)(IoTClient, ListPackagesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPoliciesPaginator.ts

var paginateListPolicies = (0, import_core.createPaginator)(IoTClient, ListPoliciesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListPolicyPrincipalsPaginator.ts

var paginateListPolicyPrincipals = (0, import_core.createPaginator)(IoTClient, ListPolicyPrincipalsCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListPrincipalPoliciesPaginator.ts

var paginateListPrincipalPolicies = (0, import_core.createPaginator)(IoTClient, ListPrincipalPoliciesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListPrincipalThingsPaginator.ts

var paginateListPrincipalThings = (0, import_core.createPaginator)(IoTClient, ListPrincipalThingsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListProvisioningTemplateVersionsPaginator.ts

var paginateListProvisioningTemplateVersions = (0, import_core.createPaginator)(IoTClient, ListProvisioningTemplateVersionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListProvisioningTemplatesPaginator.ts

var paginateListProvisioningTemplates = (0, import_core.createPaginator)(IoTClient, ListProvisioningTemplatesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListRelatedResourcesForAuditFindingPaginator.ts

var paginateListRelatedResourcesForAuditFinding = (0, import_core.createPaginator)(IoTClient, ListRelatedResourcesForAuditFindingCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListRoleAliasesPaginator.ts

var paginateListRoleAliases = (0, import_core.createPaginator)(IoTClient, ListRoleAliasesCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListScheduledAuditsPaginator.ts

var paginateListScheduledAudits = (0, import_core.createPaginator)(IoTClient, ListScheduledAuditsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSecurityProfilesForTargetPaginator.ts

var paginateListSecurityProfilesForTarget = (0, import_core.createPaginator)(IoTClient, ListSecurityProfilesForTargetCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSecurityProfilesPaginator.ts

var paginateListSecurityProfiles = (0, import_core.createPaginator)(IoTClient, ListSecurityProfilesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListStreamsPaginator.ts

var paginateListStreams = (0, import_core.createPaginator)(IoTClient, ListStreamsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTagsForResourcePaginator.ts

var paginateListTagsForResource = (0, import_core.createPaginator)(IoTClient, ListTagsForResourceCommand, "nextToken", "nextToken", "");

// src/pagination/ListTargetsForPolicyPaginator.ts

var paginateListTargetsForPolicy = (0, import_core.createPaginator)(IoTClient, ListTargetsForPolicyCommand, "marker", "nextMarker", "pageSize");

// src/pagination/ListTargetsForSecurityProfilePaginator.ts

var paginateListTargetsForSecurityProfile = (0, import_core.createPaginator)(IoTClient, ListTargetsForSecurityProfileCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingGroupsForThingPaginator.ts

var paginateListThingGroupsForThing = (0, import_core.createPaginator)(IoTClient, ListThingGroupsForThingCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingGroupsPaginator.ts

var paginateListThingGroups = (0, import_core.createPaginator)(IoTClient, ListThingGroupsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingPrincipalsPaginator.ts

var paginateListThingPrincipals = (0, import_core.createPaginator)(IoTClient, ListThingPrincipalsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingRegistrationTaskReportsPaginator.ts

var paginateListThingRegistrationTaskReports = (0, import_core.createPaginator)(IoTClient, ListThingRegistrationTaskReportsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingRegistrationTasksPaginator.ts

var paginateListThingRegistrationTasks = (0, import_core.createPaginator)(IoTClient, ListThingRegistrationTasksCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingTypesPaginator.ts

var paginateListThingTypes = (0, import_core.createPaginator)(IoTClient, ListThingTypesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingsInBillingGroupPaginator.ts

var paginateListThingsInBillingGroup = (0, import_core.createPaginator)(IoTClient, ListThingsInBillingGroupCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingsInThingGroupPaginator.ts

var paginateListThingsInThingGroup = (0, import_core.createPaginator)(IoTClient, ListThingsInThingGroupCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListThingsPaginator.ts

var paginateListThings = (0, import_core.createPaginator)(IoTClient, ListThingsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTopicRuleDestinationsPaginator.ts

var paginateListTopicRuleDestinations = (0, import_core.createPaginator)(IoTClient, ListTopicRuleDestinationsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTopicRulesPaginator.ts

var paginateListTopicRules = (0, import_core.createPaginator)(IoTClient, ListTopicRulesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListV2LoggingLevelsPaginator.ts

var paginateListV2LoggingLevels = (0, import_core.createPaginator)(IoTClient, ListV2LoggingLevelsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListViolationEventsPaginator.ts

var paginateListViolationEvents = (0, import_core.createPaginator)(IoTClient, ListViolationEventsCommand, "nextToken", "nextToken", "maxResults");

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  IoTServiceException,
  __Client,
  IoTClient,
  IoT,
  $Command,
  AcceptCertificateTransferCommand,
  AddThingToBillingGroupCommand,
  AddThingToThingGroupCommand,
  AssociateTargetsWithJobCommand,
  AttachPolicyCommand,
  AttachPrincipalPolicyCommand,
  AttachSecurityProfileCommand,
  AttachThingPrincipalCommand,
  CancelAuditMitigationActionsTaskCommand,
  CancelAuditTaskCommand,
  CancelCertificateTransferCommand,
  CancelDetectMitigationActionsTaskCommand,
  CancelJobCommand,
  CancelJobExecutionCommand,
  ClearDefaultAuthorizerCommand,
  ConfirmTopicRuleDestinationCommand,
  CreateAuditSuppressionCommand,
  CreateAuthorizerCommand,
  CreateBillingGroupCommand,
  CreateCertificateFromCsrCommand,
  CreateCertificateProviderCommand,
  CreateCustomMetricCommand,
  CreateDimensionCommand,
  CreateDomainConfigurationCommand,
  CreateDynamicThingGroupCommand,
  CreateFleetMetricCommand,
  CreateJobCommand,
  CreateJobTemplateCommand,
  CreateKeysAndCertificateCommand,
  CreateMitigationActionCommand,
  CreateOTAUpdateCommand,
  CreatePackageCommand,
  CreatePackageVersionCommand,
  CreatePolicyCommand,
  CreatePolicyVersionCommand,
  CreateProvisioningClaimCommand,
  CreateProvisioningTemplateCommand,
  CreateProvisioningTemplateVersionCommand,
  CreateRoleAliasCommand,
  CreateScheduledAuditCommand,
  CreateSecurityProfileCommand,
  CreateStreamCommand,
  CreateThingCommand,
  CreateThingGroupCommand,
  CreateThingTypeCommand,
  CreateTopicRuleCommand,
  CreateTopicRuleDestinationCommand,
  DeleteAccountAuditConfigurationCommand,
  DeleteAuditSuppressionCommand,
  DeleteAuthorizerCommand,
  DeleteBillingGroupCommand,
  DeleteCACertificateCommand,
  DeleteCertificateCommand,
  DeleteCertificateProviderCommand,
  DeleteCustomMetricCommand,
  DeleteDimensionCommand,
  DeleteDomainConfigurationCommand,
  DeleteDynamicThingGroupCommand,
  DeleteFleetMetricCommand,
  DeleteJobCommand,
  DeleteJobExecutionCommand,
  DeleteJobTemplateCommand,
  DeleteMitigationActionCommand,
  DeleteOTAUpdateCommand,
  DeletePackageCommand,
  DeletePackageVersionCommand,
  DeletePolicyCommand,
  DeletePolicyVersionCommand,
  DeleteProvisioningTemplateCommand,
  DeleteProvisioningTemplateVersionCommand,
  DeleteRegistrationCodeCommand,
  DeleteRoleAliasCommand,
  DeleteScheduledAuditCommand,
  DeleteSecurityProfileCommand,
  DeleteStreamCommand,
  DeleteThingCommand,
  DeleteThingGroupCommand,
  DeleteThingTypeCommand,
  DeleteTopicRuleCommand,
  DeleteTopicRuleDestinationCommand,
  DeleteV2LoggingLevelCommand,
  DeprecateThingTypeCommand,
  DescribeAccountAuditConfigurationCommand,
  DescribeAuditFindingCommand,
  DescribeAuditMitigationActionsTaskCommand,
  DescribeAuditSuppressionCommand,
  DescribeAuditTaskCommand,
  DescribeAuthorizerCommand,
  DescribeBillingGroupCommand,
  DescribeCACertificateCommand,
  DescribeCertificateCommand,
  DescribeCertificateProviderCommand,
  DescribeCustomMetricCommand,
  DescribeDefaultAuthorizerCommand,
  DescribeDetectMitigationActionsTaskCommand,
  DescribeDimensionCommand,
  DescribeDomainConfigurationCommand,
  DescribeEndpointCommand,
  DescribeEventConfigurationsCommand,
  DescribeFleetMetricCommand,
  DescribeIndexCommand,
  DescribeJobCommand,
  DescribeJobExecutionCommand,
  DescribeJobTemplateCommand,
  DescribeManagedJobTemplateCommand,
  DescribeMitigationActionCommand,
  DescribeProvisioningTemplateCommand,
  DescribeProvisioningTemplateVersionCommand,
  DescribeRoleAliasCommand,
  DescribeScheduledAuditCommand,
  DescribeSecurityProfileCommand,
  DescribeStreamCommand,
  DescribeThingCommand,
  DescribeThingGroupCommand,
  DescribeThingRegistrationTaskCommand,
  DescribeThingTypeCommand,
  DetachPolicyCommand,
  DetachPrincipalPolicyCommand,
  DetachSecurityProfileCommand,
  DetachThingPrincipalCommand,
  DisableTopicRuleCommand,
  EnableTopicRuleCommand,
  GetBehaviorModelTrainingSummariesCommand,
  GetBucketsAggregationCommand,
  GetCardinalityCommand,
  GetEffectivePoliciesCommand,
  GetIndexingConfigurationCommand,
  GetJobDocumentCommand,
  GetLoggingOptionsCommand,
  GetOTAUpdateCommand,
  GetPackageCommand,
  GetPackageConfigurationCommand,
  GetPackageVersionCommand,
  GetPercentilesCommand,
  GetPolicyCommand,
  GetPolicyVersionCommand,
  GetRegistrationCodeCommand,
  GetStatisticsCommand,
  GetTopicRuleCommand,
  GetTopicRuleDestinationCommand,
  GetV2LoggingOptionsCommand,
  ListActiveViolationsCommand,
  ListAttachedPoliciesCommand,
  ListAuditFindingsCommand,
  ListAuditMitigationActionsExecutionsCommand,
  ListAuditMitigationActionsTasksCommand,
  ListAuditSuppressionsCommand,
  ListAuditTasksCommand,
  ListAuthorizersCommand,
  ListBillingGroupsCommand,
  ListCACertificatesCommand,
  ListCertificateProvidersCommand,
  ListCertificatesByCACommand,
  ListCertificatesCommand,
  ListCustomMetricsCommand,
  ListDetectMitigationActionsExecutionsCommand,
  ListDetectMitigationActionsTasksCommand,
  ListDimensionsCommand,
  ListDomainConfigurationsCommand,
  ListFleetMetricsCommand,
  ListIndicesCommand,
  ListJobExecutionsForJobCommand,
  ListJobExecutionsForThingCommand,
  ListJobTemplatesCommand,
  ListJobsCommand,
  ListManagedJobTemplatesCommand,
  ListMetricValuesCommand,
  ListMitigationActionsCommand,
  ListOTAUpdatesCommand,
  ListOutgoingCertificatesCommand,
  ListPackageVersionsCommand,
  ListPackagesCommand,
  ListPoliciesCommand,
  ListPolicyPrincipalsCommand,
  ListPolicyVersionsCommand,
  ListPrincipalPoliciesCommand,
  ListPrincipalThingsCommand,
  ListProvisioningTemplateVersionsCommand,
  ListProvisioningTemplatesCommand,
  ListRelatedResourcesForAuditFindingCommand,
  ListRoleAliasesCommand,
  ListScheduledAuditsCommand,
  ListSecurityProfilesCommand,
  ListSecurityProfilesForTargetCommand,
  ListStreamsCommand,
  ListTagsForResourceCommand,
  ListTargetsForPolicyCommand,
  ListTargetsForSecurityProfileCommand,
  ListThingGroupsCommand,
  ListThingGroupsForThingCommand,
  ListThingPrincipalsCommand,
  ListThingRegistrationTaskReportsCommand,
  ListThingRegistrationTasksCommand,
  ListThingTypesCommand,
  ListThingsCommand,
  ListThingsInBillingGroupCommand,
  ListThingsInThingGroupCommand,
  ListTopicRuleDestinationsCommand,
  ListTopicRulesCommand,
  ListV2LoggingLevelsCommand,
  ListViolationEventsCommand,
  PutVerificationStateOnViolationCommand,
  RegisterCACertificateCommand,
  RegisterCertificateCommand,
  RegisterCertificateWithoutCACommand,
  RegisterThingCommand,
  RejectCertificateTransferCommand,
  RemoveThingFromBillingGroupCommand,
  RemoveThingFromThingGroupCommand,
  ReplaceTopicRuleCommand,
  SearchIndexCommand,
  SetDefaultAuthorizerCommand,
  SetDefaultPolicyVersionCommand,
  SetLoggingOptionsCommand,
  SetV2LoggingLevelCommand,
  SetV2LoggingOptionsCommand,
  StartAuditMitigationActionsTaskCommand,
  StartDetectMitigationActionsTaskCommand,
  StartOnDemandAuditTaskCommand,
  StartThingRegistrationTaskCommand,
  StopThingRegistrationTaskCommand,
  TagResourceCommand,
  TestAuthorizationCommand,
  TestInvokeAuthorizerCommand,
  TransferCertificateCommand,
  UntagResourceCommand,
  UpdateAccountAuditConfigurationCommand,
  UpdateAuditSuppressionCommand,
  UpdateAuthorizerCommand,
  UpdateBillingGroupCommand,
  UpdateCACertificateCommand,
  UpdateCertificateCommand,
  UpdateCertificateProviderCommand,
  UpdateCustomMetricCommand,
  UpdateDimensionCommand,
  UpdateDomainConfigurationCommand,
  UpdateDynamicThingGroupCommand,
  UpdateEventConfigurationsCommand,
  UpdateFleetMetricCommand,
  UpdateIndexingConfigurationCommand,
  UpdateJobCommand,
  UpdateMitigationActionCommand,
  UpdatePackageCommand,
  UpdatePackageConfigurationCommand,
  UpdatePackageVersionCommand,
  UpdateProvisioningTemplateCommand,
  UpdateRoleAliasCommand,
  UpdateScheduledAuditCommand,
  UpdateSecurityProfileCommand,
  UpdateStreamCommand,
  UpdateThingCommand,
  UpdateThingGroupCommand,
  UpdateThingGroupsForThingCommand,
  UpdateTopicRuleDestinationCommand,
  ValidateSecurityProfileBehaviorsCommand,
  paginateGetBehaviorModelTrainingSummaries,
  paginateListActiveViolations,
  paginateListAttachedPolicies,
  paginateListAuditFindings,
  paginateListAuditMitigationActionsExecutions,
  paginateListAuditMitigationActionsTasks,
  paginateListAuditSuppressions,
  paginateListAuditTasks,
  paginateListAuthorizers,
  paginateListBillingGroups,
  paginateListCACertificates,
  paginateListCertificatesByCA,
  paginateListCertificates,
  paginateListCustomMetrics,
  paginateListDetectMitigationActionsExecutions,
  paginateListDetectMitigationActionsTasks,
  paginateListDimensions,
  paginateListDomainConfigurations,
  paginateListFleetMetrics,
  paginateListIndices,
  paginateListJobExecutionsForJob,
  paginateListJobExecutionsForThing,
  paginateListJobTemplates,
  paginateListJobs,
  paginateListManagedJobTemplates,
  paginateListMetricValues,
  paginateListMitigationActions,
  paginateListOTAUpdates,
  paginateListOutgoingCertificates,
  paginateListPackageVersions,
  paginateListPackages,
  paginateListPolicies,
  paginateListPolicyPrincipals,
  paginateListPrincipalPolicies,
  paginateListPrincipalThings,
  paginateListProvisioningTemplateVersions,
  paginateListProvisioningTemplates,
  paginateListRelatedResourcesForAuditFinding,
  paginateListRoleAliases,
  paginateListScheduledAudits,
  paginateListSecurityProfilesForTarget,
  paginateListSecurityProfiles,
  paginateListStreams,
  paginateListTagsForResource,
  paginateListTargetsForPolicy,
  paginateListTargetsForSecurityProfile,
  paginateListThingGroupsForThing,
  paginateListThingGroups,
  paginateListThingPrincipals,
  paginateListThingRegistrationTaskReports,
  paginateListThingRegistrationTasks,
  paginateListThingTypes,
  paginateListThingsInBillingGroup,
  paginateListThingsInThingGroup,
  paginateListThings,
  paginateListTopicRuleDestinations,
  paginateListTopicRules,
  paginateListV2LoggingLevels,
  paginateListViolationEvents,
  AbortAction,
  JobExecutionFailureType,
  InternalFailureException,
  InvalidRequestException,
  ResourceNotFoundException,
  ServiceUnavailableException,
  ThrottlingException,
  TransferAlreadyCompletedException,
  UnauthorizedException,
  DynamoKeyType,
  AssetPropertyVariant,
  CannedAccessControlList,
  MessageFormat,
  ActionType,
  ComparisonOperator,
  ConfidenceLevel,
  DimensionValueOperator,
  VerificationState,
  AggregationTypeName,
  AlertTargetType,
  LimitExceededException,
  VersionConflictException,
  AuditCheckRunStatus,
  ResourceType,
  AuditFindingSeverity,
  AuditFrequency,
  AuditMitigationActionsExecutionStatus,
  AuditMitigationActionsTaskStatus,
  AuditNotificationType,
  AuditTaskStatus,
  AuditTaskType,
  AuthDecision,
  AuthorizerStatus,
  AutoRegistrationStatus,
  InvalidStateTransitionException,
  ConflictingResourceUpdateException,
  InternalException,
  ResourceAlreadyExistsException,
  CertificateProviderOperation,
  CustomMetricType,
  DimensionType,
  CertificateValidationException,
  ServiceType,
  InvalidQueryException,
  FleetMetricUnit,
  IndexNotReadyException,
  InvalidAggregationException,
  RetryableFailureType,
  JobEndBehavior,
  TargetSelection,
  ConflictException,
  LogLevel,
  PolicyTemplateName,
  CACertificateUpdateAction,
  DeviceCertificateUpdateAction,
  AwsJobAbortCriteriaAbortAction,
  AwsJobAbortCriteriaFailureType,
  Protocol,
  OTAUpdateStatus,
  InternalServerException,
  ServiceQuotaExceededException,
  ValidationException,
  PackageVersionStatus,
  MalformedPolicyException,
  VersionsLimitExceededException,
  TemplateType,
  DayOfWeek,
  SqlParseException,
  TopicRuleDestinationStatus,
  DeleteConflictException,
  CertificateStateException,
  KeyPairFilterSensitiveLog,
  CreateKeysAndCertificateResponseFilterSensitiveLog,
  CreatePackageRequestFilterSensitiveLog,
  CreatePackageResponseFilterSensitiveLog,
  CreatePackageVersionRequestFilterSensitiveLog,
  CreatePackageVersionResponseFilterSensitiveLog,
  CreateProvisioningClaimResponseFilterSensitiveLog,
  LogTargetType,
  CertificateMode,
  CACertificateStatus,
  CertificateStatus,
  DetectMitigationActionsTaskStatus,
  DomainConfigurationStatus,
  DomainType,
  ServerCertificateStatus,
  EventType,
  IndexStatus,
  JobStatus,
  JobExecutionStatus,
  MitigationActionType,
  DynamicGroupStatus,
  Status,
  ModelStatus,
  FieldType,
  ThingGroupIndexingMode,
  DeviceDefenderIndexingMode,
  TargetFieldOrder,
  NamedShadowIndexingMode,
  ThingConnectivityIndexingMode,
  ThingIndexingMode,
  NotConfiguredException,
  BehaviorCriteriaType,
  DetectMitigationActionExecutionStatus,
  GetPackageResponseFilterSensitiveLog,
  GetPackageVersionResponseFilterSensitiveLog,
  ReportType,
  ViolationEventType,
  RegistrationCodeValidationException,
  CertificateConflictException,
  ResourceRegistrationFailureException,
  TaskAlreadyExistsException,
  InvalidResponseException,
  TransferConflictException,
  PackageVersionAction,
  UpdatePackageRequestFilterSensitiveLog,
  UpdatePackageVersionRequestFilterSensitiveLog
});

