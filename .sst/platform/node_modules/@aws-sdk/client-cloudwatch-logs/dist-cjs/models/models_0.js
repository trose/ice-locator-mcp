"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartLiveTailResponseFilterSensitiveLog = exports.StartLiveTailResponseStreamFilterSensitiveLog = exports.SuppressionType = exports.SuppressionUnit = exports.TooManyTagsException = exports.MalformedQueryException = exports.StartLiveTailResponseStream = exports.SessionTimeoutException = exports.SessionStreamingException = exports.UnrecognizedClientException = exports.SuppressionState = exports.InvalidSequenceTokenException = exports.Distribution = exports.QueryStatus = exports.StandardUnit = exports.OrderBy = exports.InheritedProperty = exports.ExportTaskStatusCode = exports.OutputFormat = exports.DataProtectionStatus = exports.DataAlreadyAcceptedException = exports.LogGroupClass = exports.ResourceAlreadyExistsException = exports.LimitExceededException = exports.ValidationException = exports.ThrottlingException = exports.ServiceQuotaExceededException = exports.DeliveryDestinationType = exports.ConflictException = exports.InvalidOperationException = exports.ServiceUnavailableException = exports.ResourceNotFoundException = exports.OperationAbortedException = exports.InvalidParameterException = exports.EvaluationFrequency = exports.AnomalyDetectorStatus = exports.State = exports.Scope = exports.PolicyType = exports.AccessDeniedException = void 0;
const CloudWatchLogsServiceException_1 = require("./CloudWatchLogsServiceException");
class AccessDeniedException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.PolicyType = {
    DATA_PROTECTION_POLICY: "DATA_PROTECTION_POLICY",
};
exports.Scope = {
    ALL: "ALL",
};
exports.State = {
    Active: "Active",
    Baseline: "Baseline",
    Suppressed: "Suppressed",
};
exports.AnomalyDetectorStatus = {
    ANALYZING: "ANALYZING",
    DELETED: "DELETED",
    FAILED: "FAILED",
    INITIALIZING: "INITIALIZING",
    PAUSED: "PAUSED",
    TRAINING: "TRAINING",
};
exports.EvaluationFrequency = {
    FIFTEEN_MIN: "FIFTEEN_MIN",
    FIVE_MIN: "FIVE_MIN",
    ONE_HOUR: "ONE_HOUR",
    ONE_MIN: "ONE_MIN",
    TEN_MIN: "TEN_MIN",
    THIRTY_MIN: "THIRTY_MIN",
};
class InvalidParameterException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
exports.InvalidParameterException = InvalidParameterException;
class OperationAbortedException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "OperationAbortedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationAbortedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationAbortedException.prototype);
    }
}
exports.OperationAbortedException = OperationAbortedException;
class ResourceNotFoundException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ServiceUnavailableException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
class InvalidOperationException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
    }
}
exports.InvalidOperationException = InvalidOperationException;
class ConflictException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
exports.ConflictException = ConflictException;
exports.DeliveryDestinationType = {
    CWL: "CWL",
    FH: "FH",
    S3: "S3",
};
class ServiceQuotaExceededException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
class ThrottlingException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
exports.ThrottlingException = ThrottlingException;
class ValidationException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
exports.ValidationException = ValidationException;
class LimitExceededException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class ResourceAlreadyExistsException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
exports.LogGroupClass = {
    INFREQUENT_ACCESS: "INFREQUENT_ACCESS",
    STANDARD: "STANDARD",
};
class DataAlreadyAcceptedException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "DataAlreadyAcceptedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DataAlreadyAcceptedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataAlreadyAcceptedException.prototype);
        this.expectedSequenceToken = opts.expectedSequenceToken;
    }
}
exports.DataAlreadyAcceptedException = DataAlreadyAcceptedException;
exports.DataProtectionStatus = {
    ACTIVATED: "ACTIVATED",
    ARCHIVED: "ARCHIVED",
    DELETED: "DELETED",
    DISABLED: "DISABLED",
};
exports.OutputFormat = {
    JSON: "json",
    PARQUET: "parquet",
    PLAIN: "plain",
    RAW: "raw",
    W3C: "w3c",
};
exports.ExportTaskStatusCode = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    PENDING_CANCEL: "PENDING_CANCEL",
    RUNNING: "RUNNING",
};
exports.InheritedProperty = {
    ACCOUNT_DATA_PROTECTION: "ACCOUNT_DATA_PROTECTION",
};
exports.OrderBy = {
    LastEventTime: "LastEventTime",
    LogStreamName: "LogStreamName",
};
exports.StandardUnit = {
    Bits: "Bits",
    BitsSecond: "Bits/Second",
    Bytes: "Bytes",
    BytesSecond: "Bytes/Second",
    Count: "Count",
    CountSecond: "Count/Second",
    Gigabits: "Gigabits",
    GigabitsSecond: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    GigabytesSecond: "Gigabytes/Second",
    Kilobits: "Kilobits",
    KilobitsSecond: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    KilobytesSecond: "Kilobytes/Second",
    Megabits: "Megabits",
    MegabitsSecond: "Megabits/Second",
    Megabytes: "Megabytes",
    MegabytesSecond: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    TerabitsSecond: "Terabits/Second",
    Terabytes: "Terabytes",
    TerabytesSecond: "Terabytes/Second",
};
exports.QueryStatus = {
    Cancelled: "Cancelled",
    Complete: "Complete",
    Failed: "Failed",
    Running: "Running",
    Scheduled: "Scheduled",
    Timeout: "Timeout",
    Unknown: "Unknown",
};
exports.Distribution = {
    ByLogStream: "ByLogStream",
    Random: "Random",
};
class InvalidSequenceTokenException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "InvalidSequenceTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSequenceTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSequenceTokenException.prototype);
        this.expectedSequenceToken = opts.expectedSequenceToken;
    }
}
exports.InvalidSequenceTokenException = InvalidSequenceTokenException;
exports.SuppressionState = {
    SUPPRESSED: "SUPPRESSED",
    UNSUPPRESSED: "UNSUPPRESSED",
};
class UnrecognizedClientException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "UnrecognizedClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnrecognizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnrecognizedClientException.prototype);
    }
}
exports.UnrecognizedClientException = UnrecognizedClientException;
class SessionStreamingException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "SessionStreamingException",
            $fault: "client",
            ...opts,
        });
        this.name = "SessionStreamingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SessionStreamingException.prototype);
    }
}
exports.SessionStreamingException = SessionStreamingException;
class SessionTimeoutException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "SessionTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "SessionTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SessionTimeoutException.prototype);
    }
}
exports.SessionTimeoutException = SessionTimeoutException;
var StartLiveTailResponseStream;
(function (StartLiveTailResponseStream) {
    StartLiveTailResponseStream.visit = (value, visitor) => {
        if (value.sessionStart !== undefined)
            return visitor.sessionStart(value.sessionStart);
        if (value.sessionUpdate !== undefined)
            return visitor.sessionUpdate(value.sessionUpdate);
        if (value.SessionTimeoutException !== undefined)
            return visitor.SessionTimeoutException(value.SessionTimeoutException);
        if (value.SessionStreamingException !== undefined)
            return visitor.SessionStreamingException(value.SessionStreamingException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(StartLiveTailResponseStream = exports.StartLiveTailResponseStream || (exports.StartLiveTailResponseStream = {}));
class MalformedQueryException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "MalformedQueryException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedQueryException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedQueryException.prototype);
        this.queryCompileError = opts.queryCompileError;
    }
}
exports.MalformedQueryException = MalformedQueryException;
class TooManyTagsException extends CloudWatchLogsServiceException_1.CloudWatchLogsServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.resourceName = opts.resourceName;
    }
}
exports.TooManyTagsException = TooManyTagsException;
exports.SuppressionUnit = {
    HOURS: "HOURS",
    MINUTES: "MINUTES",
    SECONDS: "SECONDS",
};
exports.SuppressionType = {
    INFINITE: "INFINITE",
    LIMITED: "LIMITED",
};
const StartLiveTailResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.sessionStart !== undefined)
        return { sessionStart: obj.sessionStart };
    if (obj.sessionUpdate !== undefined)
        return { sessionUpdate: obj.sessionUpdate };
    if (obj.SessionTimeoutException !== undefined)
        return { SessionTimeoutException: obj.SessionTimeoutException };
    if (obj.SessionStreamingException !== undefined)
        return { SessionStreamingException: obj.SessionStreamingException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.StartLiveTailResponseStreamFilterSensitiveLog = StartLiveTailResponseStreamFilterSensitiveLog;
const StartLiveTailResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.responseStream && { responseStream: "STREAMING_CONTENT" }),
});
exports.StartLiveTailResponseFilterSensitiveLog = StartLiveTailResponseFilterSensitiveLog;
