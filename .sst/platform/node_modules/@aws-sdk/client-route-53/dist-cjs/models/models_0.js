"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryLoggingConfigAlreadyExists = exports.NoSuchCloudWatchLogsLogGroup = exports.InsufficientCloudWatchLogsResourcePolicy = exports.TooManyKeySigningKeys = exports.KeySigningKeyAlreadyExists = exports.InvalidKeySigningKeyName = exports.InvalidArgument = exports.TooManyHostedZones = exports.NoSuchDelegationSet = exports.InvalidDomainName = exports.HostedZoneAlreadyExists = exports.DelegationSetNotReusable = exports.DelegationSetNotAvailable = exports.TooManyHealthChecks = exports.HealthCheckAlreadyExists = exports.Statistic = exports.ComparisonOperator = exports.HealthCheckType = exports.HealthCheckRegion = exports.InsufficientDataHealthStatus = exports.CidrCollectionAlreadyExistsException = exports.ThrottlingException = exports.TagResourceType = exports.NoSuchHealthCheck = exports.InvalidChangeBatch = exports.RRType = exports.ResourceRecordSetRegion = exports.ResourceRecordSetFailover = exports.ChangeAction = exports.NoSuchCidrCollectionException = exports.CidrCollectionVersionMismatchException = exports.CidrBlockInUseException = exports.CidrCollectionChangeAction = exports.PublicZoneVPCAssociation = exports.PriorRequestNotComplete = exports.NotAuthorizedException = exports.NoSuchHostedZone = exports.LimitsExceeded = exports.InvalidVPCId = exports.ConflictingDomainExists = exports.VPCRegion = exports.CloudWatchRegion = exports.NoSuchKeySigningKey = exports.InvalidSigningStatus = exports.InvalidKMSArn = exports.InvalidKeySigningKeyStatus = exports.InvalidInput = exports.ConcurrentModification = exports.ChangeStatus = exports.AccountLimitType = void 0;
exports.ConflictingTypes = exports.ResettableElementName = exports.HealthCheckVersionMismatch = exports.InvalidPaginationToken = exports.HostedZoneType = exports.NoSuchCidrLocationException = exports.ReusableDelegationSetLimitType = exports.HostedZoneNotPrivate = exports.HostedZoneLimitType = exports.IncompatibleVersion = exports.NoSuchGeoLocation = exports.NoSuchChange = exports.KeySigningKeyWithActiveStatusNotFound = exports.HostedZonePartiallyDelegated = exports.VPCAssociationNotFound = exports.LastVPCAssociation = exports.DNSSECNotFound = exports.VPCAssociationAuthorizationNotFound = exports.NoSuchTrafficPolicyInstance = exports.TrafficPolicyInUse = exports.DelegationSetInUse = exports.NoSuchQueryLoggingConfig = exports.HostedZoneNotEmpty = exports.HealthCheckInUse = exports.CidrCollectionInUseException = exports.KeySigningKeyInUse = exports.KeySigningKeyInParentDSRecord = exports.TooManyVPCAssociationAuthorizations = exports.TooManyTrafficPolicyVersionsForCurrentPolicy = exports.TrafficPolicyInstanceAlreadyExists = exports.TooManyTrafficPolicyInstances = exports.NoSuchTrafficPolicy = exports.TrafficPolicyAlreadyExists = exports.TooManyTrafficPolicies = exports.InvalidTrafficPolicyDocument = exports.HostedZoneNotFound = exports.DelegationSetAlreadyReusable = exports.DelegationSetAlreadyCreated = void 0;
const Route53ServiceException_1 = require("./Route53ServiceException");
exports.AccountLimitType = {
    MAX_HEALTH_CHECKS_BY_OWNER: "MAX_HEALTH_CHECKS_BY_OWNER",
    MAX_HOSTED_ZONES_BY_OWNER: "MAX_HOSTED_ZONES_BY_OWNER",
    MAX_REUSABLE_DELEGATION_SETS_BY_OWNER: "MAX_REUSABLE_DELEGATION_SETS_BY_OWNER",
    MAX_TRAFFIC_POLICIES_BY_OWNER: "MAX_TRAFFIC_POLICIES_BY_OWNER",
    MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER: "MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER",
};
exports.ChangeStatus = {
    INSYNC: "INSYNC",
    PENDING: "PENDING",
};
class ConcurrentModification extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModification",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModification";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModification.prototype);
    }
}
exports.ConcurrentModification = ConcurrentModification;
class InvalidInput extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidInput",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInput";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInput.prototype);
    }
}
exports.InvalidInput = InvalidInput;
class InvalidKeySigningKeyStatus extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidKeySigningKeyStatus",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKeySigningKeyStatus";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeySigningKeyStatus.prototype);
    }
}
exports.InvalidKeySigningKeyStatus = InvalidKeySigningKeyStatus;
class InvalidKMSArn extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidKMSArn",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKMSArn";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKMSArn.prototype);
    }
}
exports.InvalidKMSArn = InvalidKMSArn;
class InvalidSigningStatus extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidSigningStatus",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSigningStatus";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSigningStatus.prototype);
    }
}
exports.InvalidSigningStatus = InvalidSigningStatus;
class NoSuchKeySigningKey extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchKeySigningKey",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchKeySigningKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchKeySigningKey.prototype);
    }
}
exports.NoSuchKeySigningKey = NoSuchKeySigningKey;
exports.CloudWatchRegion = {
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ca_central_1: "ca-central-1",
    ca_west_1: "ca-west-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_iso_east_1: "us-iso-east-1",
    us_iso_west_1: "us-iso-west-1",
    us_isob_east_1: "us-isob-east-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
exports.VPCRegion = {
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ca_central_1: "ca-central-1",
    ca_west_1: "ca-west-1",
    cn_north_1: "cn-north-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_iso_east_1: "us-iso-east-1",
    us_iso_west_1: "us-iso-west-1",
    us_isob_east_1: "us-isob-east-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
class ConflictingDomainExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "ConflictingDomainExists",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictingDomainExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictingDomainExists.prototype);
    }
}
exports.ConflictingDomainExists = ConflictingDomainExists;
class InvalidVPCId extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidVPCId",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidVPCId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidVPCId.prototype);
    }
}
exports.InvalidVPCId = InvalidVPCId;
class LimitsExceeded extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "LimitsExceeded",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitsExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitsExceeded.prototype);
    }
}
exports.LimitsExceeded = LimitsExceeded;
class NoSuchHostedZone extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchHostedZone",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchHostedZone";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchHostedZone.prototype);
    }
}
exports.NoSuchHostedZone = NoSuchHostedZone;
class NotAuthorizedException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
exports.NotAuthorizedException = NotAuthorizedException;
class PriorRequestNotComplete extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "PriorRequestNotComplete",
            $fault: "client",
            ...opts,
        });
        this.name = "PriorRequestNotComplete";
        this.$fault = "client";
        Object.setPrototypeOf(this, PriorRequestNotComplete.prototype);
    }
}
exports.PriorRequestNotComplete = PriorRequestNotComplete;
class PublicZoneVPCAssociation extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "PublicZoneVPCAssociation",
            $fault: "client",
            ...opts,
        });
        this.name = "PublicZoneVPCAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, PublicZoneVPCAssociation.prototype);
    }
}
exports.PublicZoneVPCAssociation = PublicZoneVPCAssociation;
exports.CidrCollectionChangeAction = {
    DELETE_IF_EXISTS: "DELETE_IF_EXISTS",
    PUT: "PUT",
};
class CidrBlockInUseException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "CidrBlockInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "CidrBlockInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CidrBlockInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.CidrBlockInUseException = CidrBlockInUseException;
class CidrCollectionVersionMismatchException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "CidrCollectionVersionMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "CidrCollectionVersionMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CidrCollectionVersionMismatchException.prototype);
        this.Message = opts.Message;
    }
}
exports.CidrCollectionVersionMismatchException = CidrCollectionVersionMismatchException;
class NoSuchCidrCollectionException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchCidrCollectionException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchCidrCollectionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchCidrCollectionException.prototype);
        this.Message = opts.Message;
    }
}
exports.NoSuchCidrCollectionException = NoSuchCidrCollectionException;
exports.ChangeAction = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPSERT: "UPSERT",
};
exports.ResourceRecordSetFailover = {
    PRIMARY: "PRIMARY",
    SECONDARY: "SECONDARY",
};
exports.ResourceRecordSetRegion = {
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ca_central_1: "ca-central-1",
    ca_west_1: "ca-west-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_east_2: "us-east-2",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
exports.RRType = {
    A: "A",
    AAAA: "AAAA",
    CAA: "CAA",
    CNAME: "CNAME",
    DS: "DS",
    MX: "MX",
    NAPTR: "NAPTR",
    NS: "NS",
    PTR: "PTR",
    SOA: "SOA",
    SPF: "SPF",
    SRV: "SRV",
    TXT: "TXT",
};
class InvalidChangeBatch extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidChangeBatch",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidChangeBatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidChangeBatch.prototype);
        this.messages = opts.messages;
    }
}
exports.InvalidChangeBatch = InvalidChangeBatch;
class NoSuchHealthCheck extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchHealthCheck",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchHealthCheck";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchHealthCheck.prototype);
    }
}
exports.NoSuchHealthCheck = NoSuchHealthCheck;
exports.TagResourceType = {
    healthcheck: "healthcheck",
    hostedzone: "hostedzone",
};
class ThrottlingException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
exports.ThrottlingException = ThrottlingException;
class CidrCollectionAlreadyExistsException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "CidrCollectionAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "CidrCollectionAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CidrCollectionAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.CidrCollectionAlreadyExistsException = CidrCollectionAlreadyExistsException;
exports.InsufficientDataHealthStatus = {
    Healthy: "Healthy",
    LastKnownStatus: "LastKnownStatus",
    Unhealthy: "Unhealthy",
};
exports.HealthCheckRegion = {
    ap_northeast_1: "ap-northeast-1",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    eu_west_1: "eu-west-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
exports.HealthCheckType = {
    CALCULATED: "CALCULATED",
    CLOUDWATCH_METRIC: "CLOUDWATCH_METRIC",
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    HTTPS_STR_MATCH: "HTTPS_STR_MATCH",
    HTTP_STR_MATCH: "HTTP_STR_MATCH",
    RECOVERY_CONTROL: "RECOVERY_CONTROL",
    TCP: "TCP",
};
exports.ComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold",
};
exports.Statistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
class HealthCheckAlreadyExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HealthCheckAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "HealthCheckAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, HealthCheckAlreadyExists.prototype);
    }
}
exports.HealthCheckAlreadyExists = HealthCheckAlreadyExists;
class TooManyHealthChecks extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyHealthChecks",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyHealthChecks";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyHealthChecks.prototype);
    }
}
exports.TooManyHealthChecks = TooManyHealthChecks;
class DelegationSetNotAvailable extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "DelegationSetNotAvailable",
            $fault: "client",
            ...opts,
        });
        this.name = "DelegationSetNotAvailable";
        this.$fault = "client";
        Object.setPrototypeOf(this, DelegationSetNotAvailable.prototype);
    }
}
exports.DelegationSetNotAvailable = DelegationSetNotAvailable;
class DelegationSetNotReusable extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "DelegationSetNotReusable",
            $fault: "client",
            ...opts,
        });
        this.name = "DelegationSetNotReusable";
        this.$fault = "client";
        Object.setPrototypeOf(this, DelegationSetNotReusable.prototype);
    }
}
exports.DelegationSetNotReusable = DelegationSetNotReusable;
class HostedZoneAlreadyExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HostedZoneAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "HostedZoneAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, HostedZoneAlreadyExists.prototype);
    }
}
exports.HostedZoneAlreadyExists = HostedZoneAlreadyExists;
class InvalidDomainName extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidDomainName",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDomainName";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDomainName.prototype);
    }
}
exports.InvalidDomainName = InvalidDomainName;
class NoSuchDelegationSet extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchDelegationSet",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchDelegationSet";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchDelegationSet.prototype);
    }
}
exports.NoSuchDelegationSet = NoSuchDelegationSet;
class TooManyHostedZones extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyHostedZones",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyHostedZones";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyHostedZones.prototype);
    }
}
exports.TooManyHostedZones = TooManyHostedZones;
class InvalidArgument extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidArgument",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgument";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgument.prototype);
    }
}
exports.InvalidArgument = InvalidArgument;
class InvalidKeySigningKeyName extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidKeySigningKeyName",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKeySigningKeyName";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeySigningKeyName.prototype);
    }
}
exports.InvalidKeySigningKeyName = InvalidKeySigningKeyName;
class KeySigningKeyAlreadyExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "KeySigningKeyAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "KeySigningKeyAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, KeySigningKeyAlreadyExists.prototype);
    }
}
exports.KeySigningKeyAlreadyExists = KeySigningKeyAlreadyExists;
class TooManyKeySigningKeys extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyKeySigningKeys",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyKeySigningKeys";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyKeySigningKeys.prototype);
    }
}
exports.TooManyKeySigningKeys = TooManyKeySigningKeys;
class InsufficientCloudWatchLogsResourcePolicy extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InsufficientCloudWatchLogsResourcePolicy",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientCloudWatchLogsResourcePolicy";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientCloudWatchLogsResourcePolicy.prototype);
    }
}
exports.InsufficientCloudWatchLogsResourcePolicy = InsufficientCloudWatchLogsResourcePolicy;
class NoSuchCloudWatchLogsLogGroup extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchCloudWatchLogsLogGroup",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchCloudWatchLogsLogGroup";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchCloudWatchLogsLogGroup.prototype);
    }
}
exports.NoSuchCloudWatchLogsLogGroup = NoSuchCloudWatchLogsLogGroup;
class QueryLoggingConfigAlreadyExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "QueryLoggingConfigAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "QueryLoggingConfigAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, QueryLoggingConfigAlreadyExists.prototype);
    }
}
exports.QueryLoggingConfigAlreadyExists = QueryLoggingConfigAlreadyExists;
class DelegationSetAlreadyCreated extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "DelegationSetAlreadyCreated",
            $fault: "client",
            ...opts,
        });
        this.name = "DelegationSetAlreadyCreated";
        this.$fault = "client";
        Object.setPrototypeOf(this, DelegationSetAlreadyCreated.prototype);
    }
}
exports.DelegationSetAlreadyCreated = DelegationSetAlreadyCreated;
class DelegationSetAlreadyReusable extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "DelegationSetAlreadyReusable",
            $fault: "client",
            ...opts,
        });
        this.name = "DelegationSetAlreadyReusable";
        this.$fault = "client";
        Object.setPrototypeOf(this, DelegationSetAlreadyReusable.prototype);
    }
}
exports.DelegationSetAlreadyReusable = DelegationSetAlreadyReusable;
class HostedZoneNotFound extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HostedZoneNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "HostedZoneNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, HostedZoneNotFound.prototype);
    }
}
exports.HostedZoneNotFound = HostedZoneNotFound;
class InvalidTrafficPolicyDocument extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidTrafficPolicyDocument",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTrafficPolicyDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTrafficPolicyDocument.prototype);
    }
}
exports.InvalidTrafficPolicyDocument = InvalidTrafficPolicyDocument;
class TooManyTrafficPolicies extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyTrafficPolicies",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTrafficPolicies";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTrafficPolicies.prototype);
    }
}
exports.TooManyTrafficPolicies = TooManyTrafficPolicies;
class TrafficPolicyAlreadyExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TrafficPolicyAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "TrafficPolicyAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, TrafficPolicyAlreadyExists.prototype);
    }
}
exports.TrafficPolicyAlreadyExists = TrafficPolicyAlreadyExists;
class NoSuchTrafficPolicy extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchTrafficPolicy",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchTrafficPolicy";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchTrafficPolicy.prototype);
    }
}
exports.NoSuchTrafficPolicy = NoSuchTrafficPolicy;
class TooManyTrafficPolicyInstances extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyTrafficPolicyInstances",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTrafficPolicyInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTrafficPolicyInstances.prototype);
    }
}
exports.TooManyTrafficPolicyInstances = TooManyTrafficPolicyInstances;
class TrafficPolicyInstanceAlreadyExists extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TrafficPolicyInstanceAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "TrafficPolicyInstanceAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, TrafficPolicyInstanceAlreadyExists.prototype);
    }
}
exports.TrafficPolicyInstanceAlreadyExists = TrafficPolicyInstanceAlreadyExists;
class TooManyTrafficPolicyVersionsForCurrentPolicy extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyTrafficPolicyVersionsForCurrentPolicy",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTrafficPolicyVersionsForCurrentPolicy";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTrafficPolicyVersionsForCurrentPolicy.prototype);
    }
}
exports.TooManyTrafficPolicyVersionsForCurrentPolicy = TooManyTrafficPolicyVersionsForCurrentPolicy;
class TooManyVPCAssociationAuthorizations extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TooManyVPCAssociationAuthorizations",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyVPCAssociationAuthorizations";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyVPCAssociationAuthorizations.prototype);
    }
}
exports.TooManyVPCAssociationAuthorizations = TooManyVPCAssociationAuthorizations;
class KeySigningKeyInParentDSRecord extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "KeySigningKeyInParentDSRecord",
            $fault: "client",
            ...opts,
        });
        this.name = "KeySigningKeyInParentDSRecord";
        this.$fault = "client";
        Object.setPrototypeOf(this, KeySigningKeyInParentDSRecord.prototype);
    }
}
exports.KeySigningKeyInParentDSRecord = KeySigningKeyInParentDSRecord;
class KeySigningKeyInUse extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "KeySigningKeyInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "KeySigningKeyInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, KeySigningKeyInUse.prototype);
    }
}
exports.KeySigningKeyInUse = KeySigningKeyInUse;
class CidrCollectionInUseException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "CidrCollectionInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "CidrCollectionInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CidrCollectionInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.CidrCollectionInUseException = CidrCollectionInUseException;
class HealthCheckInUse extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HealthCheckInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "HealthCheckInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, HealthCheckInUse.prototype);
    }
}
exports.HealthCheckInUse = HealthCheckInUse;
class HostedZoneNotEmpty extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HostedZoneNotEmpty",
            $fault: "client",
            ...opts,
        });
        this.name = "HostedZoneNotEmpty";
        this.$fault = "client";
        Object.setPrototypeOf(this, HostedZoneNotEmpty.prototype);
    }
}
exports.HostedZoneNotEmpty = HostedZoneNotEmpty;
class NoSuchQueryLoggingConfig extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchQueryLoggingConfig",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchQueryLoggingConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchQueryLoggingConfig.prototype);
    }
}
exports.NoSuchQueryLoggingConfig = NoSuchQueryLoggingConfig;
class DelegationSetInUse extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "DelegationSetInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "DelegationSetInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, DelegationSetInUse.prototype);
    }
}
exports.DelegationSetInUse = DelegationSetInUse;
class TrafficPolicyInUse extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "TrafficPolicyInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "TrafficPolicyInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, TrafficPolicyInUse.prototype);
    }
}
exports.TrafficPolicyInUse = TrafficPolicyInUse;
class NoSuchTrafficPolicyInstance extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchTrafficPolicyInstance",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchTrafficPolicyInstance";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchTrafficPolicyInstance.prototype);
    }
}
exports.NoSuchTrafficPolicyInstance = NoSuchTrafficPolicyInstance;
class VPCAssociationAuthorizationNotFound extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "VPCAssociationAuthorizationNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "VPCAssociationAuthorizationNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, VPCAssociationAuthorizationNotFound.prototype);
    }
}
exports.VPCAssociationAuthorizationNotFound = VPCAssociationAuthorizationNotFound;
class DNSSECNotFound extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "DNSSECNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "DNSSECNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, DNSSECNotFound.prototype);
    }
}
exports.DNSSECNotFound = DNSSECNotFound;
class LastVPCAssociation extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "LastVPCAssociation",
            $fault: "client",
            ...opts,
        });
        this.name = "LastVPCAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, LastVPCAssociation.prototype);
    }
}
exports.LastVPCAssociation = LastVPCAssociation;
class VPCAssociationNotFound extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "VPCAssociationNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "VPCAssociationNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, VPCAssociationNotFound.prototype);
    }
}
exports.VPCAssociationNotFound = VPCAssociationNotFound;
class HostedZonePartiallyDelegated extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HostedZonePartiallyDelegated",
            $fault: "client",
            ...opts,
        });
        this.name = "HostedZonePartiallyDelegated";
        this.$fault = "client";
        Object.setPrototypeOf(this, HostedZonePartiallyDelegated.prototype);
    }
}
exports.HostedZonePartiallyDelegated = HostedZonePartiallyDelegated;
class KeySigningKeyWithActiveStatusNotFound extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "KeySigningKeyWithActiveStatusNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "KeySigningKeyWithActiveStatusNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, KeySigningKeyWithActiveStatusNotFound.prototype);
    }
}
exports.KeySigningKeyWithActiveStatusNotFound = KeySigningKeyWithActiveStatusNotFound;
class NoSuchChange extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchChange",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchChange";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchChange.prototype);
    }
}
exports.NoSuchChange = NoSuchChange;
class NoSuchGeoLocation extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchGeoLocation",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchGeoLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchGeoLocation.prototype);
    }
}
exports.NoSuchGeoLocation = NoSuchGeoLocation;
class IncompatibleVersion extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "IncompatibleVersion",
            $fault: "client",
            ...opts,
        });
        this.name = "IncompatibleVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatibleVersion.prototype);
    }
}
exports.IncompatibleVersion = IncompatibleVersion;
exports.HostedZoneLimitType = {
    MAX_RRSETS_BY_ZONE: "MAX_RRSETS_BY_ZONE",
    MAX_VPCS_ASSOCIATED_BY_ZONE: "MAX_VPCS_ASSOCIATED_BY_ZONE",
};
class HostedZoneNotPrivate extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HostedZoneNotPrivate",
            $fault: "client",
            ...opts,
        });
        this.name = "HostedZoneNotPrivate";
        this.$fault = "client";
        Object.setPrototypeOf(this, HostedZoneNotPrivate.prototype);
    }
}
exports.HostedZoneNotPrivate = HostedZoneNotPrivate;
exports.ReusableDelegationSetLimitType = {
    MAX_ZONES_BY_REUSABLE_DELEGATION_SET: "MAX_ZONES_BY_REUSABLE_DELEGATION_SET",
};
class NoSuchCidrLocationException extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchCidrLocationException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchCidrLocationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchCidrLocationException.prototype);
        this.Message = opts.Message;
    }
}
exports.NoSuchCidrLocationException = NoSuchCidrLocationException;
exports.HostedZoneType = {
    PRIVATE_HOSTED_ZONE: "PrivateHostedZone",
};
class InvalidPaginationToken extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "InvalidPaginationToken",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPaginationToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPaginationToken.prototype);
    }
}
exports.InvalidPaginationToken = InvalidPaginationToken;
class HealthCheckVersionMismatch extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "HealthCheckVersionMismatch",
            $fault: "client",
            ...opts,
        });
        this.name = "HealthCheckVersionMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, HealthCheckVersionMismatch.prototype);
    }
}
exports.HealthCheckVersionMismatch = HealthCheckVersionMismatch;
exports.ResettableElementName = {
    ChildHealthChecks: "ChildHealthChecks",
    FullyQualifiedDomainName: "FullyQualifiedDomainName",
    Regions: "Regions",
    ResourcePath: "ResourcePath",
};
class ConflictingTypes extends Route53ServiceException_1.Route53ServiceException {
    constructor(opts) {
        super({
            name: "ConflictingTypes",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictingTypes";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictingTypes.prototype);
    }
}
exports.ConflictingTypes = ConflictingTypes;
