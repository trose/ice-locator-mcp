import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { GetDNSSECRequest, GetDNSSECResponse } from "../models/models_0";
import { Route53ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../Route53Client";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetDNSSECCommand}.
 */
export interface GetDNSSECCommandInput extends GetDNSSECRequest {
}
/**
 * @public
 *
 * The output of {@link GetDNSSECCommand}.
 */
export interface GetDNSSECCommandOutput extends GetDNSSECResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Returns information about DNSSEC for a specific hosted zone, including the key-signing
 * 			keys (KSKs) in the hosted zone.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { Route53Client, GetDNSSECCommand } from "@aws-sdk/client-route-53"; // ES Modules import
 * // const { Route53Client, GetDNSSECCommand } = require("@aws-sdk/client-route-53"); // CommonJS import
 * const client = new Route53Client(config);
 * const input = { // GetDNSSECRequest
 *   HostedZoneId: "STRING_VALUE", // required
 * };
 * const command = new GetDNSSECCommand(input);
 * const response = await client.send(command);
 * // { // GetDNSSECResponse
 * //   Status: { // DNSSECStatus
 * //     ServeSignature: "STRING_VALUE",
 * //     StatusMessage: "STRING_VALUE",
 * //   },
 * //   KeySigningKeys: [ // KeySigningKeys // required
 * //     { // KeySigningKey
 * //       Name: "STRING_VALUE",
 * //       KmsArn: "STRING_VALUE",
 * //       Flag: Number("int"),
 * //       SigningAlgorithmMnemonic: "STRING_VALUE",
 * //       SigningAlgorithmType: Number("int"),
 * //       DigestAlgorithmMnemonic: "STRING_VALUE",
 * //       DigestAlgorithmType: Number("int"),
 * //       KeyTag: Number("int"),
 * //       DigestValue: "STRING_VALUE",
 * //       PublicKey: "STRING_VALUE",
 * //       DSRecord: "STRING_VALUE",
 * //       DNSKEYRecord: "STRING_VALUE",
 * //       Status: "STRING_VALUE",
 * //       StatusMessage: "STRING_VALUE",
 * //       CreatedDate: new Date("TIMESTAMP"),
 * //       LastModifiedDate: new Date("TIMESTAMP"),
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param GetDNSSECCommandInput - {@link GetDNSSECCommandInput}
 * @returns {@link GetDNSSECCommandOutput}
 * @see {@link GetDNSSECCommandInput} for command's `input` shape.
 * @see {@link GetDNSSECCommandOutput} for command's `response` shape.
 * @see {@link Route53ClientResolvedConfig | config} for Route53Client's `config` shape.
 *
 * @throws {@link InvalidArgument} (client fault)
 *  <p>Parameter name is not valid.</p>
 *
 * @throws {@link InvalidInput} (client fault)
 *  <p>The input is not valid.</p>
 *
 * @throws {@link NoSuchHostedZone} (client fault)
 *  <p>No hosted zone exists with the ID that you specified.</p>
 *
 * @throws {@link Route53ServiceException}
 * <p>Base exception class for all service exceptions from Route53 service.</p>
 *
 */
export declare class GetDNSSECCommand extends $Command<GetDNSSECCommandInput, GetDNSSECCommandOutput, Route53ClientResolvedConfig> {
    readonly input: GetDNSSECCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: GetDNSSECCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: Route53ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDNSSECCommandInput, GetDNSSECCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
