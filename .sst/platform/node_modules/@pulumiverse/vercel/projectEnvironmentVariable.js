"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectEnvironmentVariable = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleProject = new vercel.Project("exampleProject", {gitRepository: {
 *     type: "github",
 *     repo: "vercel/some-repo",
 * }});
 * // An environment variable that will be created
 * // for this project for the "production" environment.
 * const exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable("exampleProjectEnvironmentVariable", {
 *     projectId: exampleProject.id,
 *     key: "foo",
 *     value: "bar",
 *     targets: ["production"],
 * });
 * // An environment variable that will be created
 * // for this project for the "preview" environment when the branch is "staging".
 * const exampleGitBranch = new vercel.ProjectEnvironmentVariable("exampleGitBranch", {
 *     projectId: exampleProject.id,
 *     key: "foo",
 *     value: "bar-staging",
 *     targets: ["preview"],
 *     gitBranch: "staging",
 * });
 * // A sensitive environment variable that will be created
 * // for this project for the "production" environment.
 * const exampleSensitive = new vercel.ProjectEnvironmentVariable("exampleSensitive", {
 *     projectId: exampleProject.id,
 *     key: "foo",
 *     value: "bar-production",
 *     targets: ["production"],
 *     sensitive: true,
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project_id and environment variable id.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * - environment variable id can be taken from the network tab inside developer tools, while you are on the project page,
 *
 * or can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)
 *
 * #
 *
 * Note also, that the value field for sensitive environment variables will be imported as `null`.
 *
 * ```sh
 * $ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt
 * ```
 *
 * Alternatively, you can import via the team_id, project_id and
 *
 * environment variable id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * - environment variable id can be taken from the network tab inside developer tools, while you are on the project page,
 *
 * or can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)
 *
 * #
 *
 * Note also, that the value field for sensitive environment variables will be imported as `null`.
 *
 * ```sh
 * $ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt
 * ```
 */
class ProjectEnvironmentVariable extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnvironmentVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectEnvironmentVariable(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectEnvironmentVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectEnvironmentVariable.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["gitBranch"] = state ? state.gitBranch : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sensitive"] = state ? state.sensitive : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["gitBranch"] = args ? args.gitBranch : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sensitive"] = args ? args.sensitive : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["value"] = (args === null || args === void 0 ? void 0 : args.value) ? pulumi.secret(args.value) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectEnvironmentVariable.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProjectEnvironmentVariable = ProjectEnvironmentVariable;
/** @internal */
ProjectEnvironmentVariable.__pulumiType = 'vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable';
//# sourceMappingURL=projectEnvironmentVariable.js.map