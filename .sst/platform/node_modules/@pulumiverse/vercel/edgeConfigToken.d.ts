import * as pulumi from "@pulumi/pulumi";
/**
 * Provides an Edge Config Token resource.
 *
 * An Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.
 *
 * An Edge Config token is used to authenticate against an Edge Config's endpoint.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleEdgeConfig = new vercel.EdgeConfig("exampleEdgeConfig", {});
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleEdgeConfigToken = new vercel.EdgeConfigToken("exampleEdgeConfigToken", {
 *     edgeConfigId: exampleEdgeConfig.id,
 *     label: "example token",
 * });
 * const exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable("exampleProjectEnvironmentVariable", {
 *     projectId: exampleProject.id,
 *     targets: [
 *         "production",
 *         "preview",
 *         "development",
 *     ],
 *     key: "EDGE_CONFIG",
 *     value: exampleEdgeConfigToken.connectionString,
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the edge config id and token value.
 *
 * - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
 *
 * - token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.
 *
 * ```sh
 * $ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and edge_config_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
 *
 * - token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.
 *
 * ```sh
 * $ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 */
export declare class EdgeConfigToken extends pulumi.CustomResource {
    /**
     * Get an existing EdgeConfigToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeConfigTokenState, opts?: pulumi.CustomResourceOptions): EdgeConfigToken;
    /**
     * Returns true if the given object is an instance of EdgeConfigToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EdgeConfigToken;
    /**
     * A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.
     */
    readonly connectionString: pulumi.Output<string>;
    /**
     * The ID of the Edge Config store.
     */
    readonly edgeConfigId: pulumi.Output<string>;
    /**
     * The label of the Edge Config Token.
     */
    readonly label: pulumi.Output<string>;
    /**
     * The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: pulumi.Output<string>;
    /**
     * A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.
     */
    readonly token: pulumi.Output<string>;
    /**
     * Create a EdgeConfigToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeConfigTokenArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering EdgeConfigToken resources.
 */
export interface EdgeConfigTokenState {
    /**
     * A connection string is a URL that connects a project to an Edge Config. The variable can be called anything, but our Edge Config client SDK will search for process.env.EDGE_CONFIG by default.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * The ID of the Edge Config store.
     */
    edgeConfigId?: pulumi.Input<string>;
    /**
     * The label of the Edge Config Token.
     */
    label?: pulumi.Input<string>;
    /**
     * The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * A read access token used for authenticating against the Edge Config's endpoint for high volume, low-latency requests.
     */
    token?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a EdgeConfigToken resource.
 */
export interface EdgeConfigTokenArgs {
    /**
     * The ID of the Edge Config store.
     */
    edgeConfigId: pulumi.Input<string>;
    /**
     * The label of the Edge Config Token.
     */
    label: pulumi.Input<string>;
    /**
     * The ID of the team the Edge Config should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
