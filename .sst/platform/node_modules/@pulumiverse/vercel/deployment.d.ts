import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
export declare class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment;
    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Deployment;
    readonly deleteOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
     */
    readonly domains: pulumi.Output<string[]>;
    /**
     * A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.
     */
    readonly environment: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `gitSource` is not set.
     */
    readonly files: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
     */
    readonly pathPrefix: pulumi.Output<string | undefined>;
    /**
     * true if the deployment is a production deployment, meaning production aliases will be assigned.
     */
    readonly production: pulumi.Output<boolean>;
    /**
     * The project ID to add the deployment to.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * Project settings that will be applied to the deployment.
     */
    readonly projectSettings: pulumi.Output<outputs.DeploymentProjectSettings | undefined>;
    /**
     * The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.
     */
    readonly ref: pulumi.Output<string | undefined>;
    /**
     * The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: pulumi.Output<string>;
    /**
     * A unique URL that is automatically generated for a deployment.
     */
    readonly url: pulumi.Output<string>;
    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    deleteOnDestroy?: pulumi.Input<boolean>;
    /**
     * A list of all the domains (default domains, staging domains and production domains) that were assigned upon deployment creation.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.
     */
    environment?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `gitSource` is not set.
     */
    files?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * true if the deployment is a production deployment, meaning production aliases will be assigned.
     */
    production?: pulumi.Input<boolean>;
    /**
     * The project ID to add the deployment to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Project settings that will be applied to the deployment.
     */
    projectSettings?: pulumi.Input<inputs.DeploymentProjectSettings>;
    /**
     * The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.
     */
    ref?: pulumi.Input<string>;
    /**
     * The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * A unique URL that is automatically generated for a deployment.
     */
    url?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    deleteOnDestroy?: pulumi.Input<boolean>;
    /**
     * A map of environment variable names to values. These are specific to a Deployment, and can also be configured on the `vercel.Project` resource.
     */
    environment?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of files to be uploaded for the deployment. This should be provided by a `vercel.getProjectDirectory` or `vercel.getFile` data source. Required if `gitSource` is not set.
     */
    files?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * If specified then the `pathPrefix` will be stripped from the start of file paths as they are uploaded to Vercel. If this is omitted, then any leading `../`s will be stripped.
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * true if the deployment is a production deployment, meaning production aliases will be assigned.
     */
    production?: pulumi.Input<boolean>;
    /**
     * The project ID to add the deployment to.
     */
    projectId: pulumi.Input<string>;
    /**
     * Project settings that will be applied to the deployment.
     */
    projectSettings?: pulumi.Input<inputs.DeploymentProjectSettings>;
    /**
     * The branch or commit hash that should be deployed. Note this will only work if the project is configured to use a Git repository. Required if `ref` is not set.
     */
    ref?: pulumi.Input<string>;
    /**
     * The team ID to add the deployment to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
