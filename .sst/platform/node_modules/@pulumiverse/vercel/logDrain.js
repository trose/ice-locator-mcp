"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogDrain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Configurable Log Drain resource.
 *
 * > For Log Drain integrations, please see the [Integration Log Drain docs](https://vercel.com/docs/observability/log-drains#log-drains-integration).
 *
 * Log Drains collect all of your logs using a service specializing in storing app logs.
 *
 * Teams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.
 *
 * > Only Pro and Enterprise teams can create Configurable Log Drains.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumi/vercel";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleEndpointVerification = vercel.getEndpointVerification({});
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleLogDrain = new vercel.LogDrain("exampleLogDrain", {
 *     deliveryFormat: "json",
 *     environments: ["production"],
 *     headers: {
 *         "some-key": "some-value",
 *     },
 *     projectIds: [exampleProject.id],
 *     samplingRate: 0.8,
 *     secret: "a_very_long_and_very_well_specified_secret",
 *     sources: ["static"],
 *     endpoint: "https://example.com/my-log-drain-endpoint",
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the log_drain_id.
 *
 * - log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).
 *
 * ```sh
 * $ pulumi import vercel:index/logDrain:LogDrain example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and edge_config_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).
 *
 * ```sh
 * $ pulumi import vercel:index/logDrain:LogDrain example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 */
class LogDrain extends pulumi.CustomResource {
    /**
     * Get an existing LogDrain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogDrain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogDrain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDrain.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["deliveryFormat"] = state ? state.deliveryFormat : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["projectIds"] = state ? state.projectIds : undefined;
            resourceInputs["samplingRate"] = state ? state.samplingRate : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.deliveryFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryFormat'");
            }
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.environments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environments'");
            }
            if ((!args || args.sources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["deliveryFormat"] = args ? args.deliveryFormat : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["projectIds"] = args ? args.projectIds : undefined;
            resourceInputs["samplingRate"] = args ? args.samplingRate : undefined;
            resourceInputs["secret"] = (args === null || args === void 0 ? void 0 : args.secret) ? pulumi.secret(args.secret) : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogDrain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LogDrain = LogDrain;
/** @internal */
LogDrain.__pulumiType = 'vercel:index/logDrain:LogDrain';
//# sourceMappingURL=logDrain.js.map