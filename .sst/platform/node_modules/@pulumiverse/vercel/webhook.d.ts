import * as pulumi from "@pulumi/pulumi";
/**
 * A webhook is a trigger-based HTTP endpoint configured to receive HTTP POST requests through events.
 *
 * When an event happens, a webhook is sent to a third-party app, which can then take appropriate action.
 *
 * > Only Pro and Enterprise teams are able to configure these webhooks at the account level.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const example = new vercel.Project("example", {});
 * const example2 = new vercel.Project("example2", {});
 * const withProjectIds = new vercel.Webhook("withProjectIds", {
 *     events: [
 *         "deployment.created",
 *         "deployment.succeeded",
 *     ],
 *     endpoint: "https://example.com/endpoint",
 *     projectIds: [
 *         example.id,
 *         example2.id,
 *     ],
 * });
 * const withoutProjectIds = new vercel.Webhook("withoutProjectIds", {
 *     events: [
 *         "deployment.created",
 *         "deployment.succeeded",
 *     ],
 *     endpoint: "https://example.com/endpoint",
 * });
 * ```
 */
export declare class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook;
    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Webhook;
    /**
     * Webhooks events will be sent as POST requests to this URL.
     */
    readonly endpoint: pulumi.Output<string>;
    /**
     * A list of the events the webhook will listen to. At least one must be present.
     */
    readonly events: pulumi.Output<string[]>;
    /**
     * A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.
     */
    readonly projectIds: pulumi.Output<string[] | undefined>;
    /**
     * A secret value which will be provided in the `x-vercel-signature` header and can be used to verify the authenticity of the webhook. See https://vercel.com/docs/observability/webhooks-overview/webhooks-api#securing-webhooks for further details.
     */
    readonly secret: pulumi.Output<string>;
    /**
     * The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: pulumi.Output<string>;
    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * Webhooks events will be sent as POST requests to this URL.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * A list of the events the webhook will listen to. At least one must be present.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A secret value which will be provided in the `x-vercel-signature` header and can be used to verify the authenticity of the webhook. See https://vercel.com/docs/observability/webhooks-overview/webhooks-api#securing-webhooks for further details.
     */
    secret?: pulumi.Input<string>;
    /**
     * The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * Webhooks events will be sent as POST requests to this URL.
     */
    endpoint: pulumi.Input<string>;
    /**
     * A list of the events the webhook will listen to. At least one must be present.
     */
    events: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of project IDs that the webhook should be associated with. These projects should send events to the specified endpoint.
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the team the Webhook should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
