"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectDomain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Project Domain resource.
 *
 * A Project Domain is used to associate a domain name with a `vercel.Project`.
 *
 * By default, Project Domains will be automatically applied to any `production` deployments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleProject = new vercel.Project("exampleProject", {});
 * // A simple domain that will be automatically
 * // applied to each production deployment
 * const exampleProjectDomain = new vercel.ProjectDomain("exampleProjectDomain", {
 *     projectId: exampleProject.id,
 *     domain: "i-love.vercel.app",
 * });
 * // A redirect of a domain name to a second domain name.
 * // The status_code can optionally be controlled.
 * const exampleRedirect = new vercel.ProjectDomain("exampleRedirect", {
 *     projectId: exampleProject.id,
 *     domain: "i-also-love.vercel.app",
 *     redirect: exampleProjectDomain.domain,
 *     redirectStatusCode: 307,
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project ID and domain.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/projectDomain:ProjectDomain example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com
 * ```
 *
 * Alternatively, you can import via the team_id, project_id and domain name.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/projectDomain:ProjectDomain example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/example.com
 * ```
 */
class ProjectDomain extends pulumi.CustomResource {
    /**
     * Get an existing ProjectDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectDomain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectDomain.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["gitBranch"] = state ? state.gitBranch : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["redirect"] = state ? state.redirect : undefined;
            resourceInputs["redirectStatusCode"] = state ? state.redirectStatusCode : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["gitBranch"] = args ? args.gitBranch : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["redirect"] = args ? args.redirect : undefined;
            resourceInputs["redirectStatusCode"] = args ? args.redirectStatusCode : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectDomain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProjectDomain = ProjectDomain;
/** @internal */
ProjectDomain.__pulumiType = 'vercel:index/projectDomain:ProjectDomain';
//# sourceMappingURL=projectDomain.js.map