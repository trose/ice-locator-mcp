import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleProject = new vercel.Project("exampleProject", {gitRepository: {
 *     type: "github",
 *     repo: "vercel/some-repo",
 * }});
 * // An environment variable that will be created
 * // for this project for the "production" environment.
 * const exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable("exampleProjectEnvironmentVariable", {
 *     projectId: exampleProject.id,
 *     key: "foo",
 *     value: "bar",
 *     targets: ["production"],
 * });
 * // An environment variable that will be created
 * // for this project for the "preview" environment when the branch is "staging".
 * const exampleGitBranch = new vercel.ProjectEnvironmentVariable("exampleGitBranch", {
 *     projectId: exampleProject.id,
 *     key: "foo",
 *     value: "bar-staging",
 *     targets: ["preview"],
 *     gitBranch: "staging",
 * });
 * // A sensitive environment variable that will be created
 * // for this project for the "production" environment.
 * const exampleSensitive = new vercel.ProjectEnvironmentVariable("exampleSensitive", {
 *     projectId: exampleProject.id,
 *     key: "foo",
 *     value: "bar-production",
 *     targets: ["production"],
 *     sensitive: true,
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project_id and environment variable id.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * - environment variable id can be taken from the network tab inside developer tools, while you are on the project page,
 *
 * or can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)
 *
 * #
 *
 * Note also, that the value field for sensitive environment variables will be imported as `null`.
 *
 * ```sh
 * $ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt
 * ```
 *
 * Alternatively, you can import via the team_id, project_id and
 *
 * environment variable id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * - environment variable id can be taken from the network tab inside developer tools, while you are on the project page,
 *
 * or can be queried from Vercel API directly (https://vercel.com/docs/rest-api/endpoints/projects#retrieve-the-environment-variables-of-a-project-by-id-or-name)
 *
 * #
 *
 * Note also, that the value field for sensitive environment variables will be imported as `null`.
 *
 * ```sh
 * $ pulumi import vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/FdT2e1E5Of6Cihmt
 * ```
 */
export declare class ProjectEnvironmentVariable extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnvironmentVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectEnvironmentVariableState, opts?: pulumi.CustomResourceOptions): ProjectEnvironmentVariable;
    /**
     * Returns true if the given object is an instance of ProjectEnvironmentVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ProjectEnvironmentVariable;
    /**
     * The git branch of the Environment Variable.
     */
    readonly gitBranch: pulumi.Output<string | undefined>;
    /**
     * The name of the Environment Variable.
     */
    readonly key: pulumi.Output<string>;
    /**
     * The ID of the Vercel project.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
     */
    readonly sensitive: pulumi.Output<boolean>;
    /**
     * The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
     */
    readonly targets: pulumi.Output<string[]>;
    /**
     * The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: pulumi.Output<string>;
    /**
     * The value of the Environment Variable.
     */
    readonly value: pulumi.Output<string>;
    /**
     * Create a ProjectEnvironmentVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectEnvironmentVariableArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ProjectEnvironmentVariable resources.
 */
export interface ProjectEnvironmentVariableState {
    /**
     * The git branch of the Environment Variable.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * The name of the Environment Variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The ID of the Vercel project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
     */
    sensitive?: pulumi.Input<boolean>;
    /**
     * The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The value of the Environment Variable.
     */
    value?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ProjectEnvironmentVariable resource.
 */
export interface ProjectEnvironmentVariableArgs {
    /**
     * The git branch of the Environment Variable.
     */
    gitBranch?: pulumi.Input<string>;
    /**
     * The name of the Environment Variable.
     */
    key: pulumi.Input<string>;
    /**
     * The ID of the Vercel project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Whether the Environment Variable is sensitive or not. (May be affected by a [team-wide environment variable policy](https://vercel.com/docs/projects/environment-variables/sensitive-environment-variables#environment-variables-policy))
     */
    sensitive?: pulumi.Input<boolean>;
    /**
     * The environments that the Environment Variable should be present on. Valid targets are either `production`, `preview`, or `development`.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Vercel team.Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * The value of the Environment Variable.
     */
    value: pulumi.Input<string>;
}
