import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Configurable Log Drain resource.
 *
 * > For Log Drain integrations, please see the [Integration Log Drain docs](https://vercel.com/docs/observability/log-drains#log-drains-integration).
 *
 * Log Drains collect all of your logs using a service specializing in storing app logs.
 *
 * Teams on Pro and Enterprise plans can subscribe to log drains that are generic and configurable from the Vercel dashboard without creating an integration. This allows you to use a HTTP service to receive logs through Vercel's log drains.
 *
 * > Only Pro and Enterprise teams can create Configurable Log Drains.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumi/vercel";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleEndpointVerification = vercel.getEndpointVerification({});
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleLogDrain = new vercel.LogDrain("exampleLogDrain", {
 *     deliveryFormat: "json",
 *     environments: ["production"],
 *     headers: {
 *         "some-key": "some-value",
 *     },
 *     projectIds: [exampleProject.id],
 *     samplingRate: 0.8,
 *     secret: "a_very_long_and_very_well_specified_secret",
 *     sources: ["static"],
 *     endpoint: "https://example.com/my-log-drain-endpoint",
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the log_drain_id.
 *
 * - log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).
 *
 * ```sh
 * $ pulumi import vercel:index/logDrain:LogDrain example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and edge_config_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - log_drain_id can be found by querying the Vercel REST API (https://vercel.com/docs/rest-api/endpoints/logDrains#retrieves-a-list-of-all-the-log-drains).
 *
 * ```sh
 * $ pulumi import vercel:index/logDrain:LogDrain example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 */
export declare class LogDrain extends pulumi.CustomResource {
    /**
     * Get an existing LogDrain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogDrainState, opts?: pulumi.CustomResourceOptions): LogDrain;
    /**
     * Returns true if the given object is an instance of LogDrain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LogDrain;
    /**
     * The format log data should be delivered in. Can be `json` or `ndjson`.
     */
    readonly deliveryFormat: pulumi.Output<string>;
    /**
     * Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpointVerification data source. The value the `x-vercel-verify` header should be can be read from the `vercelEndpointVerificationCode` data source.
     */
    readonly endpoint: pulumi.Output<string>;
    /**
     * Logs from the selected environments will be forwarded to your webhook. At least one must be present.
     */
    readonly environments: pulumi.Output<string[]>;
    /**
     * Custom headers to include in requests to the log drain endpoint.
     */
    readonly headers: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.
     */
    readonly projectIds: pulumi.Output<string[] | undefined>;
    /**
     * A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.
     */
    readonly samplingRate: pulumi.Output<number | undefined>;
    /**
     * A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.
     */
    readonly secret: pulumi.Output<string>;
    /**
     * A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.
     */
    readonly sources: pulumi.Output<string[]>;
    /**
     * The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: pulumi.Output<string>;
    /**
     * Create a LogDrain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogDrainArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LogDrain resources.
 */
export interface LogDrainState {
    /**
     * The format log data should be delivered in. Can be `json` or `ndjson`.
     */
    deliveryFormat?: pulumi.Input<string>;
    /**
     * Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpointVerification data source. The value the `x-vercel-verify` header should be can be read from the `vercelEndpointVerificationCode` data source.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Logs from the selected environments will be forwarded to your webhook. At least one must be present.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom headers to include in requests to the log drain endpoint.
     */
    headers?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.
     */
    samplingRate?: pulumi.Input<number>;
    /**
     * A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.
     */
    secret?: pulumi.Input<string>;
    /**
     * A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.
     */
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a LogDrain resource.
 */
export interface LogDrainArgs {
    /**
     * The format log data should be delivered in. Can be `json` or `ndjson`.
     */
    deliveryFormat: pulumi.Input<string>;
    /**
     * Logs will be sent as POST requests to this URL. The endpoint will be verified, and must return a `200` status code and an `x-vercel-verify` header taken from the endpointVerification data source. The value the `x-vercel-verify` header should be can be read from the `vercelEndpointVerificationCode` data source.
     */
    endpoint: pulumi.Input<string>;
    /**
     * Logs from the selected environments will be forwarded to your webhook. At least one must be present.
     */
    environments: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom headers to include in requests to the log drain endpoint.
     */
    headers?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A list of project IDs that the log drain should be associated with. Logs from these projects will be sent log events to the specified endpoint. If omitted, logs will be sent for all projects.
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A ratio of logs matching the sampling rate will be sent to your log drain. Should be a value between 0 and 1. If unspecified, all logs are sent.
     */
    samplingRate?: pulumi.Input<number>;
    /**
     * A custom secret to be used for signing log events. You can use this secret to verify that log events are coming from Vercel and are not tampered with. See https://vercel.com/docs/observability/log-drains/log-drains-reference#secure-log-drains for full info.
     */
    secret?: pulumi.Input<string>;
    /**
     * A set of sources that the log drain should send logs for. Valid values are `static`, `edge`, `external`, `build` and `lambda`.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the team the Log Drain should exist under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
