"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.Webhook = exports.SharedEnvironmentVariable = exports.Provider = exports.ProjectFunctionCpu = exports.ProjectEnvironmentVariable = exports.ProjectDomain = exports.Project = exports.LogDrain = exports.getSharedEnvironmentVariableOutput = exports.getSharedEnvironmentVariable = exports.getProjectFunctionCpuOutput = exports.getProjectFunctionCpu = exports.getProjectDirectoryOutput = exports.getProjectDirectory = exports.getProjectOutput = exports.getProject = exports.getPrebuiltProjectOutput = exports.getPrebuiltProject = exports.getLogDrainOutput = exports.getLogDrain = exports.getFileOutput = exports.getFile = exports.getEndpointVerificationOutput = exports.getEndpointVerification = exports.getEdgeConfigTokenOutput = exports.getEdgeConfigToken = exports.getEdgeConfigSchemaOutput = exports.getEdgeConfigSchema = exports.getEdgeConfigOutput = exports.getEdgeConfig = exports.getDeploymentOutput = exports.getDeployment = exports.getAttackChallengeModeOutput = exports.getAttackChallengeMode = exports.getAliasOutput = exports.getAlias = exports.EdgeConfigToken = exports.EdgeConfigSchema = exports.EdgeConfig = exports.DnsRecord = exports.Deployment = exports.AttackChallengeMode = exports.Alias = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Alias = null;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));
exports.AttackChallengeMode = null;
utilities.lazyLoad(exports, ["AttackChallengeMode"], () => require("./attackChallengeMode"));
exports.Deployment = null;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));
exports.DnsRecord = null;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));
exports.EdgeConfig = null;
utilities.lazyLoad(exports, ["EdgeConfig"], () => require("./edgeConfig"));
exports.EdgeConfigSchema = null;
utilities.lazyLoad(exports, ["EdgeConfigSchema"], () => require("./edgeConfigSchema"));
exports.EdgeConfigToken = null;
utilities.lazyLoad(exports, ["EdgeConfigToken"], () => require("./edgeConfigToken"));
exports.getAlias = null;
exports.getAliasOutput = null;
utilities.lazyLoad(exports, ["getAlias", "getAliasOutput"], () => require("./getAlias"));
exports.getAttackChallengeMode = null;
exports.getAttackChallengeModeOutput = null;
utilities.lazyLoad(exports, ["getAttackChallengeMode", "getAttackChallengeModeOutput"], () => require("./getAttackChallengeMode"));
exports.getDeployment = null;
exports.getDeploymentOutput = null;
utilities.lazyLoad(exports, ["getDeployment", "getDeploymentOutput"], () => require("./getDeployment"));
exports.getEdgeConfig = null;
exports.getEdgeConfigOutput = null;
utilities.lazyLoad(exports, ["getEdgeConfig", "getEdgeConfigOutput"], () => require("./getEdgeConfig"));
exports.getEdgeConfigSchema = null;
exports.getEdgeConfigSchemaOutput = null;
utilities.lazyLoad(exports, ["getEdgeConfigSchema", "getEdgeConfigSchemaOutput"], () => require("./getEdgeConfigSchema"));
exports.getEdgeConfigToken = null;
exports.getEdgeConfigTokenOutput = null;
utilities.lazyLoad(exports, ["getEdgeConfigToken", "getEdgeConfigTokenOutput"], () => require("./getEdgeConfigToken"));
exports.getEndpointVerification = null;
exports.getEndpointVerificationOutput = null;
utilities.lazyLoad(exports, ["getEndpointVerification", "getEndpointVerificationOutput"], () => require("./getEndpointVerification"));
exports.getFile = null;
exports.getFileOutput = null;
utilities.lazyLoad(exports, ["getFile", "getFileOutput"], () => require("./getFile"));
exports.getLogDrain = null;
exports.getLogDrainOutput = null;
utilities.lazyLoad(exports, ["getLogDrain", "getLogDrainOutput"], () => require("./getLogDrain"));
exports.getPrebuiltProject = null;
exports.getPrebuiltProjectOutput = null;
utilities.lazyLoad(exports, ["getPrebuiltProject", "getPrebuiltProjectOutput"], () => require("./getPrebuiltProject"));
exports.getProject = null;
exports.getProjectOutput = null;
utilities.lazyLoad(exports, ["getProject", "getProjectOutput"], () => require("./getProject"));
exports.getProjectDirectory = null;
exports.getProjectDirectoryOutput = null;
utilities.lazyLoad(exports, ["getProjectDirectory", "getProjectDirectoryOutput"], () => require("./getProjectDirectory"));
exports.getProjectFunctionCpu = null;
exports.getProjectFunctionCpuOutput = null;
utilities.lazyLoad(exports, ["getProjectFunctionCpu", "getProjectFunctionCpuOutput"], () => require("./getProjectFunctionCpu"));
exports.getSharedEnvironmentVariable = null;
exports.getSharedEnvironmentVariableOutput = null;
utilities.lazyLoad(exports, ["getSharedEnvironmentVariable", "getSharedEnvironmentVariableOutput"], () => require("./getSharedEnvironmentVariable"));
exports.LogDrain = null;
utilities.lazyLoad(exports, ["LogDrain"], () => require("./logDrain"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
exports.ProjectDomain = null;
utilities.lazyLoad(exports, ["ProjectDomain"], () => require("./projectDomain"));
exports.ProjectEnvironmentVariable = null;
utilities.lazyLoad(exports, ["ProjectEnvironmentVariable"], () => require("./projectEnvironmentVariable"));
exports.ProjectFunctionCpu = null;
utilities.lazyLoad(exports, ["ProjectFunctionCpu"], () => require("./projectFunctionCpu"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.SharedEnvironmentVariable = null;
utilities.lazyLoad(exports, ["SharedEnvironmentVariable"], () => require("./sharedEnvironmentVariable"));
exports.Webhook = null;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "vercel:index/alias:Alias":
                return new exports.Alias(name, undefined, { urn });
            case "vercel:index/attackChallengeMode:AttackChallengeMode":
                return new exports.AttackChallengeMode(name, undefined, { urn });
            case "vercel:index/deployment:Deployment":
                return new exports.Deployment(name, undefined, { urn });
            case "vercel:index/dnsRecord:DnsRecord":
                return new exports.DnsRecord(name, undefined, { urn });
            case "vercel:index/edgeConfig:EdgeConfig":
                return new exports.EdgeConfig(name, undefined, { urn });
            case "vercel:index/edgeConfigSchema:EdgeConfigSchema":
                return new exports.EdgeConfigSchema(name, undefined, { urn });
            case "vercel:index/edgeConfigToken:EdgeConfigToken":
                return new exports.EdgeConfigToken(name, undefined, { urn });
            case "vercel:index/logDrain:LogDrain":
                return new exports.LogDrain(name, undefined, { urn });
            case "vercel:index/project:Project":
                return new exports.Project(name, undefined, { urn });
            case "vercel:index/projectDomain:ProjectDomain":
                return new exports.ProjectDomain(name, undefined, { urn });
            case "vercel:index/projectEnvironmentVariable:ProjectEnvironmentVariable":
                return new exports.ProjectEnvironmentVariable(name, undefined, { urn });
            case "vercel:index/projectFunctionCpu:ProjectFunctionCpu":
                return new exports.ProjectFunctionCpu(name, undefined, { urn });
            case "vercel:index/sharedEnvironmentVariable:SharedEnvironmentVariable":
                return new exports.SharedEnvironmentVariable(name, undefined, { urn });
            case "vercel:index/webhook:Webhook":
                return new exports.Webhook(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vercel", "index/alias", _module);
pulumi.runtime.registerResourceModule("vercel", "index/attackChallengeMode", _module);
pulumi.runtime.registerResourceModule("vercel", "index/deployment", _module);
pulumi.runtime.registerResourceModule("vercel", "index/dnsRecord", _module);
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfig", _module);
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfigSchema", _module);
pulumi.runtime.registerResourceModule("vercel", "index/edgeConfigToken", _module);
pulumi.runtime.registerResourceModule("vercel", "index/logDrain", _module);
pulumi.runtime.registerResourceModule("vercel", "index/project", _module);
pulumi.runtime.registerResourceModule("vercel", "index/projectDomain", _module);
pulumi.runtime.registerResourceModule("vercel", "index/projectEnvironmentVariable", _module);
pulumi.runtime.registerResourceModule("vercel", "index/projectFunctionCpu", _module);
pulumi.runtime.registerResourceModule("vercel", "index/sharedEnvironmentVariable", _module);
pulumi.runtime.registerResourceModule("vercel", "index/webhook", _module);
pulumi.runtime.registerResourcePackage("vercel", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:vercel") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map