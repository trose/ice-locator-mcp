import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * // A project that is connected to a git repository.
 * // Deployments will be created automatically
 * // on every branch push and merges onto the Production Branch.
 * const withGit = new vercel.Project("withGit", {
 *     framework: "nextjs",
 *     gitRepository: {
 *         repo: "vercel/some-repo",
 *         type: "github",
 *     },
 * });
 * // A project that is not connected to a git repository.
 * // Deployments will need to be created manually through
 * // terraform, or via the vercel CLI.
 * const example = new vercel.Project("example", {framework: "nextjs"});
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project ID.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/project:Project example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and project_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/project:Project example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
export declare class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project;
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Project;
    /**
     * Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
     */
    readonly autoAssignCustomDomains: pulumi.Output<boolean>;
    /**
     * Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
     */
    readonly automaticallyExposeSystemEnvironmentVariables: pulumi.Output<boolean>;
    /**
     * The build command for this project. If omitted, this value will be automatically detected.
     */
    readonly buildCommand: pulumi.Output<string | undefined>;
    /**
     * Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
     */
    readonly customerSuccessCodeVisibility: pulumi.Output<boolean>;
    /**
     * The dev command for this project. If omitted, this value will be automatically detected.
     */
    readonly devCommand: pulumi.Output<string | undefined>;
    /**
     * If no index file is present within a directory, the directory contents will be displayed.
     */
    readonly directoryListing: pulumi.Output<boolean>;
    /**
     * A set of Environment Variables that should be configured for the project.
     */
    readonly environments: pulumi.Output<outputs.ProjectEnvironment[] | undefined>;
    /**
     * The framework that is being used for this project. If omitted, no framework is selected.
     */
    readonly framework: pulumi.Output<string | undefined>;
    /**
     * Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
     */
    readonly functionFailover: pulumi.Output<boolean>;
    /**
     * Configuration for Git Comments.
     */
    readonly gitComments: pulumi.Output<outputs.ProjectGitComments | undefined>;
    /**
     * Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
     */
    readonly gitForkProtection: pulumi.Output<boolean>;
    /**
     * Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
     */
    readonly gitLfs: pulumi.Output<boolean>;
    /**
     * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
     */
    readonly gitRepository: pulumi.Output<outputs.ProjectGitRepository | undefined>;
    /**
     * When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
     */
    readonly ignoreCommand: pulumi.Output<string | undefined>;
    /**
     * The install command for this project. If omitted, this value will be automatically detected.
     */
    readonly installCommand: pulumi.Output<string | undefined>;
    /**
     * The desired name for the project.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
     */
    readonly optionsAllowlist: pulumi.Output<outputs.ProjectOptionsAllowlist | undefined>;
    /**
     * The output directory of the project. If omitted, this value will be automatically detected.
     */
    readonly outputDirectory: pulumi.Output<string | undefined>;
    /**
     * Ensures visitors of your Preview Deployments must enter a password in order to gain access.
     */
    readonly passwordProtection: pulumi.Output<outputs.ProjectPasswordProtection | undefined>;
    /**
     * Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
     */
    readonly previewComments: pulumi.Output<boolean | undefined>;
    /**
     * If enabled, builds for the Production environment will be prioritized over Preview environments.
     */
    readonly prioritiseProductionBuilds: pulumi.Output<boolean>;
    /**
     * Allow automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `passwordProtectionForAutomationSecret` field.
     */
    readonly protectionBypassForAutomation: pulumi.Output<boolean | undefined>;
    /**
     * If `protectionBypassForAutomation` is enabled, use this value in the `x-vercel-protection-bypass` header to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments.
     */
    readonly protectionBypassForAutomationSecret: pulumi.Output<string>;
    /**
     * By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
     */
    readonly publicSource: pulumi.Output<boolean | undefined>;
    /**
     * The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
     */
    readonly rootDirectory: pulumi.Output<string | undefined>;
    /**
     * The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
     */
    readonly serverlessFunctionRegion: pulumi.Output<string>;
    /**
     * Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
     */
    readonly skewProtection: pulumi.Output<string | undefined>;
    /**
     * The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: pulumi.Output<string>;
    /**
     * Ensures only visitors from an allowed IP address can access your deployment.
     */
    readonly trustedIps: pulumi.Output<outputs.ProjectTrustedIps | undefined>;
    /**
     * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
     */
    readonly vercelAuthentication: pulumi.Output<outputs.ProjectVercelAuthentication>;
    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
     */
    autoAssignCustomDomains?: pulumi.Input<boolean>;
    /**
     * Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
     */
    automaticallyExposeSystemEnvironmentVariables?: pulumi.Input<boolean>;
    /**
     * The build command for this project. If omitted, this value will be automatically detected.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
     */
    customerSuccessCodeVisibility?: pulumi.Input<boolean>;
    /**
     * The dev command for this project. If omitted, this value will be automatically detected.
     */
    devCommand?: pulumi.Input<string>;
    /**
     * If no index file is present within a directory, the directory contents will be displayed.
     */
    directoryListing?: pulumi.Input<boolean>;
    /**
     * A set of Environment Variables that should be configured for the project.
     */
    environments?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironment>[]>;
    /**
     * The framework that is being used for this project. If omitted, no framework is selected.
     */
    framework?: pulumi.Input<string>;
    /**
     * Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
     */
    functionFailover?: pulumi.Input<boolean>;
    /**
     * Configuration for Git Comments.
     */
    gitComments?: pulumi.Input<inputs.ProjectGitComments>;
    /**
     * Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
     */
    gitForkProtection?: pulumi.Input<boolean>;
    /**
     * Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
     */
    gitLfs?: pulumi.Input<boolean>;
    /**
     * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
     */
    gitRepository?: pulumi.Input<inputs.ProjectGitRepository>;
    /**
     * When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
     */
    ignoreCommand?: pulumi.Input<string>;
    /**
     * The install command for this project. If omitted, this value will be automatically detected.
     */
    installCommand?: pulumi.Input<string>;
    /**
     * The desired name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
     */
    optionsAllowlist?: pulumi.Input<inputs.ProjectOptionsAllowlist>;
    /**
     * The output directory of the project. If omitted, this value will be automatically detected.
     */
    outputDirectory?: pulumi.Input<string>;
    /**
     * Ensures visitors of your Preview Deployments must enter a password in order to gain access.
     */
    passwordProtection?: pulumi.Input<inputs.ProjectPasswordProtection>;
    /**
     * Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
     */
    previewComments?: pulumi.Input<boolean>;
    /**
     * If enabled, builds for the Production environment will be prioritized over Preview environments.
     */
    prioritiseProductionBuilds?: pulumi.Input<boolean>;
    /**
     * Allow automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `passwordProtectionForAutomationSecret` field.
     */
    protectionBypassForAutomation?: pulumi.Input<boolean>;
    /**
     * If `protectionBypassForAutomation` is enabled, use this value in the `x-vercel-protection-bypass` header to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments.
     */
    protectionBypassForAutomationSecret?: pulumi.Input<string>;
    /**
     * By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
     */
    publicSource?: pulumi.Input<boolean>;
    /**
     * The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
     */
    rootDirectory?: pulumi.Input<string>;
    /**
     * The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
     */
    serverlessFunctionRegion?: pulumi.Input<string>;
    /**
     * Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
     */
    skewProtection?: pulumi.Input<string>;
    /**
     * The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Ensures only visitors from an allowed IP address can access your deployment.
     */
    trustedIps?: pulumi.Input<inputs.ProjectTrustedIps>;
    /**
     * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
     */
    vercelAuthentication?: pulumi.Input<inputs.ProjectVercelAuthentication>;
}
/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Automatically assign custom production domains after each Production deployment via merge to the production branch or Vercel CLI deploy with --prod. Defaults to `true`
     */
    autoAssignCustomDomains?: pulumi.Input<boolean>;
    /**
     * Vercel provides a set of Environment Variables that are automatically populated by the System, such as the URL of the Deployment or the name of the Git branch deployed. To expose them to your Deployments, enable this field
     */
    automaticallyExposeSystemEnvironmentVariables?: pulumi.Input<boolean>;
    /**
     * The build command for this project. If omitted, this value will be automatically detected.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * Allows Vercel Customer Support to inspect all Deployments' source code in this project to assist with debugging.
     */
    customerSuccessCodeVisibility?: pulumi.Input<boolean>;
    /**
     * The dev command for this project. If omitted, this value will be automatically detected.
     */
    devCommand?: pulumi.Input<string>;
    /**
     * If no index file is present within a directory, the directory contents will be displayed.
     */
    directoryListing?: pulumi.Input<boolean>;
    /**
     * A set of Environment Variables that should be configured for the project.
     */
    environments?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironment>[]>;
    /**
     * The framework that is being used for this project. If omitted, no framework is selected.
     */
    framework?: pulumi.Input<string>;
    /**
     * Automatically failover Serverless Functions to the nearest region. You can customize regions through vercel.json. A new Deployment is required for your changes to take effect.
     */
    functionFailover?: pulumi.Input<boolean>;
    /**
     * Configuration for Git Comments.
     */
    gitComments?: pulumi.Input<inputs.ProjectGitComments>;
    /**
     * Ensures that pull requests targeting your Git repository must be authorized by a member of your Team before deploying if your Project has Environment Variables or if the pull request includes a change to vercel.json. Defaults to `true`.
     */
    gitForkProtection?: pulumi.Input<boolean>;
    /**
     * Enables Git LFS support. Git LFS replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.
     */
    gitLfs?: pulumi.Input<boolean>;
    /**
     * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. This requires the corresponding Vercel for [Github](https://vercel.com/docs/concepts/git/vercel-for-github), [Gitlab](https://vercel.com/docs/concepts/git/vercel-for-gitlab) or [Bitbucket](https://vercel.com/docs/concepts/git/vercel-for-bitbucket) plugins to be installed.
     */
    gitRepository?: pulumi.Input<inputs.ProjectGitRepository>;
    /**
     * When a commit is pushed to the Git repository that is connected with your Project, its SHA will determine if a new Build has to be issued. If the SHA was deployed before, no new Build will be issued. You can customize this behavior with a command that exits with code 1 (new Build needed) or code 0.
     */
    ignoreCommand?: pulumi.Input<string>;
    /**
     * The install command for this project. If omitted, this value will be automatically detected.
     */
    installCommand?: pulumi.Input<string>;
    /**
     * The desired name for the project.
     */
    name?: pulumi.Input<string>;
    /**
     * Disable Deployment Protection for CORS preflight `OPTIONS` requests for a list of paths.
     */
    optionsAllowlist?: pulumi.Input<inputs.ProjectOptionsAllowlist>;
    /**
     * The output directory of the project. If omitted, this value will be automatically detected.
     */
    outputDirectory?: pulumi.Input<string>;
    /**
     * Ensures visitors of your Preview Deployments must enter a password in order to gain access.
     */
    passwordProtection?: pulumi.Input<inputs.ProjectPasswordProtection>;
    /**
     * Whether to enable comments on your Preview Deployments. If omitted, comments are controlled at the team level (default behaviour).
     */
    previewComments?: pulumi.Input<boolean>;
    /**
     * If enabled, builds for the Production environment will be prioritized over Preview environments.
     */
    prioritiseProductionBuilds?: pulumi.Input<boolean>;
    /**
     * Allow automation services to bypass Vercel Authentication and Password Protection for both Preview and Production Deployments on this project when using an HTTP header named `x-vercel-protection-bypass` with a value of the `passwordProtectionForAutomationSecret` field.
     */
    protectionBypassForAutomation?: pulumi.Input<boolean>;
    /**
     * By default, visitors to the `/_logs` and `/_src` paths of your Production and Preview Deployments must log in with Vercel (requires being a member of your team) to see the Source, Logs and Deployment Status of your project. Setting `publicSource` to `true` disables this behaviour, meaning the Source, Logs and Deployment Status can be publicly viewed.
     */
    publicSource?: pulumi.Input<boolean>;
    /**
     * The name of a directory or relative path to the source code of your project. If omitted, it will default to the project root.
     */
    rootDirectory?: pulumi.Input<string>;
    /**
     * The region on Vercel's network to which your Serverless Functions are deployed. It should be close to any data source your Serverless Function might depend on. A new Deployment is required for your changes to take effect. Please see [Vercel's documentation](https://vercel.com/docs/concepts/edge-network/regions) for a full list of regions.
     */
    serverlessFunctionRegion?: pulumi.Input<string>;
    /**
     * Ensures that outdated clients always fetch the correct version for a given deployment. This value defines how long Vercel keeps Skew Protection active.
     */
    skewProtection?: pulumi.Input<string>;
    /**
     * The team ID to add the project to. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Ensures only visitors from an allowed IP address can access your deployment.
     */
    trustedIps?: pulumi.Input<inputs.ProjectTrustedIps>;
    /**
     * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team.
     */
    vercelAuthentication?: pulumi.Input<inputs.ProjectVercelAuthentication>;
}
