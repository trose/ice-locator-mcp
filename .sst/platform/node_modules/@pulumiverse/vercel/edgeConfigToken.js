"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeConfigToken = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides an Edge Config Token resource.
 *
 * An Edge Config is a global data store that enables experimentation with feature flags, A/B testing, critical redirects, and more.
 *
 * An Edge Config token is used to authenticate against an Edge Config's endpoint.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleEdgeConfig = new vercel.EdgeConfig("exampleEdgeConfig", {});
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleEdgeConfigToken = new vercel.EdgeConfigToken("exampleEdgeConfigToken", {
 *     edgeConfigId: exampleEdgeConfig.id,
 *     label: "example token",
 * });
 * const exampleProjectEnvironmentVariable = new vercel.ProjectEnvironmentVariable("exampleProjectEnvironmentVariable", {
 *     projectId: exampleProject.id,
 *     targets: [
 *         "production",
 *         "preview",
 *         "development",
 *     ],
 *     key: "EDGE_CONFIG",
 *     value: exampleEdgeConfigToken.connectionString,
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the edge config id and token value.
 *
 * - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
 *
 * - token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.
 *
 * ```sh
 * $ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and edge_config_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - edge_config_id can be found by navigating to the Edge Config in the Vercel UI. It should begin with `ecfg_`.
 *
 * - token can be found in the Vercel UI under Storage, Edge Config, the specific Edge Config, Tokens.
 *
 * ```sh
 * $ pulumi import vercel:index/edgeConfigToken:EdgeConfigToken example team_xxxxxxxxxxxxxxxxxxxxxxxx/ecfg_xxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 */
class EdgeConfigToken extends pulumi.CustomResource {
    /**
     * Get an existing EdgeConfigToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EdgeConfigToken(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EdgeConfigToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeConfigToken.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["edgeConfigId"] = state ? state.edgeConfigId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.edgeConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeConfigId'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["edgeConfigId"] = args ? args.edgeConfigId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeConfigToken.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EdgeConfigToken = EdgeConfigToken;
/** @internal */
EdgeConfigToken.__pulumiType = 'vercel:index/edgeConfigToken:EdgeConfigToken';
//# sourceMappingURL=edgeConfigToken.js.map