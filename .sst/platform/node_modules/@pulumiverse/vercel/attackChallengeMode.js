"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttackChallengeMode = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides an Attack Challenge Mode resource.
 *
 * Attack Challenge Mode prevent malicious traffic by showing a verification challenge for every visitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const exampleProject = new vercel.Project("exampleProject", {});
 * const exampleAttackChallengeMode = new vercel.AttackChallengeMode("exampleAttackChallengeMode", {
 *     projectId: exampleProject.id,
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * You can import via the team_id and project_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/attackChallengeMode:AttackChallengeMode example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
class AttackChallengeMode extends pulumi.CustomResource {
    /**
     * Get an existing AttackChallengeMode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AttackChallengeMode(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AttackChallengeMode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttackChallengeMode.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AttackChallengeMode.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AttackChallengeMode = AttackChallengeMode;
/** @internal */
AttackChallengeMode.__pulumiType = 'vercel:index/attackChallengeMode:AttackChallengeMode';
//# sourceMappingURL=attackChallengeMode.js.map