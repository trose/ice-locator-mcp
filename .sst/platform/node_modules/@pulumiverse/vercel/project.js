"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * // A project that is connected to a git repository.
 * // Deployments will be created automatically
 * // on every branch push and merges onto the Production Branch.
 * const withGit = new vercel.Project("withGit", {
 *     framework: "nextjs",
 *     gitRepository: {
 *         repo: "vercel/some-repo",
 *         type: "github",
 *     },
 * });
 * // A project that is not connected to a git repository.
 * // Deployments will need to be created manually through
 * // terraform, or via the vercel CLI.
 * const example = new vercel.Project("example", {framework: "nextjs"});
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the project ID.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/project:Project example prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and project_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - project_id can be found in the project `settings` tab in the Vercel UI.
 *
 * ```sh
 * $ pulumi import vercel:index/project:Project example team_xxxxxxxxxxxxxxxxxxxxxxxx/prj_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Project(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoAssignCustomDomains"] = state ? state.autoAssignCustomDomains : undefined;
            resourceInputs["automaticallyExposeSystemEnvironmentVariables"] = state ? state.automaticallyExposeSystemEnvironmentVariables : undefined;
            resourceInputs["buildCommand"] = state ? state.buildCommand : undefined;
            resourceInputs["customerSuccessCodeVisibility"] = state ? state.customerSuccessCodeVisibility : undefined;
            resourceInputs["devCommand"] = state ? state.devCommand : undefined;
            resourceInputs["directoryListing"] = state ? state.directoryListing : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["framework"] = state ? state.framework : undefined;
            resourceInputs["functionFailover"] = state ? state.functionFailover : undefined;
            resourceInputs["gitComments"] = state ? state.gitComments : undefined;
            resourceInputs["gitForkProtection"] = state ? state.gitForkProtection : undefined;
            resourceInputs["gitLfs"] = state ? state.gitLfs : undefined;
            resourceInputs["gitRepository"] = state ? state.gitRepository : undefined;
            resourceInputs["ignoreCommand"] = state ? state.ignoreCommand : undefined;
            resourceInputs["installCommand"] = state ? state.installCommand : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optionsAllowlist"] = state ? state.optionsAllowlist : undefined;
            resourceInputs["outputDirectory"] = state ? state.outputDirectory : undefined;
            resourceInputs["passwordProtection"] = state ? state.passwordProtection : undefined;
            resourceInputs["previewComments"] = state ? state.previewComments : undefined;
            resourceInputs["prioritiseProductionBuilds"] = state ? state.prioritiseProductionBuilds : undefined;
            resourceInputs["protectionBypassForAutomation"] = state ? state.protectionBypassForAutomation : undefined;
            resourceInputs["protectionBypassForAutomationSecret"] = state ? state.protectionBypassForAutomationSecret : undefined;
            resourceInputs["publicSource"] = state ? state.publicSource : undefined;
            resourceInputs["rootDirectory"] = state ? state.rootDirectory : undefined;
            resourceInputs["serverlessFunctionRegion"] = state ? state.serverlessFunctionRegion : undefined;
            resourceInputs["skewProtection"] = state ? state.skewProtection : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["trustedIps"] = state ? state.trustedIps : undefined;
            resourceInputs["vercelAuthentication"] = state ? state.vercelAuthentication : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["autoAssignCustomDomains"] = args ? args.autoAssignCustomDomains : undefined;
            resourceInputs["automaticallyExposeSystemEnvironmentVariables"] = args ? args.automaticallyExposeSystemEnvironmentVariables : undefined;
            resourceInputs["buildCommand"] = args ? args.buildCommand : undefined;
            resourceInputs["customerSuccessCodeVisibility"] = args ? args.customerSuccessCodeVisibility : undefined;
            resourceInputs["devCommand"] = args ? args.devCommand : undefined;
            resourceInputs["directoryListing"] = args ? args.directoryListing : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["framework"] = args ? args.framework : undefined;
            resourceInputs["functionFailover"] = args ? args.functionFailover : undefined;
            resourceInputs["gitComments"] = args ? args.gitComments : undefined;
            resourceInputs["gitForkProtection"] = args ? args.gitForkProtection : undefined;
            resourceInputs["gitLfs"] = args ? args.gitLfs : undefined;
            resourceInputs["gitRepository"] = args ? args.gitRepository : undefined;
            resourceInputs["ignoreCommand"] = args ? args.ignoreCommand : undefined;
            resourceInputs["installCommand"] = args ? args.installCommand : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optionsAllowlist"] = args ? args.optionsAllowlist : undefined;
            resourceInputs["outputDirectory"] = args ? args.outputDirectory : undefined;
            resourceInputs["passwordProtection"] = args ? args.passwordProtection : undefined;
            resourceInputs["previewComments"] = args ? args.previewComments : undefined;
            resourceInputs["prioritiseProductionBuilds"] = args ? args.prioritiseProductionBuilds : undefined;
            resourceInputs["protectionBypassForAutomation"] = args ? args.protectionBypassForAutomation : undefined;
            resourceInputs["publicSource"] = args ? args.publicSource : undefined;
            resourceInputs["rootDirectory"] = args ? args.rootDirectory : undefined;
            resourceInputs["serverlessFunctionRegion"] = args ? args.serverlessFunctionRegion : undefined;
            resourceInputs["skewProtection"] = args ? args.skewProtection : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["trustedIps"] = args ? args.trustedIps : undefined;
            resourceInputs["vercelAuthentication"] = args ? args.vercelAuthentication : undefined;
            resourceInputs["protectionBypassForAutomationSecret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Project = Project;
/** @internal */
Project.__pulumiType = 'vercel:index/project:Project';
//# sourceMappingURL=project.js.map