"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsRecord = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DNS Record resource.
 *
 * DNS records are instructions that live in authoritative DNS servers and provide information about a domain.
 *
 * > The `value` field must be specified on all DNS record types except `SRV`. When using `SRV` DNS records, the `srv` field must be specified.
 *
 * For more detailed information, please see the [Vercel documentation](https://vercel.com/docs/concepts/projects/custom-domains#dns-records)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumiverse/vercel";
 *
 * const dnsRecord = new vercel.DnsRecord("dnsRecord", {
 *     domain: "example.com",
 *     ttl: 60,
 *     type: "A",
 *     value: "192.168.0.1",
 * });
 * const aaaa = new vercel.DnsRecord("aaaa", {
 *     domain: "example.com",
 *     ttl: 60,
 *     type: "AAAA",
 *     value: "::0",
 * });
 * const alias = new vercel.DnsRecord("alias", {
 *     domain: "example.com",
 *     ttl: 60,
 *     type: "ALIAS",
 *     value: "example2.com.",
 * });
 * const caa = new vercel.DnsRecord("caa", {
 *     domain: "example.com",
 *     ttl: 60,
 *     type: "CAA",
 *     value: "1 issue \"letsencrypt.org\"",
 * });
 * const cname = new vercel.DnsRecord("cname", {
 *     domain: "example.com",
 *     ttl: 60,
 *     type: "CNAME",
 *     value: "example2.com.",
 * });
 * const mx = new vercel.DnsRecord("mx", {
 *     domain: "example.com",
 *     mxPriority: 333,
 *     ttl: 60,
 *     type: "MX",
 *     value: "example2.com.",
 * });
 * const srv = new vercel.DnsRecord("srv", {
 *     domain: "example.com",
 *     srv: {
 *         port: 6000,
 *         priority: 127,
 *         target: "example2.com.",
 *         weight: 60,
 *     },
 *     ttl: 60,
 *     type: "SRV",
 * });
 * const txt = new vercel.DnsRecord("txt", {
 *     domain: "example.com",
 *     ttl: 60,
 *     type: "TXT",
 *     value: "some text value",
 * });
 * ```
 *
 * ## Import
 *
 * If importing into a personal account, or with a team configured on
 *
 * the provider, simply use the record id.
 *
 * - record_id can be taken from the network tab inside developer tools, while you are on the domains page,
 *
 * or can be queried from the Vercel API directly (https://vercel.com/docs/rest-api/endpoints/dns#list-existing-dns-records).
 *
 * ```sh
 * $ pulumi import vercel:index/dnsRecord:DnsRecord example rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 *
 * Alternatively, you can import via the team_id and record_id.
 *
 * - team_id can be found in the team `settings` tab in the Vercel UI.
 *
 * - record_id can be taken from the network tab inside developer tools, while you are on the domains page,
 *
 * or can be queried from the Vercel API directly (https://vercel.com/docs/rest-api/endpoints/dns#list-existing-dns-records).
 *
 * ```sh
 * $ pulumi import vercel:index/dnsRecord:DnsRecord example team_xxxxxxxxxxxxxxxxxxxxxxxx/rec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * ```
 */
class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DnsRecord(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["mxPriority"] = state ? state.mxPriority : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["srv"] = state ? state.srv : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["mxPriority"] = args ? args.mxPriority : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["srv"] = args ? args.srv : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DnsRecord = DnsRecord;
/** @internal */
DnsRecord.__pulumiType = 'vercel:index/dnsRecord:DnsRecord';
//# sourceMappingURL=dnsRecord.js.map