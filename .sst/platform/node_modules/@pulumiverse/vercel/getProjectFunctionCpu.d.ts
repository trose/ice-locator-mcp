import * as pulumi from "@pulumi/pulumi";
/**
 * Provides information about a Project's Function CPU setting.
 *
 * This controls the maximum amount of CPU utilization your Serverless Functions can use while executing. Standard is optimal for most frontend workloads. You can override this per function using the vercel.json file.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumi/vercel";
 *
 * const exampleProject = vercel.getProject({
 *     name: "example",
 * });
 * const exampleProjectFunctionCpu = exampleProject.then(exampleProject => vercel.getProjectFunctionCpu({
 *     projectId: exampleProject.id,
 * }));
 * ```
 */
export declare function getProjectFunctionCpu(args: GetProjectFunctionCpuArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectFunctionCpuResult>;
/**
 * A collection of arguments for invoking getProjectFunctionCpu.
 */
export interface GetProjectFunctionCpuArgs {
    /**
     * The ID of the Project to read the Function CPU setting for.
     */
    projectId: string;
    /**
     * The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: string;
}
/**
 * A collection of values returned by getProjectFunctionCpu.
 */
export interface GetProjectFunctionCpuResult {
    /**
     * The amount of CPU available to your Serverless Functions. Should be one of 'basic' (0.6vCPU), 'standard' (1vCPU) or 'performance' (1.7vCPUs).
     */
    readonly cpu: string;
    /**
     * The ID of the resource.
     */
    readonly id: string;
    /**
     * The ID of the Project to read the Function CPU setting for.
     */
    readonly projectId: string;
    /**
     * The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    readonly teamId: string;
}
/**
 * Provides information about a Project's Function CPU setting.
 *
 * This controls the maximum amount of CPU utilization your Serverless Functions can use while executing. Standard is optimal for most frontend workloads. You can override this per function using the vercel.json file.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vercel from "@pulumi/vercel";
 *
 * const exampleProject = vercel.getProject({
 *     name: "example",
 * });
 * const exampleProjectFunctionCpu = exampleProject.then(exampleProject => vercel.getProjectFunctionCpu({
 *     projectId: exampleProject.id,
 * }));
 * ```
 */
export declare function getProjectFunctionCpuOutput(args: GetProjectFunctionCpuOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectFunctionCpuResult>;
/**
 * A collection of arguments for invoking getProjectFunctionCpu.
 */
export interface GetProjectFunctionCpuOutputArgs {
    /**
     * The ID of the Project to read the Function CPU setting for.
     */
    projectId: pulumi.Input<string>;
    /**
     * The ID of the team the Project exists under. Required when configuring a team resource if a default team has not been set in the provider.
     */
    teamId?: pulumi.Input<string>;
}
