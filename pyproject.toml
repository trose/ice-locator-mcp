[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ice-locator-mcp"
version = "1.0.0"
description = "Model Context Protocol server for ICE detainee location services"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "mcp",
    "ice",
    "immigration",
    "detainee",
    "legal",
    "government",
    "ai-tools",
    "web-scraping"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.2.0",
    "httpx>=0.25.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "pydantic>=2.0.0",
    "diskcache>=5.6.0",
    "structlog>=23.0.0",
    "aiofiles>=23.0.0",
    "httpx-socks>=0.7.0",
    "fake-useragent>=1.4.0",
    "python-levenshtein>=0.21.0",
    "fuzzywuzzy>=0.18.0",
    "phonetics>=1.0.5",
    "asyncio-throttle>=1.0.2",
    "mcpcat>=1.0.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "psutil>=5.9.0",
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-httpx>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocs-jupyter>=0.24.0",
]
captcha = [
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
]
monitoring = [
    "opentelemetry-exporter-otlp>=1.20.0",
    "datadog>=0.47.0",
    "sentry-sdk>=1.40.0",
    "grafana-api>=1.0.3",
    "pagerduty-api>=1.0.0",
    "slack-sdk>=3.20.0",
]

[project.urls]
Homepage = "https://github.com/trose/ice-locator-mcp"
Documentation = "https://trose.github.io/ice-locator-mcp"
Repository = "https://github.com/trose/ice-locator-mcp.git"
Issues = "https://github.com/trose/ice-locator-mcp/issues"

[project.scripts]
ice-locator-mcp = "ice_locator_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/ice_locator_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function arguments
    "ARG002", # unused method arguments
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "beautifulsoup4.*",
    "lxml.*",
    "diskcache.*",
    "fake_useragent.*",
    "phonetics.*",
    "fuzzywuzzy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "-v --cov=ice_locator_mcp --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src/ice_locator_mcp"]
omit = [
    "tests/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]